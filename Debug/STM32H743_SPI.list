
STM32H743_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a584  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800a81c  0800a81c  0001a81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a870  0800a870  0001a870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a878  0800a878  0001a878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a87c  0800a87c  0001a87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800a880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002b8  24000010  0800a890  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240002c8  0800a890  000202c8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001808e  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e56  00000000  00000000  000380cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010f8  00000000  00000000  0003af28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000fd0  00000000  00000000  0003c020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000386ab  00000000  00000000  0003cff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018bda  00000000  00000000  0007569b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001607ad  00000000  00000000  0008e275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001eea22  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000045f8  00000000  00000000  001eea74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a804 	.word	0x0800a804

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800a804 	.word	0x0800a804

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fd12 	bl	8001008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f80e 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f9a6 	bl	8000938 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005ec:	f000 f930 	bl	8000850 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 80005f0:	f000 f8be 	bl	8000770 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80005f4:	f009 fee0 	bl	800a3b8 <MX_FATFS_Init>
  MX_SPI1_Init();
 80005f8:	f000 f8da 	bl	80007b0 <MX_SPI1_Init>
  MX_DMA_Init();
 80005fc:	f000 f974 	bl	80008e8 <MX_DMA_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000600:	e7fe      	b.n	8000600 <main+0x24>
	...

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b09e      	sub	sp, #120	; 0x78
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800060e:	224c      	movs	r2, #76	; 0x4c
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f00a f8ee 	bl	800a7f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2220      	movs	r2, #32
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f00a f8e7 	bl	800a7f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000626:	2002      	movs	r0, #2
 8000628:	f002 ff90 	bl	800354c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b4c      	ldr	r3, [pc, #304]	; (8000764 <SystemClock_Config+0x160>)
 8000632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000634:	4a4b      	ldr	r2, [pc, #300]	; (8000764 <SystemClock_Config+0x160>)
 8000636:	f023 0301 	bic.w	r3, r3, #1
 800063a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800063c:	4b49      	ldr	r3, [pc, #292]	; (8000764 <SystemClock_Config+0x160>)
 800063e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000640:	f003 0301 	and.w	r3, r3, #1
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	4b48      	ldr	r3, [pc, #288]	; (8000768 <SystemClock_Config+0x164>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	4a47      	ldr	r2, [pc, #284]	; (8000768 <SystemClock_Config+0x164>)
 800064c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000650:	6193      	str	r3, [r2, #24]
 8000652:	4b45      	ldr	r3, [pc, #276]	; (8000768 <SystemClock_Config+0x164>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800065e:	bf00      	nop
 8000660:	4b41      	ldr	r3, [pc, #260]	; (8000768 <SystemClock_Config+0x164>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800066c:	d1f8      	bne.n	8000660 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800066e:	4b3f      	ldr	r3, [pc, #252]	; (800076c <SystemClock_Config+0x168>)
 8000670:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000674:	4a3d      	ldr	r2, [pc, #244]	; (800076c <SystemClock_Config+0x168>)
 8000676:	f043 0302 	orr.w	r3, r3, #2
 800067a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800067e:	4b3b      	ldr	r3, [pc, #236]	; (800076c <SystemClock_Config+0x168>)
 8000680:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000684:	f003 0302 	and.w	r3, r3, #2
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800068c:	2300      	movs	r3, #0
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	4b35      	ldr	r3, [pc, #212]	; (8000768 <SystemClock_Config+0x164>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a34      	ldr	r2, [pc, #208]	; (8000768 <SystemClock_Config+0x164>)
 8000696:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b32      	ldr	r3, [pc, #200]	; (8000768 <SystemClock_Config+0x164>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	4b2f      	ldr	r3, [pc, #188]	; (8000764 <SystemClock_Config+0x160>)
 80006a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006aa:	4a2e      	ldr	r2, [pc, #184]	; (8000764 <SystemClock_Config+0x160>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006b2:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <SystemClock_Config+0x160>)
 80006b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006be:	bf00      	nop
 80006c0:	4b29      	ldr	r3, [pc, #164]	; (8000768 <SystemClock_Config+0x164>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006cc:	d1f8      	bne.n	80006c0 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80006ce:	4b27      	ldr	r3, [pc, #156]	; (800076c <SystemClock_Config+0x168>)
 80006d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006d2:	f023 0303 	bic.w	r3, r3, #3
 80006d6:	4a25      	ldr	r2, [pc, #148]	; (800076c <SystemClock_Config+0x168>)
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006de:	2301      	movs	r3, #1
 80006e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	2302      	movs	r3, #2
 80006ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ec:	2302      	movs	r3, #2
 80006ee:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 80006f0:	2305      	movs	r3, #5
 80006f2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006f4:	23c0      	movs	r3, #192	; 0xc0
 80006f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000700:	2302      	movs	r3, #2
 8000702:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000704:	2308      	movs	r3, #8
 8000706:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000708:	2300      	movs	r3, #0
 800070a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000714:	4618      	mov	r0, r3
 8000716:	f002 ff53 	bl	80035c0 <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000720:	f000 f984 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000724:	233f      	movs	r3, #63	; 0x3f
 8000726:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000728:	2303      	movs	r3, #3
 800072a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000730:	2308      	movs	r3, #8
 8000732:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000734:	2340      	movs	r3, #64	; 0x40
 8000736:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000738:	2340      	movs	r3, #64	; 0x40
 800073a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800073c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000742:	2340      	movs	r3, #64	; 0x40
 8000744:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	2104      	movs	r1, #4
 800074c:	4618      	mov	r0, r3
 800074e:	f003 fb65 	bl	8003e1c <HAL_RCC_ClockConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x158>
  {
    Error_Handler();
 8000758:	f000 f968 	bl	8000a2c <Error_Handler>
  }
}
 800075c:	bf00      	nop
 800075e:	3778      	adds	r7, #120	; 0x78
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	58000400 	.word	0x58000400
 8000768:	58024800 	.word	0x58024800
 800076c:	58024400 	.word	0x58024400

08000770 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_SDMMC1_SD_Init+0x38>)
 8000776:	4a0d      	ldr	r2, [pc, #52]	; (80007ac <MX_SDMMC1_SD_Init+0x3c>)
 8000778:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_SDMMC1_SD_Init+0x38>)
 800077c:	2200      	movs	r2, #0
 800077e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_SDMMC1_SD_Init+0x38>)
 8000782:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000786:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_SDMMC1_SD_Init+0x38>)
 800078a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800078e:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <MX_SDMMC1_SD_Init+0x38>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 8000796:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <MX_SDMMC1_SD_Init+0x38>)
 8000798:	2208      	movs	r2, #8
 800079a:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	2400002c 	.word	0x2400002c
 80007ac:	52007000 	.word	0x52007000

080007b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007b4:	4b24      	ldr	r3, [pc, #144]	; (8000848 <MX_SPI1_Init+0x98>)
 80007b6:	4a25      	ldr	r2, [pc, #148]	; (800084c <MX_SPI1_Init+0x9c>)
 80007b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80007ba:	4b23      	ldr	r3, [pc, #140]	; (8000848 <MX_SPI1_Init+0x98>)
 80007bc:	2200      	movs	r2, #0
 80007be:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007c0:	4b21      	ldr	r3, [pc, #132]	; (8000848 <MX_SPI1_Init+0x98>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80007c6:	4b20      	ldr	r3, [pc, #128]	; (8000848 <MX_SPI1_Init+0x98>)
 80007c8:	2203      	movs	r2, #3
 80007ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007cc:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_SPI1_Init+0x98>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d2:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_SPI1_Init+0x98>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_SPI1_Init+0x98>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_SPI1_Init+0x98>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e4:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_SPI1_Init+0x98>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_SPI1_Init+0x98>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80007f0:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_SPI1_Init+0x98>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_SPI1_Init+0x98>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_SPI1_Init+0x98>)
 80007fe:	2200      	movs	r2, #0
 8000800:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_SPI1_Init+0x98>)
 8000804:	2200      	movs	r2, #0
 8000806:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_SPI1_Init+0x98>)
 800080a:	2200      	movs	r2, #0
 800080c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_SPI1_Init+0x98>)
 8000810:	2200      	movs	r2, #0
 8000812:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_SPI1_Init+0x98>)
 8000816:	2200      	movs	r2, #0
 8000818:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_SPI1_Init+0x98>)
 800081c:	2200      	movs	r2, #0
 800081e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_SPI1_Init+0x98>)
 8000822:	2200      	movs	r2, #0
 8000824:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_SPI1_Init+0x98>)
 8000828:	2200      	movs	r2, #0
 800082a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_SPI1_Init+0x98>)
 800082e:	2200      	movs	r2, #0
 8000830:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_SPI1_Init+0x98>)
 8000834:	f007 fbb6 	bl	8007fa4 <HAL_SPI_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_SPI1_Init+0x92>
  {
    Error_Handler();
 800083e:	f000 f8f5 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	240000a8 	.word	0x240000a8
 800084c:	40013000 	.word	0x40013000

08000850 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000854:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <MX_USART1_UART_Init+0x90>)
 8000856:	4a23      	ldr	r2, [pc, #140]	; (80008e4 <MX_USART1_UART_Init+0x94>)
 8000858:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <MX_USART1_UART_Init+0x90>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <MX_USART1_UART_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_USART1_UART_Init+0x90>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <MX_USART1_UART_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_USART1_UART_Init+0x90>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <MX_USART1_UART_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_USART1_UART_Init+0x90>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_USART1_UART_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_USART1_UART_Init+0x90>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_USART1_UART_Init+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000898:	4811      	ldr	r0, [pc, #68]	; (80008e0 <MX_USART1_UART_Init+0x90>)
 800089a:	f007 ff52 	bl	8008742 <HAL_UART_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008a4:	f000 f8c2 	bl	8000a2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a8:	2100      	movs	r1, #0
 80008aa:	480d      	ldr	r0, [pc, #52]	; (80008e0 <MX_USART1_UART_Init+0x90>)
 80008ac:	f008 fef0 	bl	8009690 <HAL_UARTEx_SetTxFifoThreshold>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008b6:	f000 f8b9 	bl	8000a2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ba:	2100      	movs	r1, #0
 80008bc:	4808      	ldr	r0, [pc, #32]	; (80008e0 <MX_USART1_UART_Init+0x90>)
 80008be:	f008 ff25 	bl	800970c <HAL_UARTEx_SetRxFifoThreshold>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008c8:	f000 f8b0 	bl	8000a2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_USART1_UART_Init+0x90>)
 80008ce:	f008 fea6 	bl	800961e <HAL_UARTEx_DisableFifoMode>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008d8:	f000 f8a8 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	24000220 	.word	0x24000220
 80008e4:	40011000 	.word	0x40011000

080008e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_DMA_Init+0x4c>)
 80008f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008f4:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <MX_DMA_Init+0x4c>)
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <MX_DMA_Init+0x4c>)
 8000900:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2100      	movs	r1, #0
 8000910:	200b      	movs	r0, #11
 8000912:	f000 fd16 	bl	8001342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000916:	200b      	movs	r0, #11
 8000918:	f000 fd2d 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800091c:	2200      	movs	r2, #0
 800091e:	2100      	movs	r1, #0
 8000920:	200c      	movs	r0, #12
 8000922:	f000 fd0e 	bl	8001342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000926:	200c      	movs	r0, #12
 8000928:	f000 fd25 	bl	8001376 <HAL_NVIC_EnableIRQ>

}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	58024400 	.word	0x58024400

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094e:	4b34      	ldr	r3, [pc, #208]	; (8000a20 <MX_GPIO_Init+0xe8>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000954:	4a32      	ldr	r2, [pc, #200]	; (8000a20 <MX_GPIO_Init+0xe8>)
 8000956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800095a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800095e:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <MX_GPIO_Init+0xe8>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096c:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <MX_GPIO_Init+0xe8>)
 800096e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000972:	4a2b      	ldr	r2, [pc, #172]	; (8000a20 <MX_GPIO_Init+0xe8>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800097c:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <MX_GPIO_Init+0xe8>)
 800097e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098a:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <MX_GPIO_Init+0xe8>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000990:	4a23      	ldr	r2, [pc, #140]	; (8000a20 <MX_GPIO_Init+0xe8>)
 8000992:	f043 0304 	orr.w	r3, r3, #4
 8000996:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099a:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <MX_GPIO_Init+0xe8>)
 800099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a0:	f003 0304 	and.w	r3, r3, #4
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a8:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <MX_GPIO_Init+0xe8>)
 80009aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ae:	4a1c      	ldr	r2, [pc, #112]	; (8000a20 <MX_GPIO_Init+0xe8>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <MX_GPIO_Init+0xe8>)
 80009ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c6:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <MX_GPIO_Init+0xe8>)
 80009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009cc:	4a14      	ldr	r2, [pc, #80]	; (8000a20 <MX_GPIO_Init+0xe8>)
 80009ce:	f043 0308 	orr.w	r3, r3, #8
 80009d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_GPIO_Init+0xe8>)
 80009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009dc:	f003 0308 	and.w	r3, r3, #8
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009e4:	2310      	movs	r3, #16
 80009e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	480a      	ldr	r0, [pc, #40]	; (8000a24 <MX_GPIO_Init+0xec>)
 80009fa:	f002 fbdf 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009fe:	2304      	movs	r3, #4
 8000a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_GPIO_Init+0xf0>)
 8000a12:	f002 fbd3 	bl	80031bc <HAL_GPIO_Init>

}
 8000a16:	bf00      	nop
 8000a18:	3728      	adds	r7, #40	; 0x28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	58024400 	.word	0x58024400
 8000a24:	58020800 	.word	0x58020800
 8000a28:	58020400 	.word	0x58020400

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <Error_Handler+0x8>
	...

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <HAL_MspInit+0x30>)
 8000a40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a44:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_MspInit+0x30>)
 8000a46:	f043 0302 	orr.w	r3, r3, #2
 8000a4a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_MspInit+0x30>)
 8000a50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a54:	f003 0302 	and.w	r3, r3, #2
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	58024400 	.word	0x58024400

08000a6c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b0ba      	sub	sp, #232	; 0xe8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a84:	f107 0318 	add.w	r3, r7, #24
 8000a88:	22bc      	movs	r2, #188	; 0xbc
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f009 feb1 	bl	800a7f4 <memset>
  if(hsd->Instance==SDMMC1)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_SD_MspInit+0x108>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d166      	bne.n	8000b6a <HAL_SD_MspInit+0xfe>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000a9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aa0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa6:	f107 0318 	add.w	r3, r7, #24
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f003 fd42 	bl	8004534 <HAL_RCCEx_PeriphCLKConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8000ab6:	f7ff ffb9 	bl	8000a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000aba:	4b2f      	ldr	r3, [pc, #188]	; (8000b78 <HAL_SD_MspInit+0x10c>)
 8000abc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ac0:	4a2d      	ldr	r2, [pc, #180]	; (8000b78 <HAL_SD_MspInit+0x10c>)
 8000ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ac6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000aca:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <HAL_SD_MspInit+0x10c>)
 8000acc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad8:	4b27      	ldr	r3, [pc, #156]	; (8000b78 <HAL_SD_MspInit+0x10c>)
 8000ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ade:	4a26      	ldr	r2, [pc, #152]	; (8000b78 <HAL_SD_MspInit+0x10c>)
 8000ae0:	f043 0304 	orr.w	r3, r3, #4
 8000ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae8:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <HAL_SD_MspInit+0x10c>)
 8000aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aee:	f003 0304 	and.w	r3, r3, #4
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_SD_MspInit+0x10c>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	4a1e      	ldr	r2, [pc, #120]	; (8000b78 <HAL_SD_MspInit+0x10c>)
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b06:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <HAL_SD_MspInit+0x10c>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0c:	f003 0308 	and.w	r3, r3, #8
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000b14:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000b18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000b2e:	230c      	movs	r3, #12
 8000b30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b34:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4810      	ldr	r0, [pc, #64]	; (8000b7c <HAL_SD_MspInit+0x110>)
 8000b3c:	f002 fb3e 	bl	80031bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b40:	2304      	movs	r3, #4
 8000b42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000b58:	230c      	movs	r3, #12
 8000b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b5e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b62:	4619      	mov	r1, r3
 8000b64:	4806      	ldr	r0, [pc, #24]	; (8000b80 <HAL_SD_MspInit+0x114>)
 8000b66:	f002 fb29 	bl	80031bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000b6a:	bf00      	nop
 8000b6c:	37e8      	adds	r7, #232	; 0xe8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	52007000 	.word	0x52007000
 8000b78:	58024400 	.word	0x58024400
 8000b7c:	58020800 	.word	0x58020800
 8000b80:	58020c00 	.word	0x58020c00

08000b84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b0b8      	sub	sp, #224	; 0xe0
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	22bc      	movs	r2, #188	; 0xbc
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f009 fe25 	bl	800a7f4 <memset>
  if(hspi->Instance==SPI1)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a5f      	ldr	r2, [pc, #380]	; (8000d2c <HAL_SPI_MspInit+0x1a8>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	f040 80b7 	bne.w	8000d24 <HAL_SPI_MspInit+0x1a0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000bb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bba:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000bc0:	230c      	movs	r3, #12
 8000bc2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 1;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 10;
 8000bc8:	230a      	movs	r3, #10
 8000bca:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000bd0:	23c0      	movs	r3, #192	; 0xc0
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000bd4:	2320      	movs	r3, #32
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000be2:	f107 0310 	add.w	r3, r7, #16
 8000be6:	4618      	mov	r0, r3
 8000be8:	f003 fca4 	bl	8004534 <HAL_RCCEx_PeriphCLKConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <HAL_SPI_MspInit+0x72>
    {
      Error_Handler();
 8000bf2:	f7ff ff1b 	bl	8000a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bf6:	4b4e      	ldr	r3, [pc, #312]	; (8000d30 <HAL_SPI_MspInit+0x1ac>)
 8000bf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000bfc:	4a4c      	ldr	r2, [pc, #304]	; (8000d30 <HAL_SPI_MspInit+0x1ac>)
 8000bfe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c02:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000c06:	4b4a      	ldr	r3, [pc, #296]	; (8000d30 <HAL_SPI_MspInit+0x1ac>)
 8000c08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	4b46      	ldr	r3, [pc, #280]	; (8000d30 <HAL_SPI_MspInit+0x1ac>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1a:	4a45      	ldr	r2, [pc, #276]	; (8000d30 <HAL_SPI_MspInit+0x1ac>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c24:	4b42      	ldr	r3, [pc, #264]	; (8000d30 <HAL_SPI_MspInit+0x1ac>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c32:	23f0      	movs	r3, #240	; 0xf0
 8000c34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c4a:	2305      	movs	r3, #5
 8000c4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c54:	4619      	mov	r1, r3
 8000c56:	4837      	ldr	r0, [pc, #220]	; (8000d34 <HAL_SPI_MspInit+0x1b0>)
 8000c58:	f002 fab0 	bl	80031bc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8000c5c:	4b36      	ldr	r3, [pc, #216]	; (8000d38 <HAL_SPI_MspInit+0x1b4>)
 8000c5e:	4a37      	ldr	r2, [pc, #220]	; (8000d3c <HAL_SPI_MspInit+0x1b8>)
 8000c60:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8000c62:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <HAL_SPI_MspInit+0x1b4>)
 8000c64:	2226      	movs	r2, #38	; 0x26
 8000c66:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c68:	4b33      	ldr	r3, [pc, #204]	; (8000d38 <HAL_SPI_MspInit+0x1b4>)
 8000c6a:	2240      	movs	r2, #64	; 0x40
 8000c6c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6e:	4b32      	ldr	r3, [pc, #200]	; (8000d38 <HAL_SPI_MspInit+0x1b4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c74:	4b30      	ldr	r3, [pc, #192]	; (8000d38 <HAL_SPI_MspInit+0x1b4>)
 8000c76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c7a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c7c:	4b2e      	ldr	r3, [pc, #184]	; (8000d38 <HAL_SPI_MspInit+0x1b4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c82:	4b2d      	ldr	r3, [pc, #180]	; (8000d38 <HAL_SPI_MspInit+0x1b4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8000c88:	4b2b      	ldr	r3, [pc, #172]	; (8000d38 <HAL_SPI_MspInit+0x1b4>)
 8000c8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c8e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c90:	4b29      	ldr	r3, [pc, #164]	; (8000d38 <HAL_SPI_MspInit+0x1b4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c96:	4b28      	ldr	r3, [pc, #160]	; (8000d38 <HAL_SPI_MspInit+0x1b4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000c9c:	4826      	ldr	r0, [pc, #152]	; (8000d38 <HAL_SPI_MspInit+0x1b4>)
 8000c9e:	f000 fb85 	bl	80013ac <HAL_DMA_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8000ca8:	f7ff fec0 	bl	8000a2c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a22      	ldr	r2, [pc, #136]	; (8000d38 <HAL_SPI_MspInit+0x1b4>)
 8000cb0:	679a      	str	r2, [r3, #120]	; 0x78
 8000cb2:	4a21      	ldr	r2, [pc, #132]	; (8000d38 <HAL_SPI_MspInit+0x1b4>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream1;
 8000cb8:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <HAL_SPI_MspInit+0x1bc>)
 8000cba:	4a22      	ldr	r2, [pc, #136]	; (8000d44 <HAL_SPI_MspInit+0x1c0>)
 8000cbc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000cbe:	4b20      	ldr	r3, [pc, #128]	; (8000d40 <HAL_SPI_MspInit+0x1bc>)
 8000cc0:	2225      	movs	r2, #37	; 0x25
 8000cc2:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cc4:	4b1e      	ldr	r3, [pc, #120]	; (8000d40 <HAL_SPI_MspInit+0x1bc>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cca:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <HAL_SPI_MspInit+0x1bc>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <HAL_SPI_MspInit+0x1bc>)
 8000cd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cd6:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cd8:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <HAL_SPI_MspInit+0x1bc>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <HAL_SPI_MspInit+0x1bc>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000ce4:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <HAL_SPI_MspInit+0x1bc>)
 8000ce6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cea:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cec:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <HAL_SPI_MspInit+0x1bc>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cf2:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <HAL_SPI_MspInit+0x1bc>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000cf8:	4811      	ldr	r0, [pc, #68]	; (8000d40 <HAL_SPI_MspInit+0x1bc>)
 8000cfa:	f000 fb57 	bl	80013ac <HAL_DMA_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <HAL_SPI_MspInit+0x184>
    {
      Error_Handler();
 8000d04:	f7ff fe92 	bl	8000a2c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <HAL_SPI_MspInit+0x1bc>)
 8000d0c:	67da      	str	r2, [r3, #124]	; 0x7c
 8000d0e:	4a0c      	ldr	r2, [pc, #48]	; (8000d40 <HAL_SPI_MspInit+0x1bc>)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2100      	movs	r1, #0
 8000d18:	2023      	movs	r0, #35	; 0x23
 8000d1a:	f000 fb12 	bl	8001342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000d1e:	2023      	movs	r0, #35	; 0x23
 8000d20:	f000 fb29 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d24:	bf00      	nop
 8000d26:	37e0      	adds	r7, #224	; 0xe0
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40013000 	.word	0x40013000
 8000d30:	58024400 	.word	0x58024400
 8000d34:	58020000 	.word	0x58020000
 8000d38:	24000130 	.word	0x24000130
 8000d3c:	40020010 	.word	0x40020010
 8000d40:	240001a8 	.word	0x240001a8
 8000d44:	40020028 	.word	0x40020028

08000d48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b0b8      	sub	sp, #224	; 0xe0
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	22bc      	movs	r2, #188	; 0xbc
 8000d66:	2100      	movs	r1, #0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f009 fd43 	bl	800a7f4 <memset>
  if(huart->Instance==USART1)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a25      	ldr	r2, [pc, #148]	; (8000e08 <HAL_UART_MspInit+0xc0>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d142      	bne.n	8000dfe <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d82:	f107 0310 	add.w	r3, r7, #16
 8000d86:	4618      	mov	r0, r3
 8000d88:	f003 fbd4 	bl	8004534 <HAL_RCCEx_PeriphCLKConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d92:	f7ff fe4b 	bl	8000a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <HAL_UART_MspInit+0xc4>)
 8000d98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d9c:	4a1b      	ldr	r2, [pc, #108]	; (8000e0c <HAL_UART_MspInit+0xc4>)
 8000d9e:	f043 0310 	orr.w	r3, r3, #16
 8000da2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <HAL_UART_MspInit+0xc4>)
 8000da8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000dac:	f003 0310 	and.w	r3, r3, #16
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <HAL_UART_MspInit+0xc4>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <HAL_UART_MspInit+0xc4>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <HAL_UART_MspInit+0xc4>)
 8000dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dd2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000dd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dec:	2307      	movs	r3, #7
 8000dee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	; (8000e10 <HAL_UART_MspInit+0xc8>)
 8000dfa:	f002 f9df 	bl	80031bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dfe:	bf00      	nop
 8000e00:	37e0      	adds	r7, #224	; 0xe0
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40011000 	.word	0x40011000
 8000e0c:	58024400 	.word	0x58024400
 8000e10:	58020000 	.word	0x58020000

08000e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <NMI_Handler+0x4>

08000e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <HardFault_Handler+0x4>

08000e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <MemManage_Handler+0x4>

08000e26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <BusFault_Handler+0x4>

08000e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <UsageFault_Handler+0x4>

08000e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e60:	f000 f944 	bl	80010ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <DMA1_Stream0_IRQHandler+0x10>)
 8000e6e:	f001 f83f 	bl	8001ef0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	24000130 	.word	0x24000130

08000e7c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <DMA1_Stream1_IRQHandler+0x10>)
 8000e82:	f001 f835 	bl	8001ef0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	240001a8 	.word	0x240001a8

08000e90 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <SPI1_IRQHandler+0x10>)
 8000e96:	f007 f98b 	bl	80081b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	240000a8 	.word	0x240000a8

08000ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ea8:	4b37      	ldr	r3, [pc, #220]	; (8000f88 <SystemInit+0xe4>)
 8000eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eae:	4a36      	ldr	r2, [pc, #216]	; (8000f88 <SystemInit+0xe4>)
 8000eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000eb8:	4b34      	ldr	r3, [pc, #208]	; (8000f8c <SystemInit+0xe8>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 030f 	and.w	r3, r3, #15
 8000ec0:	2b06      	cmp	r3, #6
 8000ec2:	d807      	bhi.n	8000ed4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ec4:	4b31      	ldr	r3, [pc, #196]	; (8000f8c <SystemInit+0xe8>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f023 030f 	bic.w	r3, r3, #15
 8000ecc:	4a2f      	ldr	r2, [pc, #188]	; (8000f8c <SystemInit+0xe8>)
 8000ece:	f043 0307 	orr.w	r3, r3, #7
 8000ed2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ed4:	4b2e      	ldr	r3, [pc, #184]	; (8000f90 <SystemInit+0xec>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a2d      	ldr	r2, [pc, #180]	; (8000f90 <SystemInit+0xec>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ee0:	4b2b      	ldr	r3, [pc, #172]	; (8000f90 <SystemInit+0xec>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	; (8000f90 <SystemInit+0xec>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	4929      	ldr	r1, [pc, #164]	; (8000f90 <SystemInit+0xec>)
 8000eec:	4b29      	ldr	r3, [pc, #164]	; (8000f94 <SystemInit+0xf0>)
 8000eee:	4013      	ands	r3, r2
 8000ef0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ef2:	4b26      	ldr	r3, [pc, #152]	; (8000f8c <SystemInit+0xe8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0308 	and.w	r3, r3, #8
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d007      	beq.n	8000f0e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000efe:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <SystemInit+0xe8>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f023 030f 	bic.w	r3, r3, #15
 8000f06:	4a21      	ldr	r2, [pc, #132]	; (8000f8c <SystemInit+0xe8>)
 8000f08:	f043 0307 	orr.w	r3, r3, #7
 8000f0c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f0e:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <SystemInit+0xec>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f14:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <SystemInit+0xec>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f1a:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <SystemInit+0xec>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f20:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <SystemInit+0xec>)
 8000f22:	4a1d      	ldr	r2, [pc, #116]	; (8000f98 <SystemInit+0xf4>)
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f26:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <SystemInit+0xec>)
 8000f28:	4a1c      	ldr	r2, [pc, #112]	; (8000f9c <SystemInit+0xf8>)
 8000f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f2c:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <SystemInit+0xec>)
 8000f2e:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <SystemInit+0xfc>)
 8000f30:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f32:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <SystemInit+0xec>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f38:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <SystemInit+0xec>)
 8000f3a:	4a19      	ldr	r2, [pc, #100]	; (8000fa0 <SystemInit+0xfc>)
 8000f3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <SystemInit+0xec>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <SystemInit+0xec>)
 8000f46:	4a16      	ldr	r2, [pc, #88]	; (8000fa0 <SystemInit+0xfc>)
 8000f48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <SystemInit+0xec>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <SystemInit+0xec>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <SystemInit+0xec>)
 8000f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <SystemInit+0xec>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <SystemInit+0x100>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <SystemInit+0x104>)
 8000f68:	4013      	ands	r3, r2
 8000f6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f6e:	d202      	bcs.n	8000f76 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f70:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <SystemInit+0x108>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <SystemInit+0x10c>)
 8000f78:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f7c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00
 8000f8c:	52002000 	.word	0x52002000
 8000f90:	58024400 	.word	0x58024400
 8000f94:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f98:	02020200 	.word	0x02020200
 8000f9c:	01ff0000 	.word	0x01ff0000
 8000fa0:	01010280 	.word	0x01010280
 8000fa4:	5c001000 	.word	0x5c001000
 8000fa8:	ffff0000 	.word	0xffff0000
 8000fac:	51008108 	.word	0x51008108
 8000fb0:	52004000 	.word	0x52004000

08000fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fb8:	f7ff ff74 	bl	8000ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fbc:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fbe:	490d      	ldr	r1, [pc, #52]	; (8000ff4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd4:	4c0a      	ldr	r4, [pc, #40]	; (8001000 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f009 fbe3 	bl	800a7ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe6:	f7ff faf9 	bl	80005dc <main>
  bx  lr
 8000fea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ff0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ff4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000ff8:	0800a880 	.word	0x0800a880
  ldr r2, =_sbss
 8000ffc:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001000:	240002c8 	.word	0x240002c8

08001004 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC3_IRQHandler>
	...

08001008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100e:	2003      	movs	r0, #3
 8001010:	f000 f98c 	bl	800132c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001014:	f003 f8b8 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 8001018:	4602      	mov	r2, r0
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_Init+0x68>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	0a1b      	lsrs	r3, r3, #8
 8001020:	f003 030f 	and.w	r3, r3, #15
 8001024:	4913      	ldr	r1, [pc, #76]	; (8001074 <HAL_Init+0x6c>)
 8001026:	5ccb      	ldrb	r3, [r1, r3]
 8001028:	f003 031f 	and.w	r3, r3, #31
 800102c:	fa22 f303 	lsr.w	r3, r2, r3
 8001030:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <HAL_Init+0x68>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <HAL_Init+0x6c>)
 800103c:	5cd3      	ldrb	r3, [r2, r3]
 800103e:	f003 031f 	and.w	r3, r3, #31
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	fa22 f303 	lsr.w	r3, r2, r3
 8001048:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <HAL_Init+0x70>)
 800104a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800104c:	4a0b      	ldr	r2, [pc, #44]	; (800107c <HAL_Init+0x74>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001052:	200f      	movs	r0, #15
 8001054:	f000 f814 	bl	8001080 <HAL_InitTick>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e002      	b.n	8001068 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001062:	f7ff fce9 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	58024400 	.word	0x58024400
 8001074:	0800a81c 	.word	0x0800a81c
 8001078:	24000004 	.word	0x24000004
 800107c:	24000000 	.word	0x24000000

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_InitTick+0x60>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e021      	b.n	80010d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <HAL_InitTick+0x64>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_InitTick+0x60>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 f971 	bl	8001392 <HAL_SYSTICK_Config>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00e      	b.n	80010d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b0f      	cmp	r3, #15
 80010be:	d80a      	bhi.n	80010d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c0:	2200      	movs	r2, #0
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f000 f93b 	bl	8001342 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <HAL_InitTick+0x68>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e000      	b.n	80010d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2400000c 	.word	0x2400000c
 80010e4:	24000000 	.word	0x24000000
 80010e8:	24000008 	.word	0x24000008

080010ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_IncTick+0x20>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_IncTick+0x24>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	4a04      	ldr	r2, [pc, #16]	; (8001110 <HAL_IncTick+0x24>)
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	2400000c 	.word	0x2400000c
 8001110:	240002b0 	.word	0x240002b0

08001114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return uwTick;
 8001118:	4b03      	ldr	r3, [pc, #12]	; (8001128 <HAL_GetTick+0x14>)
 800111a:	681b      	ldr	r3, [r3, #0]
}
 800111c:	4618      	mov	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	240002b0 	.word	0x240002b0

0800112c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001134:	f7ff ffee 	bl	8001114 <HAL_GetTick>
 8001138:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001144:	d005      	beq.n	8001152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <HAL_Delay+0x44>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001152:	bf00      	nop
 8001154:	f7ff ffde 	bl	8001114 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	429a      	cmp	r2, r3
 8001162:	d8f7      	bhi.n	8001154 <HAL_Delay+0x28>
  {
  }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	2400000c 	.word	0x2400000c

08001174 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <HAL_GetREVID+0x14>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	0c1b      	lsrs	r3, r3, #16
}
 800117e:	4618      	mov	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	5c001000 	.word	0x5c001000

0800118c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <__NVIC_SetPriorityGrouping+0x40>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a8:	4013      	ands	r3, r2
 80011aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <__NVIC_SetPriorityGrouping+0x44>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ba:	4a04      	ldr	r2, [pc, #16]	; (80011cc <__NVIC_SetPriorityGrouping+0x40>)
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	60d3      	str	r3, [r2, #12]
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed00 	.word	0xe000ed00
 80011d0:	05fa0000 	.word	0x05fa0000

080011d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <__NVIC_GetPriorityGrouping+0x18>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	f003 0307 	and.w	r3, r3, #7
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	db0b      	blt.n	800121a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	f003 021f 	and.w	r2, r3, #31
 8001208:	4907      	ldr	r1, [pc, #28]	; (8001228 <__NVIC_EnableIRQ+0x38>)
 800120a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120e:	095b      	lsrs	r3, r3, #5
 8001210:	2001      	movs	r0, #1
 8001212:	fa00 f202 	lsl.w	r2, r0, r2
 8001216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000e100 	.word	0xe000e100

0800122c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001238:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800123c:	2b00      	cmp	r3, #0
 800123e:	db0a      	blt.n	8001256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	490c      	ldr	r1, [pc, #48]	; (8001278 <__NVIC_SetPriority+0x4c>)
 8001246:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800124a:	0112      	lsls	r2, r2, #4
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	440b      	add	r3, r1
 8001250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001254:	e00a      	b.n	800126c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4908      	ldr	r1, [pc, #32]	; (800127c <__NVIC_SetPriority+0x50>)
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	3b04      	subs	r3, #4
 8001264:	0112      	lsls	r2, r2, #4
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	440b      	add	r3, r1
 800126a:	761a      	strb	r2, [r3, #24]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000e100 	.word	0xe000e100
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	; 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f1c3 0307 	rsb	r3, r3, #7
 800129a:	2b04      	cmp	r3, #4
 800129c:	bf28      	it	cs
 800129e:	2304      	movcs	r3, #4
 80012a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3304      	adds	r3, #4
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d902      	bls.n	80012b0 <NVIC_EncodePriority+0x30>
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3b03      	subs	r3, #3
 80012ae:	e000      	b.n	80012b2 <NVIC_EncodePriority+0x32>
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	401a      	ands	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c8:	f04f 31ff 	mov.w	r1, #4294967295
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	4313      	orrs	r3, r2
         );
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3724      	adds	r7, #36	; 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f8:	d301      	bcc.n	80012fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00f      	b.n	800131e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <SysTick_Config+0x40>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001306:	210f      	movs	r1, #15
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f7ff ff8e 	bl	800122c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <SysTick_Config+0x40>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001316:	4b04      	ldr	r3, [pc, #16]	; (8001328 <SysTick_Config+0x40>)
 8001318:	2207      	movs	r2, #7
 800131a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	e000e010 	.word	0xe000e010

0800132c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff29 	bl	800118c <__NVIC_SetPriorityGrouping>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001350:	f7ff ff40 	bl	80011d4 <__NVIC_GetPriorityGrouping>
 8001354:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	6978      	ldr	r0, [r7, #20]
 800135c:	f7ff ff90 	bl	8001280 <NVIC_EncodePriority>
 8001360:	4602      	mov	r2, r0
 8001362:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff5f 	bl	800122c <__NVIC_SetPriority>
}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001380:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff33 	bl	80011f0 <__NVIC_EnableIRQ>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ffa4 	bl	80012e8 <SysTick_Config>
 80013a0:	4603      	mov	r3, r0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80013b4:	f7ff feae 	bl	8001114 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e316      	b.n	80019f2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a66      	ldr	r2, [pc, #408]	; (8001564 <HAL_DMA_Init+0x1b8>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d04a      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a65      	ldr	r2, [pc, #404]	; (8001568 <HAL_DMA_Init+0x1bc>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d045      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a63      	ldr	r2, [pc, #396]	; (800156c <HAL_DMA_Init+0x1c0>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d040      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a62      	ldr	r2, [pc, #392]	; (8001570 <HAL_DMA_Init+0x1c4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d03b      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a60      	ldr	r2, [pc, #384]	; (8001574 <HAL_DMA_Init+0x1c8>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d036      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a5f      	ldr	r2, [pc, #380]	; (8001578 <HAL_DMA_Init+0x1cc>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d031      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a5d      	ldr	r2, [pc, #372]	; (800157c <HAL_DMA_Init+0x1d0>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d02c      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a5c      	ldr	r2, [pc, #368]	; (8001580 <HAL_DMA_Init+0x1d4>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d027      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a5a      	ldr	r2, [pc, #360]	; (8001584 <HAL_DMA_Init+0x1d8>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d022      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a59      	ldr	r2, [pc, #356]	; (8001588 <HAL_DMA_Init+0x1dc>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d01d      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a57      	ldr	r2, [pc, #348]	; (800158c <HAL_DMA_Init+0x1e0>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d018      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a56      	ldr	r2, [pc, #344]	; (8001590 <HAL_DMA_Init+0x1e4>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d013      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a54      	ldr	r2, [pc, #336]	; (8001594 <HAL_DMA_Init+0x1e8>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d00e      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a53      	ldr	r2, [pc, #332]	; (8001598 <HAL_DMA_Init+0x1ec>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d009      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a51      	ldr	r2, [pc, #324]	; (800159c <HAL_DMA_Init+0x1f0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d004      	beq.n	8001464 <HAL_DMA_Init+0xb8>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a50      	ldr	r2, [pc, #320]	; (80015a0 <HAL_DMA_Init+0x1f4>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d101      	bne.n	8001468 <HAL_DMA_Init+0xbc>
 8001464:	2301      	movs	r3, #1
 8001466:	e000      	b.n	800146a <HAL_DMA_Init+0xbe>
 8001468:	2300      	movs	r3, #0
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 813b 	beq.w	80016e6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2202      	movs	r2, #2
 8001474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a37      	ldr	r2, [pc, #220]	; (8001564 <HAL_DMA_Init+0x1b8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d04a      	beq.n	8001520 <HAL_DMA_Init+0x174>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a36      	ldr	r2, [pc, #216]	; (8001568 <HAL_DMA_Init+0x1bc>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d045      	beq.n	8001520 <HAL_DMA_Init+0x174>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a34      	ldr	r2, [pc, #208]	; (800156c <HAL_DMA_Init+0x1c0>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d040      	beq.n	8001520 <HAL_DMA_Init+0x174>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a33      	ldr	r2, [pc, #204]	; (8001570 <HAL_DMA_Init+0x1c4>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d03b      	beq.n	8001520 <HAL_DMA_Init+0x174>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a31      	ldr	r2, [pc, #196]	; (8001574 <HAL_DMA_Init+0x1c8>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d036      	beq.n	8001520 <HAL_DMA_Init+0x174>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a30      	ldr	r2, [pc, #192]	; (8001578 <HAL_DMA_Init+0x1cc>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d031      	beq.n	8001520 <HAL_DMA_Init+0x174>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a2e      	ldr	r2, [pc, #184]	; (800157c <HAL_DMA_Init+0x1d0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d02c      	beq.n	8001520 <HAL_DMA_Init+0x174>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a2d      	ldr	r2, [pc, #180]	; (8001580 <HAL_DMA_Init+0x1d4>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d027      	beq.n	8001520 <HAL_DMA_Init+0x174>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a2b      	ldr	r2, [pc, #172]	; (8001584 <HAL_DMA_Init+0x1d8>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d022      	beq.n	8001520 <HAL_DMA_Init+0x174>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a2a      	ldr	r2, [pc, #168]	; (8001588 <HAL_DMA_Init+0x1dc>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d01d      	beq.n	8001520 <HAL_DMA_Init+0x174>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a28      	ldr	r2, [pc, #160]	; (800158c <HAL_DMA_Init+0x1e0>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d018      	beq.n	8001520 <HAL_DMA_Init+0x174>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a27      	ldr	r2, [pc, #156]	; (8001590 <HAL_DMA_Init+0x1e4>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d013      	beq.n	8001520 <HAL_DMA_Init+0x174>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a25      	ldr	r2, [pc, #148]	; (8001594 <HAL_DMA_Init+0x1e8>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00e      	beq.n	8001520 <HAL_DMA_Init+0x174>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a24      	ldr	r2, [pc, #144]	; (8001598 <HAL_DMA_Init+0x1ec>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d009      	beq.n	8001520 <HAL_DMA_Init+0x174>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a22      	ldr	r2, [pc, #136]	; (800159c <HAL_DMA_Init+0x1f0>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d004      	beq.n	8001520 <HAL_DMA_Init+0x174>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a21      	ldr	r2, [pc, #132]	; (80015a0 <HAL_DMA_Init+0x1f4>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d108      	bne.n	8001532 <HAL_DMA_Init+0x186>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 0201 	bic.w	r2, r2, #1
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	e007      	b.n	8001542 <HAL_DMA_Init+0x196>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0201 	bic.w	r2, r2, #1
 8001540:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001542:	e02f      	b.n	80015a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001544:	f7ff fde6 	bl	8001114 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b05      	cmp	r3, #5
 8001550:	d928      	bls.n	80015a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2220      	movs	r2, #32
 8001556:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2203      	movs	r2, #3
 800155c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e246      	b.n	80019f2 <HAL_DMA_Init+0x646>
 8001564:	40020010 	.word	0x40020010
 8001568:	40020028 	.word	0x40020028
 800156c:	40020040 	.word	0x40020040
 8001570:	40020058 	.word	0x40020058
 8001574:	40020070 	.word	0x40020070
 8001578:	40020088 	.word	0x40020088
 800157c:	400200a0 	.word	0x400200a0
 8001580:	400200b8 	.word	0x400200b8
 8001584:	40020410 	.word	0x40020410
 8001588:	40020428 	.word	0x40020428
 800158c:	40020440 	.word	0x40020440
 8001590:	40020458 	.word	0x40020458
 8001594:	40020470 	.word	0x40020470
 8001598:	40020488 	.word	0x40020488
 800159c:	400204a0 	.word	0x400204a0
 80015a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1c8      	bne.n	8001544 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	4b83      	ldr	r3, [pc, #524]	; (80017cc <HAL_DMA_Init+0x420>)
 80015be:	4013      	ands	r3, r2
 80015c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80015ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d107      	bne.n	8001608 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001600:	4313      	orrs	r3, r2
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	4313      	orrs	r3, r2
 8001606:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001608:	4b71      	ldr	r3, [pc, #452]	; (80017d0 <HAL_DMA_Init+0x424>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b71      	ldr	r3, [pc, #452]	; (80017d4 <HAL_DMA_Init+0x428>)
 800160e:	4013      	ands	r3, r2
 8001610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001614:	d328      	bcc.n	8001668 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b28      	cmp	r3, #40	; 0x28
 800161c:	d903      	bls.n	8001626 <HAL_DMA_Init+0x27a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b2e      	cmp	r3, #46	; 0x2e
 8001624:	d917      	bls.n	8001656 <HAL_DMA_Init+0x2aa>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b3e      	cmp	r3, #62	; 0x3e
 800162c:	d903      	bls.n	8001636 <HAL_DMA_Init+0x28a>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b42      	cmp	r3, #66	; 0x42
 8001634:	d90f      	bls.n	8001656 <HAL_DMA_Init+0x2aa>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b46      	cmp	r3, #70	; 0x46
 800163c:	d903      	bls.n	8001646 <HAL_DMA_Init+0x29a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b48      	cmp	r3, #72	; 0x48
 8001644:	d907      	bls.n	8001656 <HAL_DMA_Init+0x2aa>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b4e      	cmp	r3, #78	; 0x4e
 800164c:	d905      	bls.n	800165a <HAL_DMA_Init+0x2ae>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b52      	cmp	r3, #82	; 0x52
 8001654:	d801      	bhi.n	800165a <HAL_DMA_Init+0x2ae>
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <HAL_DMA_Init+0x2b0>
 800165a:	2300      	movs	r3, #0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001666:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f023 0307 	bic.w	r3, r3, #7
 800167e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	4313      	orrs	r3, r2
 8001688:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	2b04      	cmp	r3, #4
 8001690:	d117      	bne.n	80016c2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4313      	orrs	r3, r2
 800169a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00e      	beq.n	80016c2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f001 fbff 	bl	8002ea8 <DMA_CheckFifoParam>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d008      	beq.n	80016c2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2240      	movs	r2, #64	; 0x40
 80016b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e197      	b.n	80019f2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f001 fb3a 	bl	8002d44 <DMA_CalcBaseAndBitshift>
 80016d0:	4603      	mov	r3, r0
 80016d2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d8:	f003 031f 	and.w	r3, r3, #31
 80016dc:	223f      	movs	r2, #63	; 0x3f
 80016de:	409a      	lsls	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	e0cd      	b.n	8001882 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a3b      	ldr	r2, [pc, #236]	; (80017d8 <HAL_DMA_Init+0x42c>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d022      	beq.n	8001736 <HAL_DMA_Init+0x38a>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a39      	ldr	r2, [pc, #228]	; (80017dc <HAL_DMA_Init+0x430>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d01d      	beq.n	8001736 <HAL_DMA_Init+0x38a>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a38      	ldr	r2, [pc, #224]	; (80017e0 <HAL_DMA_Init+0x434>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d018      	beq.n	8001736 <HAL_DMA_Init+0x38a>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a36      	ldr	r2, [pc, #216]	; (80017e4 <HAL_DMA_Init+0x438>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d013      	beq.n	8001736 <HAL_DMA_Init+0x38a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a35      	ldr	r2, [pc, #212]	; (80017e8 <HAL_DMA_Init+0x43c>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d00e      	beq.n	8001736 <HAL_DMA_Init+0x38a>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a33      	ldr	r2, [pc, #204]	; (80017ec <HAL_DMA_Init+0x440>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d009      	beq.n	8001736 <HAL_DMA_Init+0x38a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a32      	ldr	r2, [pc, #200]	; (80017f0 <HAL_DMA_Init+0x444>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d004      	beq.n	8001736 <HAL_DMA_Init+0x38a>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a30      	ldr	r2, [pc, #192]	; (80017f4 <HAL_DMA_Init+0x448>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d101      	bne.n	800173a <HAL_DMA_Init+0x38e>
 8001736:	2301      	movs	r3, #1
 8001738:	e000      	b.n	800173c <HAL_DMA_Init+0x390>
 800173a:	2300      	movs	r3, #0
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 8097 	beq.w	8001870 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a24      	ldr	r2, [pc, #144]	; (80017d8 <HAL_DMA_Init+0x42c>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d021      	beq.n	8001790 <HAL_DMA_Init+0x3e4>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a22      	ldr	r2, [pc, #136]	; (80017dc <HAL_DMA_Init+0x430>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d01c      	beq.n	8001790 <HAL_DMA_Init+0x3e4>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a21      	ldr	r2, [pc, #132]	; (80017e0 <HAL_DMA_Init+0x434>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d017      	beq.n	8001790 <HAL_DMA_Init+0x3e4>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a1f      	ldr	r2, [pc, #124]	; (80017e4 <HAL_DMA_Init+0x438>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d012      	beq.n	8001790 <HAL_DMA_Init+0x3e4>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a1e      	ldr	r2, [pc, #120]	; (80017e8 <HAL_DMA_Init+0x43c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d00d      	beq.n	8001790 <HAL_DMA_Init+0x3e4>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a1c      	ldr	r2, [pc, #112]	; (80017ec <HAL_DMA_Init+0x440>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d008      	beq.n	8001790 <HAL_DMA_Init+0x3e4>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a1b      	ldr	r2, [pc, #108]	; (80017f0 <HAL_DMA_Init+0x444>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d003      	beq.n	8001790 <HAL_DMA_Init+0x3e4>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a19      	ldr	r2, [pc, #100]	; (80017f4 <HAL_DMA_Init+0x448>)
 800178e:	4293      	cmp	r3, r2
 8001790:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2202      	movs	r2, #2
 8001796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_DMA_Init+0x44c>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b40      	cmp	r3, #64	; 0x40
 80017b8:	d020      	beq.n	80017fc <HAL_DMA_Init+0x450>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b80      	cmp	r3, #128	; 0x80
 80017c0:	d102      	bne.n	80017c8 <HAL_DMA_Init+0x41c>
 80017c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017c6:	e01a      	b.n	80017fe <HAL_DMA_Init+0x452>
 80017c8:	2300      	movs	r3, #0
 80017ca:	e018      	b.n	80017fe <HAL_DMA_Init+0x452>
 80017cc:	fe10803f 	.word	0xfe10803f
 80017d0:	5c001000 	.word	0x5c001000
 80017d4:	ffff0000 	.word	0xffff0000
 80017d8:	58025408 	.word	0x58025408
 80017dc:	5802541c 	.word	0x5802541c
 80017e0:	58025430 	.word	0x58025430
 80017e4:	58025444 	.word	0x58025444
 80017e8:	58025458 	.word	0x58025458
 80017ec:	5802546c 	.word	0x5802546c
 80017f0:	58025480 	.word	0x58025480
 80017f4:	58025494 	.word	0x58025494
 80017f8:	fffe000f 	.word	0xfffe000f
 80017fc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	68d2      	ldr	r2, [r2, #12]
 8001802:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001804:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800180c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001814:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800181c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001824:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800182c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	4313      	orrs	r3, r2
 8001832:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b6e      	ldr	r3, [pc, #440]	; (80019fc <HAL_DMA_Init+0x650>)
 8001844:	4413      	add	r3, r2
 8001846:	4a6e      	ldr	r2, [pc, #440]	; (8001a00 <HAL_DMA_Init+0x654>)
 8001848:	fba2 2303 	umull	r2, r3, r2, r3
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	009a      	lsls	r2, r3, #2
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f001 fa75 	bl	8002d44 <DMA_CalcBaseAndBitshift>
 800185a:	4603      	mov	r3, r0
 800185c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	2201      	movs	r2, #1
 8001868:	409a      	lsls	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	e008      	b.n	8001882 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2240      	movs	r2, #64	; 0x40
 8001874:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2203      	movs	r2, #3
 800187a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e0b7      	b.n	80019f2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a5f      	ldr	r2, [pc, #380]	; (8001a04 <HAL_DMA_Init+0x658>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d072      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a5d      	ldr	r2, [pc, #372]	; (8001a08 <HAL_DMA_Init+0x65c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d06d      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a5c      	ldr	r2, [pc, #368]	; (8001a0c <HAL_DMA_Init+0x660>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d068      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a5a      	ldr	r2, [pc, #360]	; (8001a10 <HAL_DMA_Init+0x664>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d063      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a59      	ldr	r2, [pc, #356]	; (8001a14 <HAL_DMA_Init+0x668>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d05e      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a57      	ldr	r2, [pc, #348]	; (8001a18 <HAL_DMA_Init+0x66c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d059      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a56      	ldr	r2, [pc, #344]	; (8001a1c <HAL_DMA_Init+0x670>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d054      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a54      	ldr	r2, [pc, #336]	; (8001a20 <HAL_DMA_Init+0x674>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d04f      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a53      	ldr	r2, [pc, #332]	; (8001a24 <HAL_DMA_Init+0x678>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d04a      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a51      	ldr	r2, [pc, #324]	; (8001a28 <HAL_DMA_Init+0x67c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d045      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a50      	ldr	r2, [pc, #320]	; (8001a2c <HAL_DMA_Init+0x680>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d040      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a4e      	ldr	r2, [pc, #312]	; (8001a30 <HAL_DMA_Init+0x684>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d03b      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a4d      	ldr	r2, [pc, #308]	; (8001a34 <HAL_DMA_Init+0x688>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d036      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a4b      	ldr	r2, [pc, #300]	; (8001a38 <HAL_DMA_Init+0x68c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d031      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a4a      	ldr	r2, [pc, #296]	; (8001a3c <HAL_DMA_Init+0x690>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d02c      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a48      	ldr	r2, [pc, #288]	; (8001a40 <HAL_DMA_Init+0x694>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d027      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a47      	ldr	r2, [pc, #284]	; (8001a44 <HAL_DMA_Init+0x698>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d022      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a45      	ldr	r2, [pc, #276]	; (8001a48 <HAL_DMA_Init+0x69c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d01d      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a44      	ldr	r2, [pc, #272]	; (8001a4c <HAL_DMA_Init+0x6a0>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d018      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a42      	ldr	r2, [pc, #264]	; (8001a50 <HAL_DMA_Init+0x6a4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d013      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a41      	ldr	r2, [pc, #260]	; (8001a54 <HAL_DMA_Init+0x6a8>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d00e      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a3f      	ldr	r2, [pc, #252]	; (8001a58 <HAL_DMA_Init+0x6ac>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d009      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a3e      	ldr	r2, [pc, #248]	; (8001a5c <HAL_DMA_Init+0x6b0>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d004      	beq.n	8001972 <HAL_DMA_Init+0x5c6>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a3c      	ldr	r2, [pc, #240]	; (8001a60 <HAL_DMA_Init+0x6b4>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d101      	bne.n	8001976 <HAL_DMA_Init+0x5ca>
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <HAL_DMA_Init+0x5cc>
 8001976:	2300      	movs	r3, #0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d032      	beq.n	80019e2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f001 fb0f 	bl	8002fa0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b80      	cmp	r3, #128	; 0x80
 8001988:	d102      	bne.n	8001990 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80019a4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d010      	beq.n	80019d0 <HAL_DMA_Init+0x624>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d80c      	bhi.n	80019d0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f001 fb8c 	bl	80030d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	e008      	b.n	80019e2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	a7fdabf8 	.word	0xa7fdabf8
 8001a00:	cccccccd 	.word	0xcccccccd
 8001a04:	40020010 	.word	0x40020010
 8001a08:	40020028 	.word	0x40020028
 8001a0c:	40020040 	.word	0x40020040
 8001a10:	40020058 	.word	0x40020058
 8001a14:	40020070 	.word	0x40020070
 8001a18:	40020088 	.word	0x40020088
 8001a1c:	400200a0 	.word	0x400200a0
 8001a20:	400200b8 	.word	0x400200b8
 8001a24:	40020410 	.word	0x40020410
 8001a28:	40020428 	.word	0x40020428
 8001a2c:	40020440 	.word	0x40020440
 8001a30:	40020458 	.word	0x40020458
 8001a34:	40020470 	.word	0x40020470
 8001a38:	40020488 	.word	0x40020488
 8001a3c:	400204a0 	.word	0x400204a0
 8001a40:	400204b8 	.word	0x400204b8
 8001a44:	58025408 	.word	0x58025408
 8001a48:	5802541c 	.word	0x5802541c
 8001a4c:	58025430 	.word	0x58025430
 8001a50:	58025444 	.word	0x58025444
 8001a54:	58025458 	.word	0x58025458
 8001a58:	5802546c 	.word	0x5802546c
 8001a5c:	58025480 	.word	0x58025480
 8001a60:	58025494 	.word	0x58025494

08001a64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e237      	b.n	8001ee6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d004      	beq.n	8001a8c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2280      	movs	r2, #128	; 0x80
 8001a86:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e22c      	b.n	8001ee6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a5c      	ldr	r2, [pc, #368]	; (8001c04 <HAL_DMA_Abort_IT+0x1a0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d04a      	beq.n	8001b2c <HAL_DMA_Abort_IT+0xc8>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a5b      	ldr	r2, [pc, #364]	; (8001c08 <HAL_DMA_Abort_IT+0x1a4>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d045      	beq.n	8001b2c <HAL_DMA_Abort_IT+0xc8>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a59      	ldr	r2, [pc, #356]	; (8001c0c <HAL_DMA_Abort_IT+0x1a8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d040      	beq.n	8001b2c <HAL_DMA_Abort_IT+0xc8>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a58      	ldr	r2, [pc, #352]	; (8001c10 <HAL_DMA_Abort_IT+0x1ac>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d03b      	beq.n	8001b2c <HAL_DMA_Abort_IT+0xc8>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a56      	ldr	r2, [pc, #344]	; (8001c14 <HAL_DMA_Abort_IT+0x1b0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d036      	beq.n	8001b2c <HAL_DMA_Abort_IT+0xc8>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a55      	ldr	r2, [pc, #340]	; (8001c18 <HAL_DMA_Abort_IT+0x1b4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d031      	beq.n	8001b2c <HAL_DMA_Abort_IT+0xc8>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a53      	ldr	r2, [pc, #332]	; (8001c1c <HAL_DMA_Abort_IT+0x1b8>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d02c      	beq.n	8001b2c <HAL_DMA_Abort_IT+0xc8>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a52      	ldr	r2, [pc, #328]	; (8001c20 <HAL_DMA_Abort_IT+0x1bc>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d027      	beq.n	8001b2c <HAL_DMA_Abort_IT+0xc8>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a50      	ldr	r2, [pc, #320]	; (8001c24 <HAL_DMA_Abort_IT+0x1c0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d022      	beq.n	8001b2c <HAL_DMA_Abort_IT+0xc8>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a4f      	ldr	r2, [pc, #316]	; (8001c28 <HAL_DMA_Abort_IT+0x1c4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d01d      	beq.n	8001b2c <HAL_DMA_Abort_IT+0xc8>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a4d      	ldr	r2, [pc, #308]	; (8001c2c <HAL_DMA_Abort_IT+0x1c8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d018      	beq.n	8001b2c <HAL_DMA_Abort_IT+0xc8>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a4c      	ldr	r2, [pc, #304]	; (8001c30 <HAL_DMA_Abort_IT+0x1cc>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d013      	beq.n	8001b2c <HAL_DMA_Abort_IT+0xc8>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a4a      	ldr	r2, [pc, #296]	; (8001c34 <HAL_DMA_Abort_IT+0x1d0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d00e      	beq.n	8001b2c <HAL_DMA_Abort_IT+0xc8>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a49      	ldr	r2, [pc, #292]	; (8001c38 <HAL_DMA_Abort_IT+0x1d4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d009      	beq.n	8001b2c <HAL_DMA_Abort_IT+0xc8>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a47      	ldr	r2, [pc, #284]	; (8001c3c <HAL_DMA_Abort_IT+0x1d8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d004      	beq.n	8001b2c <HAL_DMA_Abort_IT+0xc8>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a46      	ldr	r2, [pc, #280]	; (8001c40 <HAL_DMA_Abort_IT+0x1dc>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d101      	bne.n	8001b30 <HAL_DMA_Abort_IT+0xcc>
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e000      	b.n	8001b32 <HAL_DMA_Abort_IT+0xce>
 8001b30:	2300      	movs	r3, #0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 8086 	beq.w	8001c44 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2204      	movs	r2, #4
 8001b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a2f      	ldr	r2, [pc, #188]	; (8001c04 <HAL_DMA_Abort_IT+0x1a0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d04a      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x17c>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a2e      	ldr	r2, [pc, #184]	; (8001c08 <HAL_DMA_Abort_IT+0x1a4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d045      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x17c>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a2c      	ldr	r2, [pc, #176]	; (8001c0c <HAL_DMA_Abort_IT+0x1a8>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d040      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x17c>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a2b      	ldr	r2, [pc, #172]	; (8001c10 <HAL_DMA_Abort_IT+0x1ac>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d03b      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x17c>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a29      	ldr	r2, [pc, #164]	; (8001c14 <HAL_DMA_Abort_IT+0x1b0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d036      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x17c>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a28      	ldr	r2, [pc, #160]	; (8001c18 <HAL_DMA_Abort_IT+0x1b4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d031      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x17c>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a26      	ldr	r2, [pc, #152]	; (8001c1c <HAL_DMA_Abort_IT+0x1b8>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d02c      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x17c>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a25      	ldr	r2, [pc, #148]	; (8001c20 <HAL_DMA_Abort_IT+0x1bc>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d027      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x17c>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a23      	ldr	r2, [pc, #140]	; (8001c24 <HAL_DMA_Abort_IT+0x1c0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d022      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x17c>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a22      	ldr	r2, [pc, #136]	; (8001c28 <HAL_DMA_Abort_IT+0x1c4>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d01d      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x17c>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a20      	ldr	r2, [pc, #128]	; (8001c2c <HAL_DMA_Abort_IT+0x1c8>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d018      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x17c>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a1f      	ldr	r2, [pc, #124]	; (8001c30 <HAL_DMA_Abort_IT+0x1cc>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d013      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x17c>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a1d      	ldr	r2, [pc, #116]	; (8001c34 <HAL_DMA_Abort_IT+0x1d0>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d00e      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x17c>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a1c      	ldr	r2, [pc, #112]	; (8001c38 <HAL_DMA_Abort_IT+0x1d4>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d009      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x17c>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a1a      	ldr	r2, [pc, #104]	; (8001c3c <HAL_DMA_Abort_IT+0x1d8>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d004      	beq.n	8001be0 <HAL_DMA_Abort_IT+0x17c>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a19      	ldr	r2, [pc, #100]	; (8001c40 <HAL_DMA_Abort_IT+0x1dc>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d108      	bne.n	8001bf2 <HAL_DMA_Abort_IT+0x18e>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0201 	bic.w	r2, r2, #1
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	e178      	b.n	8001ee4 <HAL_DMA_Abort_IT+0x480>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0201 	bic.w	r2, r2, #1
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	e16f      	b.n	8001ee4 <HAL_DMA_Abort_IT+0x480>
 8001c04:	40020010 	.word	0x40020010
 8001c08:	40020028 	.word	0x40020028
 8001c0c:	40020040 	.word	0x40020040
 8001c10:	40020058 	.word	0x40020058
 8001c14:	40020070 	.word	0x40020070
 8001c18:	40020088 	.word	0x40020088
 8001c1c:	400200a0 	.word	0x400200a0
 8001c20:	400200b8 	.word	0x400200b8
 8001c24:	40020410 	.word	0x40020410
 8001c28:	40020428 	.word	0x40020428
 8001c2c:	40020440 	.word	0x40020440
 8001c30:	40020458 	.word	0x40020458
 8001c34:	40020470 	.word	0x40020470
 8001c38:	40020488 	.word	0x40020488
 8001c3c:	400204a0 	.word	0x400204a0
 8001c40:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 020e 	bic.w	r2, r2, #14
 8001c52:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a6c      	ldr	r2, [pc, #432]	; (8001e0c <HAL_DMA_Abort_IT+0x3a8>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d04a      	beq.n	8001cf4 <HAL_DMA_Abort_IT+0x290>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a6b      	ldr	r2, [pc, #428]	; (8001e10 <HAL_DMA_Abort_IT+0x3ac>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d045      	beq.n	8001cf4 <HAL_DMA_Abort_IT+0x290>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a69      	ldr	r2, [pc, #420]	; (8001e14 <HAL_DMA_Abort_IT+0x3b0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d040      	beq.n	8001cf4 <HAL_DMA_Abort_IT+0x290>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a68      	ldr	r2, [pc, #416]	; (8001e18 <HAL_DMA_Abort_IT+0x3b4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d03b      	beq.n	8001cf4 <HAL_DMA_Abort_IT+0x290>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a66      	ldr	r2, [pc, #408]	; (8001e1c <HAL_DMA_Abort_IT+0x3b8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d036      	beq.n	8001cf4 <HAL_DMA_Abort_IT+0x290>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a65      	ldr	r2, [pc, #404]	; (8001e20 <HAL_DMA_Abort_IT+0x3bc>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d031      	beq.n	8001cf4 <HAL_DMA_Abort_IT+0x290>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a63      	ldr	r2, [pc, #396]	; (8001e24 <HAL_DMA_Abort_IT+0x3c0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d02c      	beq.n	8001cf4 <HAL_DMA_Abort_IT+0x290>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a62      	ldr	r2, [pc, #392]	; (8001e28 <HAL_DMA_Abort_IT+0x3c4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d027      	beq.n	8001cf4 <HAL_DMA_Abort_IT+0x290>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a60      	ldr	r2, [pc, #384]	; (8001e2c <HAL_DMA_Abort_IT+0x3c8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d022      	beq.n	8001cf4 <HAL_DMA_Abort_IT+0x290>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a5f      	ldr	r2, [pc, #380]	; (8001e30 <HAL_DMA_Abort_IT+0x3cc>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d01d      	beq.n	8001cf4 <HAL_DMA_Abort_IT+0x290>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a5d      	ldr	r2, [pc, #372]	; (8001e34 <HAL_DMA_Abort_IT+0x3d0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d018      	beq.n	8001cf4 <HAL_DMA_Abort_IT+0x290>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a5c      	ldr	r2, [pc, #368]	; (8001e38 <HAL_DMA_Abort_IT+0x3d4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d013      	beq.n	8001cf4 <HAL_DMA_Abort_IT+0x290>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a5a      	ldr	r2, [pc, #360]	; (8001e3c <HAL_DMA_Abort_IT+0x3d8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d00e      	beq.n	8001cf4 <HAL_DMA_Abort_IT+0x290>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a59      	ldr	r2, [pc, #356]	; (8001e40 <HAL_DMA_Abort_IT+0x3dc>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d009      	beq.n	8001cf4 <HAL_DMA_Abort_IT+0x290>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a57      	ldr	r2, [pc, #348]	; (8001e44 <HAL_DMA_Abort_IT+0x3e0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d004      	beq.n	8001cf4 <HAL_DMA_Abort_IT+0x290>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a56      	ldr	r2, [pc, #344]	; (8001e48 <HAL_DMA_Abort_IT+0x3e4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d108      	bne.n	8001d06 <HAL_DMA_Abort_IT+0x2a2>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0201 	bic.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	e007      	b.n	8001d16 <HAL_DMA_Abort_IT+0x2b2>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0201 	bic.w	r2, r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a3c      	ldr	r2, [pc, #240]	; (8001e0c <HAL_DMA_Abort_IT+0x3a8>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d072      	beq.n	8001e06 <HAL_DMA_Abort_IT+0x3a2>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a3a      	ldr	r2, [pc, #232]	; (8001e10 <HAL_DMA_Abort_IT+0x3ac>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d06d      	beq.n	8001e06 <HAL_DMA_Abort_IT+0x3a2>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a39      	ldr	r2, [pc, #228]	; (8001e14 <HAL_DMA_Abort_IT+0x3b0>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d068      	beq.n	8001e06 <HAL_DMA_Abort_IT+0x3a2>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a37      	ldr	r2, [pc, #220]	; (8001e18 <HAL_DMA_Abort_IT+0x3b4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d063      	beq.n	8001e06 <HAL_DMA_Abort_IT+0x3a2>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a36      	ldr	r2, [pc, #216]	; (8001e1c <HAL_DMA_Abort_IT+0x3b8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d05e      	beq.n	8001e06 <HAL_DMA_Abort_IT+0x3a2>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a34      	ldr	r2, [pc, #208]	; (8001e20 <HAL_DMA_Abort_IT+0x3bc>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d059      	beq.n	8001e06 <HAL_DMA_Abort_IT+0x3a2>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a33      	ldr	r2, [pc, #204]	; (8001e24 <HAL_DMA_Abort_IT+0x3c0>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d054      	beq.n	8001e06 <HAL_DMA_Abort_IT+0x3a2>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a31      	ldr	r2, [pc, #196]	; (8001e28 <HAL_DMA_Abort_IT+0x3c4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d04f      	beq.n	8001e06 <HAL_DMA_Abort_IT+0x3a2>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a30      	ldr	r2, [pc, #192]	; (8001e2c <HAL_DMA_Abort_IT+0x3c8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d04a      	beq.n	8001e06 <HAL_DMA_Abort_IT+0x3a2>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a2e      	ldr	r2, [pc, #184]	; (8001e30 <HAL_DMA_Abort_IT+0x3cc>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d045      	beq.n	8001e06 <HAL_DMA_Abort_IT+0x3a2>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a2d      	ldr	r2, [pc, #180]	; (8001e34 <HAL_DMA_Abort_IT+0x3d0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d040      	beq.n	8001e06 <HAL_DMA_Abort_IT+0x3a2>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a2b      	ldr	r2, [pc, #172]	; (8001e38 <HAL_DMA_Abort_IT+0x3d4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d03b      	beq.n	8001e06 <HAL_DMA_Abort_IT+0x3a2>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a2a      	ldr	r2, [pc, #168]	; (8001e3c <HAL_DMA_Abort_IT+0x3d8>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d036      	beq.n	8001e06 <HAL_DMA_Abort_IT+0x3a2>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a28      	ldr	r2, [pc, #160]	; (8001e40 <HAL_DMA_Abort_IT+0x3dc>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d031      	beq.n	8001e06 <HAL_DMA_Abort_IT+0x3a2>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a27      	ldr	r2, [pc, #156]	; (8001e44 <HAL_DMA_Abort_IT+0x3e0>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d02c      	beq.n	8001e06 <HAL_DMA_Abort_IT+0x3a2>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a25      	ldr	r2, [pc, #148]	; (8001e48 <HAL_DMA_Abort_IT+0x3e4>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d027      	beq.n	8001e06 <HAL_DMA_Abort_IT+0x3a2>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a24      	ldr	r2, [pc, #144]	; (8001e4c <HAL_DMA_Abort_IT+0x3e8>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d022      	beq.n	8001e06 <HAL_DMA_Abort_IT+0x3a2>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a22      	ldr	r2, [pc, #136]	; (8001e50 <HAL_DMA_Abort_IT+0x3ec>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d01d      	beq.n	8001e06 <HAL_DMA_Abort_IT+0x3a2>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a21      	ldr	r2, [pc, #132]	; (8001e54 <HAL_DMA_Abort_IT+0x3f0>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d018      	beq.n	8001e06 <HAL_DMA_Abort_IT+0x3a2>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a1f      	ldr	r2, [pc, #124]	; (8001e58 <HAL_DMA_Abort_IT+0x3f4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d013      	beq.n	8001e06 <HAL_DMA_Abort_IT+0x3a2>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a1e      	ldr	r2, [pc, #120]	; (8001e5c <HAL_DMA_Abort_IT+0x3f8>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d00e      	beq.n	8001e06 <HAL_DMA_Abort_IT+0x3a2>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a1c      	ldr	r2, [pc, #112]	; (8001e60 <HAL_DMA_Abort_IT+0x3fc>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d009      	beq.n	8001e06 <HAL_DMA_Abort_IT+0x3a2>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a1b      	ldr	r2, [pc, #108]	; (8001e64 <HAL_DMA_Abort_IT+0x400>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d004      	beq.n	8001e06 <HAL_DMA_Abort_IT+0x3a2>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a19      	ldr	r2, [pc, #100]	; (8001e68 <HAL_DMA_Abort_IT+0x404>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d132      	bne.n	8001e6c <HAL_DMA_Abort_IT+0x408>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e031      	b.n	8001e6e <HAL_DMA_Abort_IT+0x40a>
 8001e0a:	bf00      	nop
 8001e0c:	40020010 	.word	0x40020010
 8001e10:	40020028 	.word	0x40020028
 8001e14:	40020040 	.word	0x40020040
 8001e18:	40020058 	.word	0x40020058
 8001e1c:	40020070 	.word	0x40020070
 8001e20:	40020088 	.word	0x40020088
 8001e24:	400200a0 	.word	0x400200a0
 8001e28:	400200b8 	.word	0x400200b8
 8001e2c:	40020410 	.word	0x40020410
 8001e30:	40020428 	.word	0x40020428
 8001e34:	40020440 	.word	0x40020440
 8001e38:	40020458 	.word	0x40020458
 8001e3c:	40020470 	.word	0x40020470
 8001e40:	40020488 	.word	0x40020488
 8001e44:	400204a0 	.word	0x400204a0
 8001e48:	400204b8 	.word	0x400204b8
 8001e4c:	58025408 	.word	0x58025408
 8001e50:	5802541c 	.word	0x5802541c
 8001e54:	58025430 	.word	0x58025430
 8001e58:	58025444 	.word	0x58025444
 8001e5c:	58025458 	.word	0x58025458
 8001e60:	5802546c 	.word	0x5802546c
 8001e64:	58025480 	.word	0x58025480
 8001e68:	58025494 	.word	0x58025494
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d028      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e80:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e86:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8c:	f003 031f 	and.w	r3, r3, #31
 8001e90:	2201      	movs	r2, #1
 8001e92:	409a      	lsls	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001ea0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00c      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eb8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001ec2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop

08001ef0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001efc:	4b67      	ldr	r3, [pc, #412]	; (800209c <HAL_DMA_IRQHandler+0x1ac>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a67      	ldr	r2, [pc, #412]	; (80020a0 <HAL_DMA_IRQHandler+0x1b0>)
 8001f02:	fba2 2303 	umull	r2, r3, r2, r3
 8001f06:	0a9b      	lsrs	r3, r3, #10
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f14:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a5f      	ldr	r2, [pc, #380]	; (80020a4 <HAL_DMA_IRQHandler+0x1b4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d04a      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0xd2>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a5d      	ldr	r2, [pc, #372]	; (80020a8 <HAL_DMA_IRQHandler+0x1b8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d045      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0xd2>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a5c      	ldr	r2, [pc, #368]	; (80020ac <HAL_DMA_IRQHandler+0x1bc>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d040      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0xd2>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a5a      	ldr	r2, [pc, #360]	; (80020b0 <HAL_DMA_IRQHandler+0x1c0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d03b      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0xd2>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a59      	ldr	r2, [pc, #356]	; (80020b4 <HAL_DMA_IRQHandler+0x1c4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d036      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0xd2>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a57      	ldr	r2, [pc, #348]	; (80020b8 <HAL_DMA_IRQHandler+0x1c8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d031      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0xd2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a56      	ldr	r2, [pc, #344]	; (80020bc <HAL_DMA_IRQHandler+0x1cc>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d02c      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0xd2>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a54      	ldr	r2, [pc, #336]	; (80020c0 <HAL_DMA_IRQHandler+0x1d0>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d027      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0xd2>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a53      	ldr	r2, [pc, #332]	; (80020c4 <HAL_DMA_IRQHandler+0x1d4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d022      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0xd2>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a51      	ldr	r2, [pc, #324]	; (80020c8 <HAL_DMA_IRQHandler+0x1d8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d01d      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0xd2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a50      	ldr	r2, [pc, #320]	; (80020cc <HAL_DMA_IRQHandler+0x1dc>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d018      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0xd2>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a4e      	ldr	r2, [pc, #312]	; (80020d0 <HAL_DMA_IRQHandler+0x1e0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d013      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0xd2>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a4d      	ldr	r2, [pc, #308]	; (80020d4 <HAL_DMA_IRQHandler+0x1e4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d00e      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0xd2>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a4b      	ldr	r2, [pc, #300]	; (80020d8 <HAL_DMA_IRQHandler+0x1e8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d009      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0xd2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a4a      	ldr	r2, [pc, #296]	; (80020dc <HAL_DMA_IRQHandler+0x1ec>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d004      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0xd2>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a48      	ldr	r2, [pc, #288]	; (80020e0 <HAL_DMA_IRQHandler+0x1f0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d101      	bne.n	8001fc6 <HAL_DMA_IRQHandler+0xd6>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <HAL_DMA_IRQHandler+0xd8>
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 842b 	beq.w	8002824 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd2:	f003 031f 	and.w	r3, r3, #31
 8001fd6:	2208      	movs	r2, #8
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 80a2 	beq.w	8002128 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a2e      	ldr	r2, [pc, #184]	; (80020a4 <HAL_DMA_IRQHandler+0x1b4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d04a      	beq.n	8002084 <HAL_DMA_IRQHandler+0x194>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a2d      	ldr	r2, [pc, #180]	; (80020a8 <HAL_DMA_IRQHandler+0x1b8>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d045      	beq.n	8002084 <HAL_DMA_IRQHandler+0x194>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a2b      	ldr	r2, [pc, #172]	; (80020ac <HAL_DMA_IRQHandler+0x1bc>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d040      	beq.n	8002084 <HAL_DMA_IRQHandler+0x194>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a2a      	ldr	r2, [pc, #168]	; (80020b0 <HAL_DMA_IRQHandler+0x1c0>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d03b      	beq.n	8002084 <HAL_DMA_IRQHandler+0x194>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a28      	ldr	r2, [pc, #160]	; (80020b4 <HAL_DMA_IRQHandler+0x1c4>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d036      	beq.n	8002084 <HAL_DMA_IRQHandler+0x194>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a27      	ldr	r2, [pc, #156]	; (80020b8 <HAL_DMA_IRQHandler+0x1c8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d031      	beq.n	8002084 <HAL_DMA_IRQHandler+0x194>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a25      	ldr	r2, [pc, #148]	; (80020bc <HAL_DMA_IRQHandler+0x1cc>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d02c      	beq.n	8002084 <HAL_DMA_IRQHandler+0x194>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a24      	ldr	r2, [pc, #144]	; (80020c0 <HAL_DMA_IRQHandler+0x1d0>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d027      	beq.n	8002084 <HAL_DMA_IRQHandler+0x194>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a22      	ldr	r2, [pc, #136]	; (80020c4 <HAL_DMA_IRQHandler+0x1d4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d022      	beq.n	8002084 <HAL_DMA_IRQHandler+0x194>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a21      	ldr	r2, [pc, #132]	; (80020c8 <HAL_DMA_IRQHandler+0x1d8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d01d      	beq.n	8002084 <HAL_DMA_IRQHandler+0x194>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a1f      	ldr	r2, [pc, #124]	; (80020cc <HAL_DMA_IRQHandler+0x1dc>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d018      	beq.n	8002084 <HAL_DMA_IRQHandler+0x194>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a1e      	ldr	r2, [pc, #120]	; (80020d0 <HAL_DMA_IRQHandler+0x1e0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d013      	beq.n	8002084 <HAL_DMA_IRQHandler+0x194>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a1c      	ldr	r2, [pc, #112]	; (80020d4 <HAL_DMA_IRQHandler+0x1e4>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00e      	beq.n	8002084 <HAL_DMA_IRQHandler+0x194>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a1b      	ldr	r2, [pc, #108]	; (80020d8 <HAL_DMA_IRQHandler+0x1e8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d009      	beq.n	8002084 <HAL_DMA_IRQHandler+0x194>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a19      	ldr	r2, [pc, #100]	; (80020dc <HAL_DMA_IRQHandler+0x1ec>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d004      	beq.n	8002084 <HAL_DMA_IRQHandler+0x194>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a18      	ldr	r2, [pc, #96]	; (80020e0 <HAL_DMA_IRQHandler+0x1f0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d12f      	bne.n	80020e4 <HAL_DMA_IRQHandler+0x1f4>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	2b00      	cmp	r3, #0
 8002090:	bf14      	ite	ne
 8002092:	2301      	movne	r3, #1
 8002094:	2300      	moveq	r3, #0
 8002096:	b2db      	uxtb	r3, r3
 8002098:	e02e      	b.n	80020f8 <HAL_DMA_IRQHandler+0x208>
 800209a:	bf00      	nop
 800209c:	24000000 	.word	0x24000000
 80020a0:	1b4e81b5 	.word	0x1b4e81b5
 80020a4:	40020010 	.word	0x40020010
 80020a8:	40020028 	.word	0x40020028
 80020ac:	40020040 	.word	0x40020040
 80020b0:	40020058 	.word	0x40020058
 80020b4:	40020070 	.word	0x40020070
 80020b8:	40020088 	.word	0x40020088
 80020bc:	400200a0 	.word	0x400200a0
 80020c0:	400200b8 	.word	0x400200b8
 80020c4:	40020410 	.word	0x40020410
 80020c8:	40020428 	.word	0x40020428
 80020cc:	40020440 	.word	0x40020440
 80020d0:	40020458 	.word	0x40020458
 80020d4:	40020470 	.word	0x40020470
 80020d8:	40020488 	.word	0x40020488
 80020dc:	400204a0 	.word	0x400204a0
 80020e0:	400204b8 	.word	0x400204b8
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	bf14      	ite	ne
 80020f2:	2301      	movne	r3, #1
 80020f4:	2300      	moveq	r3, #0
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d015      	beq.n	8002128 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0204 	bic.w	r2, r2, #4
 800210a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	2208      	movs	r2, #8
 8002116:	409a      	lsls	r2, r3
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002120:	f043 0201 	orr.w	r2, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212c:	f003 031f 	and.w	r3, r3, #31
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	fa22 f303 	lsr.w	r3, r2, r3
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d06e      	beq.n	800221c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a69      	ldr	r2, [pc, #420]	; (80022e8 <HAL_DMA_IRQHandler+0x3f8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d04a      	beq.n	80021de <HAL_DMA_IRQHandler+0x2ee>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a67      	ldr	r2, [pc, #412]	; (80022ec <HAL_DMA_IRQHandler+0x3fc>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d045      	beq.n	80021de <HAL_DMA_IRQHandler+0x2ee>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a66      	ldr	r2, [pc, #408]	; (80022f0 <HAL_DMA_IRQHandler+0x400>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d040      	beq.n	80021de <HAL_DMA_IRQHandler+0x2ee>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a64      	ldr	r2, [pc, #400]	; (80022f4 <HAL_DMA_IRQHandler+0x404>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d03b      	beq.n	80021de <HAL_DMA_IRQHandler+0x2ee>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a63      	ldr	r2, [pc, #396]	; (80022f8 <HAL_DMA_IRQHandler+0x408>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d036      	beq.n	80021de <HAL_DMA_IRQHandler+0x2ee>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a61      	ldr	r2, [pc, #388]	; (80022fc <HAL_DMA_IRQHandler+0x40c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d031      	beq.n	80021de <HAL_DMA_IRQHandler+0x2ee>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a60      	ldr	r2, [pc, #384]	; (8002300 <HAL_DMA_IRQHandler+0x410>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d02c      	beq.n	80021de <HAL_DMA_IRQHandler+0x2ee>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a5e      	ldr	r2, [pc, #376]	; (8002304 <HAL_DMA_IRQHandler+0x414>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d027      	beq.n	80021de <HAL_DMA_IRQHandler+0x2ee>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a5d      	ldr	r2, [pc, #372]	; (8002308 <HAL_DMA_IRQHandler+0x418>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d022      	beq.n	80021de <HAL_DMA_IRQHandler+0x2ee>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a5b      	ldr	r2, [pc, #364]	; (800230c <HAL_DMA_IRQHandler+0x41c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d01d      	beq.n	80021de <HAL_DMA_IRQHandler+0x2ee>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a5a      	ldr	r2, [pc, #360]	; (8002310 <HAL_DMA_IRQHandler+0x420>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d018      	beq.n	80021de <HAL_DMA_IRQHandler+0x2ee>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a58      	ldr	r2, [pc, #352]	; (8002314 <HAL_DMA_IRQHandler+0x424>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d013      	beq.n	80021de <HAL_DMA_IRQHandler+0x2ee>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a57      	ldr	r2, [pc, #348]	; (8002318 <HAL_DMA_IRQHandler+0x428>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d00e      	beq.n	80021de <HAL_DMA_IRQHandler+0x2ee>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a55      	ldr	r2, [pc, #340]	; (800231c <HAL_DMA_IRQHandler+0x42c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d009      	beq.n	80021de <HAL_DMA_IRQHandler+0x2ee>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a54      	ldr	r2, [pc, #336]	; (8002320 <HAL_DMA_IRQHandler+0x430>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d004      	beq.n	80021de <HAL_DMA_IRQHandler+0x2ee>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a52      	ldr	r2, [pc, #328]	; (8002324 <HAL_DMA_IRQHandler+0x434>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d10a      	bne.n	80021f4 <HAL_DMA_IRQHandler+0x304>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	bf14      	ite	ne
 80021ec:	2301      	movne	r3, #1
 80021ee:	2300      	moveq	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	e003      	b.n	80021fc <HAL_DMA_IRQHandler+0x30c>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2300      	movs	r3, #0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00d      	beq.n	800221c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002204:	f003 031f 	and.w	r3, r3, #31
 8002208:	2201      	movs	r2, #1
 800220a:	409a      	lsls	r2, r3
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002214:	f043 0202 	orr.w	r2, r3, #2
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002220:	f003 031f 	and.w	r3, r3, #31
 8002224:	2204      	movs	r2, #4
 8002226:	409a      	lsls	r2, r3
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 808f 	beq.w	8002350 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a2c      	ldr	r2, [pc, #176]	; (80022e8 <HAL_DMA_IRQHandler+0x3f8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d04a      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x3e2>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a2a      	ldr	r2, [pc, #168]	; (80022ec <HAL_DMA_IRQHandler+0x3fc>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d045      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x3e2>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a29      	ldr	r2, [pc, #164]	; (80022f0 <HAL_DMA_IRQHandler+0x400>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d040      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x3e2>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a27      	ldr	r2, [pc, #156]	; (80022f4 <HAL_DMA_IRQHandler+0x404>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d03b      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x3e2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a26      	ldr	r2, [pc, #152]	; (80022f8 <HAL_DMA_IRQHandler+0x408>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d036      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x3e2>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a24      	ldr	r2, [pc, #144]	; (80022fc <HAL_DMA_IRQHandler+0x40c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d031      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x3e2>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a23      	ldr	r2, [pc, #140]	; (8002300 <HAL_DMA_IRQHandler+0x410>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d02c      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x3e2>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a21      	ldr	r2, [pc, #132]	; (8002304 <HAL_DMA_IRQHandler+0x414>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d027      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x3e2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a20      	ldr	r2, [pc, #128]	; (8002308 <HAL_DMA_IRQHandler+0x418>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d022      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x3e2>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a1e      	ldr	r2, [pc, #120]	; (800230c <HAL_DMA_IRQHandler+0x41c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d01d      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x3e2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a1d      	ldr	r2, [pc, #116]	; (8002310 <HAL_DMA_IRQHandler+0x420>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d018      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x3e2>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a1b      	ldr	r2, [pc, #108]	; (8002314 <HAL_DMA_IRQHandler+0x424>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d013      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x3e2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a1a      	ldr	r2, [pc, #104]	; (8002318 <HAL_DMA_IRQHandler+0x428>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d00e      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x3e2>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a18      	ldr	r2, [pc, #96]	; (800231c <HAL_DMA_IRQHandler+0x42c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d009      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x3e2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a17      	ldr	r2, [pc, #92]	; (8002320 <HAL_DMA_IRQHandler+0x430>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d004      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x3e2>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a15      	ldr	r2, [pc, #84]	; (8002324 <HAL_DMA_IRQHandler+0x434>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d12a      	bne.n	8002328 <HAL_DMA_IRQHandler+0x438>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bf14      	ite	ne
 80022e0:	2301      	movne	r3, #1
 80022e2:	2300      	moveq	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	e023      	b.n	8002330 <HAL_DMA_IRQHandler+0x440>
 80022e8:	40020010 	.word	0x40020010
 80022ec:	40020028 	.word	0x40020028
 80022f0:	40020040 	.word	0x40020040
 80022f4:	40020058 	.word	0x40020058
 80022f8:	40020070 	.word	0x40020070
 80022fc:	40020088 	.word	0x40020088
 8002300:	400200a0 	.word	0x400200a0
 8002304:	400200b8 	.word	0x400200b8
 8002308:	40020410 	.word	0x40020410
 800230c:	40020428 	.word	0x40020428
 8002310:	40020440 	.word	0x40020440
 8002314:	40020458 	.word	0x40020458
 8002318:	40020470 	.word	0x40020470
 800231c:	40020488 	.word	0x40020488
 8002320:	400204a0 	.word	0x400204a0
 8002324:	400204b8 	.word	0x400204b8
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2300      	movs	r3, #0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00d      	beq.n	8002350 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	2204      	movs	r2, #4
 800233e:	409a      	lsls	r2, r3
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002348:	f043 0204 	orr.w	r2, r3, #4
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002354:	f003 031f 	and.w	r3, r3, #31
 8002358:	2210      	movs	r2, #16
 800235a:	409a      	lsls	r2, r3
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 80a6 	beq.w	80024b2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a85      	ldr	r2, [pc, #532]	; (8002580 <HAL_DMA_IRQHandler+0x690>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d04a      	beq.n	8002406 <HAL_DMA_IRQHandler+0x516>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a83      	ldr	r2, [pc, #524]	; (8002584 <HAL_DMA_IRQHandler+0x694>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d045      	beq.n	8002406 <HAL_DMA_IRQHandler+0x516>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a82      	ldr	r2, [pc, #520]	; (8002588 <HAL_DMA_IRQHandler+0x698>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d040      	beq.n	8002406 <HAL_DMA_IRQHandler+0x516>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a80      	ldr	r2, [pc, #512]	; (800258c <HAL_DMA_IRQHandler+0x69c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d03b      	beq.n	8002406 <HAL_DMA_IRQHandler+0x516>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a7f      	ldr	r2, [pc, #508]	; (8002590 <HAL_DMA_IRQHandler+0x6a0>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d036      	beq.n	8002406 <HAL_DMA_IRQHandler+0x516>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a7d      	ldr	r2, [pc, #500]	; (8002594 <HAL_DMA_IRQHandler+0x6a4>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d031      	beq.n	8002406 <HAL_DMA_IRQHandler+0x516>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a7c      	ldr	r2, [pc, #496]	; (8002598 <HAL_DMA_IRQHandler+0x6a8>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d02c      	beq.n	8002406 <HAL_DMA_IRQHandler+0x516>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a7a      	ldr	r2, [pc, #488]	; (800259c <HAL_DMA_IRQHandler+0x6ac>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d027      	beq.n	8002406 <HAL_DMA_IRQHandler+0x516>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a79      	ldr	r2, [pc, #484]	; (80025a0 <HAL_DMA_IRQHandler+0x6b0>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d022      	beq.n	8002406 <HAL_DMA_IRQHandler+0x516>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a77      	ldr	r2, [pc, #476]	; (80025a4 <HAL_DMA_IRQHandler+0x6b4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d01d      	beq.n	8002406 <HAL_DMA_IRQHandler+0x516>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a76      	ldr	r2, [pc, #472]	; (80025a8 <HAL_DMA_IRQHandler+0x6b8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d018      	beq.n	8002406 <HAL_DMA_IRQHandler+0x516>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a74      	ldr	r2, [pc, #464]	; (80025ac <HAL_DMA_IRQHandler+0x6bc>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d013      	beq.n	8002406 <HAL_DMA_IRQHandler+0x516>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a73      	ldr	r2, [pc, #460]	; (80025b0 <HAL_DMA_IRQHandler+0x6c0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d00e      	beq.n	8002406 <HAL_DMA_IRQHandler+0x516>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a71      	ldr	r2, [pc, #452]	; (80025b4 <HAL_DMA_IRQHandler+0x6c4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d009      	beq.n	8002406 <HAL_DMA_IRQHandler+0x516>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a70      	ldr	r2, [pc, #448]	; (80025b8 <HAL_DMA_IRQHandler+0x6c8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d004      	beq.n	8002406 <HAL_DMA_IRQHandler+0x516>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a6e      	ldr	r2, [pc, #440]	; (80025bc <HAL_DMA_IRQHandler+0x6cc>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d10a      	bne.n	800241c <HAL_DMA_IRQHandler+0x52c>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	bf14      	ite	ne
 8002414:	2301      	movne	r3, #1
 8002416:	2300      	moveq	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	e009      	b.n	8002430 <HAL_DMA_IRQHandler+0x540>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	2b00      	cmp	r3, #0
 8002428:	bf14      	ite	ne
 800242a:	2301      	movne	r3, #1
 800242c:	2300      	moveq	r3, #0
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d03e      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	2210      	movs	r2, #16
 800243e:	409a      	lsls	r2, r3
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d018      	beq.n	8002484 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d108      	bne.n	8002472 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	2b00      	cmp	r3, #0
 8002466:	d024      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	4798      	blx	r3
 8002470:	e01f      	b.n	80024b2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002476:	2b00      	cmp	r3, #0
 8002478:	d01b      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	4798      	blx	r3
 8002482:	e016      	b.n	80024b2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248e:	2b00      	cmp	r3, #0
 8002490:	d107      	bne.n	80024a2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 0208 	bic.w	r2, r2, #8
 80024a0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b6:	f003 031f 	and.w	r3, r3, #31
 80024ba:	2220      	movs	r2, #32
 80024bc:	409a      	lsls	r2, r3
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 8110 	beq.w	80026e8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a2c      	ldr	r2, [pc, #176]	; (8002580 <HAL_DMA_IRQHandler+0x690>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d04a      	beq.n	8002568 <HAL_DMA_IRQHandler+0x678>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a2b      	ldr	r2, [pc, #172]	; (8002584 <HAL_DMA_IRQHandler+0x694>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d045      	beq.n	8002568 <HAL_DMA_IRQHandler+0x678>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a29      	ldr	r2, [pc, #164]	; (8002588 <HAL_DMA_IRQHandler+0x698>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d040      	beq.n	8002568 <HAL_DMA_IRQHandler+0x678>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a28      	ldr	r2, [pc, #160]	; (800258c <HAL_DMA_IRQHandler+0x69c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d03b      	beq.n	8002568 <HAL_DMA_IRQHandler+0x678>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a26      	ldr	r2, [pc, #152]	; (8002590 <HAL_DMA_IRQHandler+0x6a0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d036      	beq.n	8002568 <HAL_DMA_IRQHandler+0x678>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a25      	ldr	r2, [pc, #148]	; (8002594 <HAL_DMA_IRQHandler+0x6a4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d031      	beq.n	8002568 <HAL_DMA_IRQHandler+0x678>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a23      	ldr	r2, [pc, #140]	; (8002598 <HAL_DMA_IRQHandler+0x6a8>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d02c      	beq.n	8002568 <HAL_DMA_IRQHandler+0x678>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a22      	ldr	r2, [pc, #136]	; (800259c <HAL_DMA_IRQHandler+0x6ac>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d027      	beq.n	8002568 <HAL_DMA_IRQHandler+0x678>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a20      	ldr	r2, [pc, #128]	; (80025a0 <HAL_DMA_IRQHandler+0x6b0>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d022      	beq.n	8002568 <HAL_DMA_IRQHandler+0x678>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a1f      	ldr	r2, [pc, #124]	; (80025a4 <HAL_DMA_IRQHandler+0x6b4>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d01d      	beq.n	8002568 <HAL_DMA_IRQHandler+0x678>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a1d      	ldr	r2, [pc, #116]	; (80025a8 <HAL_DMA_IRQHandler+0x6b8>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d018      	beq.n	8002568 <HAL_DMA_IRQHandler+0x678>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a1c      	ldr	r2, [pc, #112]	; (80025ac <HAL_DMA_IRQHandler+0x6bc>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d013      	beq.n	8002568 <HAL_DMA_IRQHandler+0x678>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a1a      	ldr	r2, [pc, #104]	; (80025b0 <HAL_DMA_IRQHandler+0x6c0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00e      	beq.n	8002568 <HAL_DMA_IRQHandler+0x678>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a19      	ldr	r2, [pc, #100]	; (80025b4 <HAL_DMA_IRQHandler+0x6c4>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d009      	beq.n	8002568 <HAL_DMA_IRQHandler+0x678>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a17      	ldr	r2, [pc, #92]	; (80025b8 <HAL_DMA_IRQHandler+0x6c8>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d004      	beq.n	8002568 <HAL_DMA_IRQHandler+0x678>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a16      	ldr	r2, [pc, #88]	; (80025bc <HAL_DMA_IRQHandler+0x6cc>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d12b      	bne.n	80025c0 <HAL_DMA_IRQHandler+0x6d0>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0310 	and.w	r3, r3, #16
 8002572:	2b00      	cmp	r3, #0
 8002574:	bf14      	ite	ne
 8002576:	2301      	movne	r3, #1
 8002578:	2300      	moveq	r3, #0
 800257a:	b2db      	uxtb	r3, r3
 800257c:	e02a      	b.n	80025d4 <HAL_DMA_IRQHandler+0x6e4>
 800257e:	bf00      	nop
 8002580:	40020010 	.word	0x40020010
 8002584:	40020028 	.word	0x40020028
 8002588:	40020040 	.word	0x40020040
 800258c:	40020058 	.word	0x40020058
 8002590:	40020070 	.word	0x40020070
 8002594:	40020088 	.word	0x40020088
 8002598:	400200a0 	.word	0x400200a0
 800259c:	400200b8 	.word	0x400200b8
 80025a0:	40020410 	.word	0x40020410
 80025a4:	40020428 	.word	0x40020428
 80025a8:	40020440 	.word	0x40020440
 80025ac:	40020458 	.word	0x40020458
 80025b0:	40020470 	.word	0x40020470
 80025b4:	40020488 	.word	0x40020488
 80025b8:	400204a0 	.word	0x400204a0
 80025bc:	400204b8 	.word	0x400204b8
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	bf14      	ite	ne
 80025ce:	2301      	movne	r3, #1
 80025d0:	2300      	moveq	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 8087 	beq.w	80026e8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025de:	f003 031f 	and.w	r3, r3, #31
 80025e2:	2220      	movs	r2, #32
 80025e4:	409a      	lsls	r2, r3
 80025e6:	6a3b      	ldr	r3, [r7, #32]
 80025e8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d139      	bne.n	800266a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0216 	bic.w	r2, r2, #22
 8002604:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695a      	ldr	r2, [r3, #20]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002614:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	2b00      	cmp	r3, #0
 800261c:	d103      	bne.n	8002626 <HAL_DMA_IRQHandler+0x736>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002622:	2b00      	cmp	r3, #0
 8002624:	d007      	beq.n	8002636 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0208 	bic.w	r2, r2, #8
 8002634:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263a:	f003 031f 	and.w	r3, r3, #31
 800263e:	223f      	movs	r2, #63	; 0x3f
 8002640:	409a      	lsls	r2, r3
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 834a 	beq.w	8002cf4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	4798      	blx	r3
          }
          return;
 8002668:	e344      	b.n	8002cf4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d018      	beq.n	80026aa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d108      	bne.n	8002698 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	2b00      	cmp	r3, #0
 800268c:	d02c      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	4798      	blx	r3
 8002696:	e027      	b.n	80026e8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269c:	2b00      	cmp	r3, #0
 800269e:	d023      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	4798      	blx	r3
 80026a8:	e01e      	b.n	80026e8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10f      	bne.n	80026d8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0210 	bic.w	r2, r2, #16
 80026c6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 8306 	beq.w	8002cfe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 8088 	beq.w	8002810 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2204      	movs	r2, #4
 8002704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a7a      	ldr	r2, [pc, #488]	; (80028f8 <HAL_DMA_IRQHandler+0xa08>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d04a      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x8b8>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a79      	ldr	r2, [pc, #484]	; (80028fc <HAL_DMA_IRQHandler+0xa0c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d045      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x8b8>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a77      	ldr	r2, [pc, #476]	; (8002900 <HAL_DMA_IRQHandler+0xa10>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d040      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x8b8>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a76      	ldr	r2, [pc, #472]	; (8002904 <HAL_DMA_IRQHandler+0xa14>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d03b      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x8b8>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a74      	ldr	r2, [pc, #464]	; (8002908 <HAL_DMA_IRQHandler+0xa18>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d036      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x8b8>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a73      	ldr	r2, [pc, #460]	; (800290c <HAL_DMA_IRQHandler+0xa1c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d031      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x8b8>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a71      	ldr	r2, [pc, #452]	; (8002910 <HAL_DMA_IRQHandler+0xa20>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d02c      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x8b8>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a70      	ldr	r2, [pc, #448]	; (8002914 <HAL_DMA_IRQHandler+0xa24>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d027      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x8b8>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a6e      	ldr	r2, [pc, #440]	; (8002918 <HAL_DMA_IRQHandler+0xa28>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d022      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x8b8>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a6d      	ldr	r2, [pc, #436]	; (800291c <HAL_DMA_IRQHandler+0xa2c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d01d      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x8b8>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a6b      	ldr	r2, [pc, #428]	; (8002920 <HAL_DMA_IRQHandler+0xa30>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d018      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x8b8>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a6a      	ldr	r2, [pc, #424]	; (8002924 <HAL_DMA_IRQHandler+0xa34>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d013      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x8b8>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a68      	ldr	r2, [pc, #416]	; (8002928 <HAL_DMA_IRQHandler+0xa38>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d00e      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x8b8>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a67      	ldr	r2, [pc, #412]	; (800292c <HAL_DMA_IRQHandler+0xa3c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d009      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x8b8>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a65      	ldr	r2, [pc, #404]	; (8002930 <HAL_DMA_IRQHandler+0xa40>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d004      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x8b8>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a64      	ldr	r2, [pc, #400]	; (8002934 <HAL_DMA_IRQHandler+0xa44>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d108      	bne.n	80027ba <HAL_DMA_IRQHandler+0x8ca>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0201 	bic.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	e007      	b.n	80027ca <HAL_DMA_IRQHandler+0x8da>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0201 	bic.w	r2, r2, #1
 80027c8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	3301      	adds	r3, #1
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d307      	bcc.n	80027e6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f2      	bne.n	80027ca <HAL_DMA_IRQHandler+0x8da>
 80027e4:	e000      	b.n	80027e8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80027e6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d004      	beq.n	8002800 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2203      	movs	r2, #3
 80027fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80027fe:	e003      	b.n	8002808 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 8272 	beq.w	8002cfe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	4798      	blx	r3
 8002822:	e26c      	b.n	8002cfe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a43      	ldr	r2, [pc, #268]	; (8002938 <HAL_DMA_IRQHandler+0xa48>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d022      	beq.n	8002874 <HAL_DMA_IRQHandler+0x984>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a42      	ldr	r2, [pc, #264]	; (800293c <HAL_DMA_IRQHandler+0xa4c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d01d      	beq.n	8002874 <HAL_DMA_IRQHandler+0x984>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a40      	ldr	r2, [pc, #256]	; (8002940 <HAL_DMA_IRQHandler+0xa50>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d018      	beq.n	8002874 <HAL_DMA_IRQHandler+0x984>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a3f      	ldr	r2, [pc, #252]	; (8002944 <HAL_DMA_IRQHandler+0xa54>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d013      	beq.n	8002874 <HAL_DMA_IRQHandler+0x984>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a3d      	ldr	r2, [pc, #244]	; (8002948 <HAL_DMA_IRQHandler+0xa58>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00e      	beq.n	8002874 <HAL_DMA_IRQHandler+0x984>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a3c      	ldr	r2, [pc, #240]	; (800294c <HAL_DMA_IRQHandler+0xa5c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d009      	beq.n	8002874 <HAL_DMA_IRQHandler+0x984>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a3a      	ldr	r2, [pc, #232]	; (8002950 <HAL_DMA_IRQHandler+0xa60>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d004      	beq.n	8002874 <HAL_DMA_IRQHandler+0x984>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a39      	ldr	r2, [pc, #228]	; (8002954 <HAL_DMA_IRQHandler+0xa64>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d101      	bne.n	8002878 <HAL_DMA_IRQHandler+0x988>
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <HAL_DMA_IRQHandler+0x98a>
 8002878:	2300      	movs	r3, #0
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 823f 	beq.w	8002cfe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	2204      	movs	r2, #4
 8002892:	409a      	lsls	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 80cd 	beq.w	8002a38 <HAL_DMA_IRQHandler+0xb48>
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80c7 	beq.w	8002a38 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	2204      	movs	r2, #4
 80028b4:	409a      	lsls	r2, r3
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d049      	beq.n	8002958 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 8210 	beq.w	8002cf8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028e0:	e20a      	b.n	8002cf8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 8206 	beq.w	8002cf8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028f4:	e200      	b.n	8002cf8 <HAL_DMA_IRQHandler+0xe08>
 80028f6:	bf00      	nop
 80028f8:	40020010 	.word	0x40020010
 80028fc:	40020028 	.word	0x40020028
 8002900:	40020040 	.word	0x40020040
 8002904:	40020058 	.word	0x40020058
 8002908:	40020070 	.word	0x40020070
 800290c:	40020088 	.word	0x40020088
 8002910:	400200a0 	.word	0x400200a0
 8002914:	400200b8 	.word	0x400200b8
 8002918:	40020410 	.word	0x40020410
 800291c:	40020428 	.word	0x40020428
 8002920:	40020440 	.word	0x40020440
 8002924:	40020458 	.word	0x40020458
 8002928:	40020470 	.word	0x40020470
 800292c:	40020488 	.word	0x40020488
 8002930:	400204a0 	.word	0x400204a0
 8002934:	400204b8 	.word	0x400204b8
 8002938:	58025408 	.word	0x58025408
 800293c:	5802541c 	.word	0x5802541c
 8002940:	58025430 	.word	0x58025430
 8002944:	58025444 	.word	0x58025444
 8002948:	58025458 	.word	0x58025458
 800294c:	5802546c 	.word	0x5802546c
 8002950:	58025480 	.word	0x58025480
 8002954:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	f003 0320 	and.w	r3, r3, #32
 800295e:	2b00      	cmp	r3, #0
 8002960:	d160      	bne.n	8002a24 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a7f      	ldr	r2, [pc, #508]	; (8002b64 <HAL_DMA_IRQHandler+0xc74>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d04a      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xb12>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a7d      	ldr	r2, [pc, #500]	; (8002b68 <HAL_DMA_IRQHandler+0xc78>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d045      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xb12>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a7c      	ldr	r2, [pc, #496]	; (8002b6c <HAL_DMA_IRQHandler+0xc7c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d040      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xb12>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a7a      	ldr	r2, [pc, #488]	; (8002b70 <HAL_DMA_IRQHandler+0xc80>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d03b      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xb12>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a79      	ldr	r2, [pc, #484]	; (8002b74 <HAL_DMA_IRQHandler+0xc84>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d036      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xb12>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a77      	ldr	r2, [pc, #476]	; (8002b78 <HAL_DMA_IRQHandler+0xc88>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d031      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xb12>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a76      	ldr	r2, [pc, #472]	; (8002b7c <HAL_DMA_IRQHandler+0xc8c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d02c      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xb12>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a74      	ldr	r2, [pc, #464]	; (8002b80 <HAL_DMA_IRQHandler+0xc90>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d027      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xb12>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a73      	ldr	r2, [pc, #460]	; (8002b84 <HAL_DMA_IRQHandler+0xc94>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d022      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xb12>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a71      	ldr	r2, [pc, #452]	; (8002b88 <HAL_DMA_IRQHandler+0xc98>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d01d      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xb12>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a70      	ldr	r2, [pc, #448]	; (8002b8c <HAL_DMA_IRQHandler+0xc9c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d018      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xb12>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a6e      	ldr	r2, [pc, #440]	; (8002b90 <HAL_DMA_IRQHandler+0xca0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d013      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xb12>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a6d      	ldr	r2, [pc, #436]	; (8002b94 <HAL_DMA_IRQHandler+0xca4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d00e      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xb12>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a6b      	ldr	r2, [pc, #428]	; (8002b98 <HAL_DMA_IRQHandler+0xca8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d009      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xb12>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a6a      	ldr	r2, [pc, #424]	; (8002b9c <HAL_DMA_IRQHandler+0xcac>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d004      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xb12>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a68      	ldr	r2, [pc, #416]	; (8002ba0 <HAL_DMA_IRQHandler+0xcb0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d108      	bne.n	8002a14 <HAL_DMA_IRQHandler+0xb24>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0208 	bic.w	r2, r2, #8
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	e007      	b.n	8002a24 <HAL_DMA_IRQHandler+0xb34>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0204 	bic.w	r2, r2, #4
 8002a22:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 8165 	beq.w	8002cf8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a36:	e15f      	b.n	8002cf8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	2202      	movs	r2, #2
 8002a42:	409a      	lsls	r2, r3
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 80c5 	beq.w	8002bd8 <HAL_DMA_IRQHandler+0xce8>
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 80bf 	beq.w	8002bd8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5e:	f003 031f 	and.w	r3, r3, #31
 8002a62:	2202      	movs	r2, #2
 8002a64:	409a      	lsls	r2, r3
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d018      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d109      	bne.n	8002a92 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 813a 	beq.w	8002cfc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a90:	e134      	b.n	8002cfc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 8130 	beq.w	8002cfc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002aa4:	e12a      	b.n	8002cfc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f003 0320 	and.w	r3, r3, #32
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f040 8089 	bne.w	8002bc4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a2b      	ldr	r2, [pc, #172]	; (8002b64 <HAL_DMA_IRQHandler+0xc74>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d04a      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xc62>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a29      	ldr	r2, [pc, #164]	; (8002b68 <HAL_DMA_IRQHandler+0xc78>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d045      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xc62>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a28      	ldr	r2, [pc, #160]	; (8002b6c <HAL_DMA_IRQHandler+0xc7c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d040      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xc62>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a26      	ldr	r2, [pc, #152]	; (8002b70 <HAL_DMA_IRQHandler+0xc80>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d03b      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xc62>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a25      	ldr	r2, [pc, #148]	; (8002b74 <HAL_DMA_IRQHandler+0xc84>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d036      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xc62>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a23      	ldr	r2, [pc, #140]	; (8002b78 <HAL_DMA_IRQHandler+0xc88>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d031      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xc62>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a22      	ldr	r2, [pc, #136]	; (8002b7c <HAL_DMA_IRQHandler+0xc8c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d02c      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xc62>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a20      	ldr	r2, [pc, #128]	; (8002b80 <HAL_DMA_IRQHandler+0xc90>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d027      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xc62>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a1f      	ldr	r2, [pc, #124]	; (8002b84 <HAL_DMA_IRQHandler+0xc94>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d022      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xc62>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a1d      	ldr	r2, [pc, #116]	; (8002b88 <HAL_DMA_IRQHandler+0xc98>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d01d      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xc62>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a1c      	ldr	r2, [pc, #112]	; (8002b8c <HAL_DMA_IRQHandler+0xc9c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d018      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xc62>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a1a      	ldr	r2, [pc, #104]	; (8002b90 <HAL_DMA_IRQHandler+0xca0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d013      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xc62>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a19      	ldr	r2, [pc, #100]	; (8002b94 <HAL_DMA_IRQHandler+0xca4>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d00e      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xc62>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a17      	ldr	r2, [pc, #92]	; (8002b98 <HAL_DMA_IRQHandler+0xca8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d009      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xc62>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a16      	ldr	r2, [pc, #88]	; (8002b9c <HAL_DMA_IRQHandler+0xcac>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d004      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xc62>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a14      	ldr	r2, [pc, #80]	; (8002ba0 <HAL_DMA_IRQHandler+0xcb0>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d128      	bne.n	8002ba4 <HAL_DMA_IRQHandler+0xcb4>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0214 	bic.w	r2, r2, #20
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	e027      	b.n	8002bb4 <HAL_DMA_IRQHandler+0xcc4>
 8002b64:	40020010 	.word	0x40020010
 8002b68:	40020028 	.word	0x40020028
 8002b6c:	40020040 	.word	0x40020040
 8002b70:	40020058 	.word	0x40020058
 8002b74:	40020070 	.word	0x40020070
 8002b78:	40020088 	.word	0x40020088
 8002b7c:	400200a0 	.word	0x400200a0
 8002b80:	400200b8 	.word	0x400200b8
 8002b84:	40020410 	.word	0x40020410
 8002b88:	40020428 	.word	0x40020428
 8002b8c:	40020440 	.word	0x40020440
 8002b90:	40020458 	.word	0x40020458
 8002b94:	40020470 	.word	0x40020470
 8002b98:	40020488 	.word	0x40020488
 8002b9c:	400204a0 	.word	0x400204a0
 8002ba0:	400204b8 	.word	0x400204b8
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 020a 	bic.w	r2, r2, #10
 8002bb2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 8097 	beq.w	8002cfc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002bd6:	e091      	b.n	8002cfc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bdc:	f003 031f 	and.w	r3, r3, #31
 8002be0:	2208      	movs	r2, #8
 8002be2:	409a      	lsls	r2, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	4013      	ands	r3, r2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 8088 	beq.w	8002cfe <HAL_DMA_IRQHandler+0xe0e>
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f003 0308 	and.w	r3, r3, #8
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 8082 	beq.w	8002cfe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a41      	ldr	r2, [pc, #260]	; (8002d04 <HAL_DMA_IRQHandler+0xe14>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d04a      	beq.n	8002c9a <HAL_DMA_IRQHandler+0xdaa>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a3f      	ldr	r2, [pc, #252]	; (8002d08 <HAL_DMA_IRQHandler+0xe18>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d045      	beq.n	8002c9a <HAL_DMA_IRQHandler+0xdaa>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a3e      	ldr	r2, [pc, #248]	; (8002d0c <HAL_DMA_IRQHandler+0xe1c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d040      	beq.n	8002c9a <HAL_DMA_IRQHandler+0xdaa>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a3c      	ldr	r2, [pc, #240]	; (8002d10 <HAL_DMA_IRQHandler+0xe20>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d03b      	beq.n	8002c9a <HAL_DMA_IRQHandler+0xdaa>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a3b      	ldr	r2, [pc, #236]	; (8002d14 <HAL_DMA_IRQHandler+0xe24>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d036      	beq.n	8002c9a <HAL_DMA_IRQHandler+0xdaa>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a39      	ldr	r2, [pc, #228]	; (8002d18 <HAL_DMA_IRQHandler+0xe28>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d031      	beq.n	8002c9a <HAL_DMA_IRQHandler+0xdaa>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a38      	ldr	r2, [pc, #224]	; (8002d1c <HAL_DMA_IRQHandler+0xe2c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d02c      	beq.n	8002c9a <HAL_DMA_IRQHandler+0xdaa>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a36      	ldr	r2, [pc, #216]	; (8002d20 <HAL_DMA_IRQHandler+0xe30>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d027      	beq.n	8002c9a <HAL_DMA_IRQHandler+0xdaa>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a35      	ldr	r2, [pc, #212]	; (8002d24 <HAL_DMA_IRQHandler+0xe34>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d022      	beq.n	8002c9a <HAL_DMA_IRQHandler+0xdaa>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a33      	ldr	r2, [pc, #204]	; (8002d28 <HAL_DMA_IRQHandler+0xe38>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d01d      	beq.n	8002c9a <HAL_DMA_IRQHandler+0xdaa>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a32      	ldr	r2, [pc, #200]	; (8002d2c <HAL_DMA_IRQHandler+0xe3c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d018      	beq.n	8002c9a <HAL_DMA_IRQHandler+0xdaa>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a30      	ldr	r2, [pc, #192]	; (8002d30 <HAL_DMA_IRQHandler+0xe40>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d013      	beq.n	8002c9a <HAL_DMA_IRQHandler+0xdaa>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a2f      	ldr	r2, [pc, #188]	; (8002d34 <HAL_DMA_IRQHandler+0xe44>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d00e      	beq.n	8002c9a <HAL_DMA_IRQHandler+0xdaa>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a2d      	ldr	r2, [pc, #180]	; (8002d38 <HAL_DMA_IRQHandler+0xe48>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d009      	beq.n	8002c9a <HAL_DMA_IRQHandler+0xdaa>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a2c      	ldr	r2, [pc, #176]	; (8002d3c <HAL_DMA_IRQHandler+0xe4c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d004      	beq.n	8002c9a <HAL_DMA_IRQHandler+0xdaa>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a2a      	ldr	r2, [pc, #168]	; (8002d40 <HAL_DMA_IRQHandler+0xe50>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d108      	bne.n	8002cac <HAL_DMA_IRQHandler+0xdbc>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 021c 	bic.w	r2, r2, #28
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	e007      	b.n	8002cbc <HAL_DMA_IRQHandler+0xdcc>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 020e 	bic.w	r2, r2, #14
 8002cba:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc0:	f003 031f 	and.w	r3, r3, #31
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d009      	beq.n	8002cfe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	4798      	blx	r3
 8002cf2:	e004      	b.n	8002cfe <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002cf4:	bf00      	nop
 8002cf6:	e002      	b.n	8002cfe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cf8:	bf00      	nop
 8002cfa:	e000      	b.n	8002cfe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cfc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002cfe:	3728      	adds	r7, #40	; 0x28
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40020010 	.word	0x40020010
 8002d08:	40020028 	.word	0x40020028
 8002d0c:	40020040 	.word	0x40020040
 8002d10:	40020058 	.word	0x40020058
 8002d14:	40020070 	.word	0x40020070
 8002d18:	40020088 	.word	0x40020088
 8002d1c:	400200a0 	.word	0x400200a0
 8002d20:	400200b8 	.word	0x400200b8
 8002d24:	40020410 	.word	0x40020410
 8002d28:	40020428 	.word	0x40020428
 8002d2c:	40020440 	.word	0x40020440
 8002d30:	40020458 	.word	0x40020458
 8002d34:	40020470 	.word	0x40020470
 8002d38:	40020488 	.word	0x40020488
 8002d3c:	400204a0 	.word	0x400204a0
 8002d40:	400204b8 	.word	0x400204b8

08002d44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a42      	ldr	r2, [pc, #264]	; (8002e5c <DMA_CalcBaseAndBitshift+0x118>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d04a      	beq.n	8002dec <DMA_CalcBaseAndBitshift+0xa8>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a41      	ldr	r2, [pc, #260]	; (8002e60 <DMA_CalcBaseAndBitshift+0x11c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d045      	beq.n	8002dec <DMA_CalcBaseAndBitshift+0xa8>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a3f      	ldr	r2, [pc, #252]	; (8002e64 <DMA_CalcBaseAndBitshift+0x120>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d040      	beq.n	8002dec <DMA_CalcBaseAndBitshift+0xa8>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a3e      	ldr	r2, [pc, #248]	; (8002e68 <DMA_CalcBaseAndBitshift+0x124>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d03b      	beq.n	8002dec <DMA_CalcBaseAndBitshift+0xa8>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a3c      	ldr	r2, [pc, #240]	; (8002e6c <DMA_CalcBaseAndBitshift+0x128>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d036      	beq.n	8002dec <DMA_CalcBaseAndBitshift+0xa8>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a3b      	ldr	r2, [pc, #236]	; (8002e70 <DMA_CalcBaseAndBitshift+0x12c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d031      	beq.n	8002dec <DMA_CalcBaseAndBitshift+0xa8>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a39      	ldr	r2, [pc, #228]	; (8002e74 <DMA_CalcBaseAndBitshift+0x130>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d02c      	beq.n	8002dec <DMA_CalcBaseAndBitshift+0xa8>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a38      	ldr	r2, [pc, #224]	; (8002e78 <DMA_CalcBaseAndBitshift+0x134>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d027      	beq.n	8002dec <DMA_CalcBaseAndBitshift+0xa8>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a36      	ldr	r2, [pc, #216]	; (8002e7c <DMA_CalcBaseAndBitshift+0x138>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d022      	beq.n	8002dec <DMA_CalcBaseAndBitshift+0xa8>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a35      	ldr	r2, [pc, #212]	; (8002e80 <DMA_CalcBaseAndBitshift+0x13c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d01d      	beq.n	8002dec <DMA_CalcBaseAndBitshift+0xa8>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a33      	ldr	r2, [pc, #204]	; (8002e84 <DMA_CalcBaseAndBitshift+0x140>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d018      	beq.n	8002dec <DMA_CalcBaseAndBitshift+0xa8>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a32      	ldr	r2, [pc, #200]	; (8002e88 <DMA_CalcBaseAndBitshift+0x144>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d013      	beq.n	8002dec <DMA_CalcBaseAndBitshift+0xa8>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a30      	ldr	r2, [pc, #192]	; (8002e8c <DMA_CalcBaseAndBitshift+0x148>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00e      	beq.n	8002dec <DMA_CalcBaseAndBitshift+0xa8>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a2f      	ldr	r2, [pc, #188]	; (8002e90 <DMA_CalcBaseAndBitshift+0x14c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d009      	beq.n	8002dec <DMA_CalcBaseAndBitshift+0xa8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a2d      	ldr	r2, [pc, #180]	; (8002e94 <DMA_CalcBaseAndBitshift+0x150>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d004      	beq.n	8002dec <DMA_CalcBaseAndBitshift+0xa8>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a2c      	ldr	r2, [pc, #176]	; (8002e98 <DMA_CalcBaseAndBitshift+0x154>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d101      	bne.n	8002df0 <DMA_CalcBaseAndBitshift+0xac>
 8002dec:	2301      	movs	r3, #1
 8002dee:	e000      	b.n	8002df2 <DMA_CalcBaseAndBitshift+0xae>
 8002df0:	2300      	movs	r3, #0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d024      	beq.n	8002e40 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	3b10      	subs	r3, #16
 8002dfe:	4a27      	ldr	r2, [pc, #156]	; (8002e9c <DMA_CalcBaseAndBitshift+0x158>)
 8002e00:	fba2 2303 	umull	r2, r3, r2, r3
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	4a24      	ldr	r2, [pc, #144]	; (8002ea0 <DMA_CalcBaseAndBitshift+0x15c>)
 8002e10:	5cd3      	ldrb	r3, [r2, r3]
 8002e12:	461a      	mov	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d908      	bls.n	8002e30 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	4b1f      	ldr	r3, [pc, #124]	; (8002ea4 <DMA_CalcBaseAndBitshift+0x160>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	1d1a      	adds	r2, r3, #4
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	659a      	str	r2, [r3, #88]	; 0x58
 8002e2e:	e00d      	b.n	8002e4c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	4b1b      	ldr	r3, [pc, #108]	; (8002ea4 <DMA_CalcBaseAndBitshift+0x160>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6593      	str	r3, [r2, #88]	; 0x58
 8002e3e:	e005      	b.n	8002e4c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	40020010 	.word	0x40020010
 8002e60:	40020028 	.word	0x40020028
 8002e64:	40020040 	.word	0x40020040
 8002e68:	40020058 	.word	0x40020058
 8002e6c:	40020070 	.word	0x40020070
 8002e70:	40020088 	.word	0x40020088
 8002e74:	400200a0 	.word	0x400200a0
 8002e78:	400200b8 	.word	0x400200b8
 8002e7c:	40020410 	.word	0x40020410
 8002e80:	40020428 	.word	0x40020428
 8002e84:	40020440 	.word	0x40020440
 8002e88:	40020458 	.word	0x40020458
 8002e8c:	40020470 	.word	0x40020470
 8002e90:	40020488 	.word	0x40020488
 8002e94:	400204a0 	.word	0x400204a0
 8002e98:	400204b8 	.word	0x400204b8
 8002e9c:	aaaaaaab 	.word	0xaaaaaaab
 8002ea0:	0800a82c 	.word	0x0800a82c
 8002ea4:	fffffc00 	.word	0xfffffc00

08002ea8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d120      	bne.n	8002efe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d858      	bhi.n	8002f76 <DMA_CheckFifoParam+0xce>
 8002ec4:	a201      	add	r2, pc, #4	; (adr r2, 8002ecc <DMA_CheckFifoParam+0x24>)
 8002ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eca:	bf00      	nop
 8002ecc:	08002edd 	.word	0x08002edd
 8002ed0:	08002eef 	.word	0x08002eef
 8002ed4:	08002edd 	.word	0x08002edd
 8002ed8:	08002f77 	.word	0x08002f77
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d048      	beq.n	8002f7a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002eec:	e045      	b.n	8002f7a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ef6:	d142      	bne.n	8002f7e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002efc:	e03f      	b.n	8002f7e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f06:	d123      	bne.n	8002f50 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d838      	bhi.n	8002f82 <DMA_CheckFifoParam+0xda>
 8002f10:	a201      	add	r2, pc, #4	; (adr r2, 8002f18 <DMA_CheckFifoParam+0x70>)
 8002f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f16:	bf00      	nop
 8002f18:	08002f29 	.word	0x08002f29
 8002f1c:	08002f2f 	.word	0x08002f2f
 8002f20:	08002f29 	.word	0x08002f29
 8002f24:	08002f41 	.word	0x08002f41
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	73fb      	strb	r3, [r7, #15]
        break;
 8002f2c:	e030      	b.n	8002f90 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d025      	beq.n	8002f86 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f3e:	e022      	b.n	8002f86 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f48:	d11f      	bne.n	8002f8a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f4e:	e01c      	b.n	8002f8a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d902      	bls.n	8002f5e <DMA_CheckFifoParam+0xb6>
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d003      	beq.n	8002f64 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002f5c:	e018      	b.n	8002f90 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	73fb      	strb	r3, [r7, #15]
        break;
 8002f62:	e015      	b.n	8002f90 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00e      	beq.n	8002f8e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	73fb      	strb	r3, [r7, #15]
    break;
 8002f74:	e00b      	b.n	8002f8e <DMA_CheckFifoParam+0xe6>
        break;
 8002f76:	bf00      	nop
 8002f78:	e00a      	b.n	8002f90 <DMA_CheckFifoParam+0xe8>
        break;
 8002f7a:	bf00      	nop
 8002f7c:	e008      	b.n	8002f90 <DMA_CheckFifoParam+0xe8>
        break;
 8002f7e:	bf00      	nop
 8002f80:	e006      	b.n	8002f90 <DMA_CheckFifoParam+0xe8>
        break;
 8002f82:	bf00      	nop
 8002f84:	e004      	b.n	8002f90 <DMA_CheckFifoParam+0xe8>
        break;
 8002f86:	bf00      	nop
 8002f88:	e002      	b.n	8002f90 <DMA_CheckFifoParam+0xe8>
        break;
 8002f8a:	bf00      	nop
 8002f8c:	e000      	b.n	8002f90 <DMA_CheckFifoParam+0xe8>
    break;
 8002f8e:	bf00      	nop
    }
  }

  return status;
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop

08002fa0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a38      	ldr	r2, [pc, #224]	; (8003094 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d022      	beq.n	8002ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a36      	ldr	r2, [pc, #216]	; (8003098 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d01d      	beq.n	8002ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a35      	ldr	r2, [pc, #212]	; (800309c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d018      	beq.n	8002ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a33      	ldr	r2, [pc, #204]	; (80030a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d013      	beq.n	8002ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a32      	ldr	r2, [pc, #200]	; (80030a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d00e      	beq.n	8002ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a30      	ldr	r2, [pc, #192]	; (80030a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d009      	beq.n	8002ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a2f      	ldr	r2, [pc, #188]	; (80030ac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d004      	beq.n	8002ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a2d      	ldr	r2, [pc, #180]	; (80030b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d101      	bne.n	8003002 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003002:	2300      	movs	r3, #0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d01a      	beq.n	800303e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	3b08      	subs	r3, #8
 8003010:	4a28      	ldr	r2, [pc, #160]	; (80030b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003012:	fba2 2303 	umull	r2, r3, r2, r3
 8003016:	091b      	lsrs	r3, r3, #4
 8003018:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4b26      	ldr	r3, [pc, #152]	; (80030b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800301e:	4413      	add	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	461a      	mov	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a24      	ldr	r2, [pc, #144]	; (80030bc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800302c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	2201      	movs	r2, #1
 8003036:	409a      	lsls	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800303c:	e024      	b.n	8003088 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	3b10      	subs	r3, #16
 8003046:	4a1e      	ldr	r2, [pc, #120]	; (80030c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003048:	fba2 2303 	umull	r2, r3, r2, r3
 800304c:	091b      	lsrs	r3, r3, #4
 800304e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4a1c      	ldr	r2, [pc, #112]	; (80030c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d806      	bhi.n	8003066 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	4a1b      	ldr	r2, [pc, #108]	; (80030c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d902      	bls.n	8003066 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	3308      	adds	r3, #8
 8003064:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	4b18      	ldr	r3, [pc, #96]	; (80030cc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	461a      	mov	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a16      	ldr	r2, [pc, #88]	; (80030d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003078:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	2201      	movs	r2, #1
 8003082:	409a      	lsls	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003088:	bf00      	nop
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	58025408 	.word	0x58025408
 8003098:	5802541c 	.word	0x5802541c
 800309c:	58025430 	.word	0x58025430
 80030a0:	58025444 	.word	0x58025444
 80030a4:	58025458 	.word	0x58025458
 80030a8:	5802546c 	.word	0x5802546c
 80030ac:	58025480 	.word	0x58025480
 80030b0:	58025494 	.word	0x58025494
 80030b4:	cccccccd 	.word	0xcccccccd
 80030b8:	16009600 	.word	0x16009600
 80030bc:	58025880 	.word	0x58025880
 80030c0:	aaaaaaab 	.word	0xaaaaaaab
 80030c4:	400204b8 	.word	0x400204b8
 80030c8:	4002040f 	.word	0x4002040f
 80030cc:	10008200 	.word	0x10008200
 80030d0:	40020880 	.word	0x40020880

080030d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d04a      	beq.n	8003180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d847      	bhi.n	8003180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a25      	ldr	r2, [pc, #148]	; (800318c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d022      	beq.n	8003140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a24      	ldr	r2, [pc, #144]	; (8003190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d01d      	beq.n	8003140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a22      	ldr	r2, [pc, #136]	; (8003194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d018      	beq.n	8003140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a21      	ldr	r2, [pc, #132]	; (8003198 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d013      	beq.n	8003140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1f      	ldr	r2, [pc, #124]	; (800319c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00e      	beq.n	8003140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1e      	ldr	r2, [pc, #120]	; (80031a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d009      	beq.n	8003140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1c      	ldr	r2, [pc, #112]	; (80031a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d004      	beq.n	8003140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a1b      	ldr	r2, [pc, #108]	; (80031a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d101      	bne.n	8003144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003144:	2300      	movs	r3, #0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4b17      	ldr	r3, [pc, #92]	; (80031ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800314e:	4413      	add	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	461a      	mov	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a15      	ldr	r2, [pc, #84]	; (80031b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800315c:	671a      	str	r2, [r3, #112]	; 0x70
 800315e:	e009      	b.n	8003174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4b14      	ldr	r3, [pc, #80]	; (80031b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003164:	4413      	add	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	461a      	mov	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a11      	ldr	r2, [pc, #68]	; (80031b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003172:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	3b01      	subs	r3, #1
 8003178:	2201      	movs	r2, #1
 800317a:	409a      	lsls	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003180:	bf00      	nop
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	58025408 	.word	0x58025408
 8003190:	5802541c 	.word	0x5802541c
 8003194:	58025430 	.word	0x58025430
 8003198:	58025444 	.word	0x58025444
 800319c:	58025458 	.word	0x58025458
 80031a0:	5802546c 	.word	0x5802546c
 80031a4:	58025480 	.word	0x58025480
 80031a8:	58025494 	.word	0x58025494
 80031ac:	1600963f 	.word	0x1600963f
 80031b0:	58025940 	.word	0x58025940
 80031b4:	1000823f 	.word	0x1000823f
 80031b8:	40020940 	.word	0x40020940

080031bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031bc:	b480      	push	{r7}
 80031be:	b089      	sub	sp, #36	; 0x24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80031ca:	4b89      	ldr	r3, [pc, #548]	; (80033f0 <HAL_GPIO_Init+0x234>)
 80031cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80031ce:	e194      	b.n	80034fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	2101      	movs	r1, #1
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	fa01 f303 	lsl.w	r3, r1, r3
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 8186 	beq.w	80034f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d005      	beq.n	8003200 <HAL_GPIO_Init+0x44>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d130      	bne.n	8003262 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	2203      	movs	r2, #3
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4313      	orrs	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003236:	2201      	movs	r2, #1
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4013      	ands	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	091b      	lsrs	r3, r3, #4
 800324c:	f003 0201 	and.w	r2, r3, #1
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4313      	orrs	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	2b03      	cmp	r3, #3
 800326c:	d017      	beq.n	800329e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	2203      	movs	r2, #3
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	43db      	mvns	r3, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4013      	ands	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4313      	orrs	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d123      	bne.n	80032f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	08da      	lsrs	r2, r3, #3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3208      	adds	r2, #8
 80032b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	220f      	movs	r2, #15
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43db      	mvns	r3, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4013      	ands	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	691a      	ldr	r2, [r3, #16]
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	08da      	lsrs	r2, r3, #3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3208      	adds	r2, #8
 80032ec:	69b9      	ldr	r1, [r7, #24]
 80032ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	2203      	movs	r2, #3
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43db      	mvns	r3, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4013      	ands	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f003 0203 	and.w	r2, r3, #3
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4313      	orrs	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 80e0 	beq.w	80034f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003334:	4b2f      	ldr	r3, [pc, #188]	; (80033f4 <HAL_GPIO_Init+0x238>)
 8003336:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800333a:	4a2e      	ldr	r2, [pc, #184]	; (80033f4 <HAL_GPIO_Init+0x238>)
 800333c:	f043 0302 	orr.w	r3, r3, #2
 8003340:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003344:	4b2b      	ldr	r3, [pc, #172]	; (80033f4 <HAL_GPIO_Init+0x238>)
 8003346:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003352:	4a29      	ldr	r2, [pc, #164]	; (80033f8 <HAL_GPIO_Init+0x23c>)
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	089b      	lsrs	r3, r3, #2
 8003358:	3302      	adds	r3, #2
 800335a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	220f      	movs	r2, #15
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4013      	ands	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a20      	ldr	r2, [pc, #128]	; (80033fc <HAL_GPIO_Init+0x240>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d052      	beq.n	8003424 <HAL_GPIO_Init+0x268>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a1f      	ldr	r2, [pc, #124]	; (8003400 <HAL_GPIO_Init+0x244>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d031      	beq.n	80033ea <HAL_GPIO_Init+0x22e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a1e      	ldr	r2, [pc, #120]	; (8003404 <HAL_GPIO_Init+0x248>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d02b      	beq.n	80033e6 <HAL_GPIO_Init+0x22a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a1d      	ldr	r2, [pc, #116]	; (8003408 <HAL_GPIO_Init+0x24c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d025      	beq.n	80033e2 <HAL_GPIO_Init+0x226>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a1c      	ldr	r2, [pc, #112]	; (800340c <HAL_GPIO_Init+0x250>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d01f      	beq.n	80033de <HAL_GPIO_Init+0x222>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a1b      	ldr	r2, [pc, #108]	; (8003410 <HAL_GPIO_Init+0x254>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d019      	beq.n	80033da <HAL_GPIO_Init+0x21e>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a1a      	ldr	r2, [pc, #104]	; (8003414 <HAL_GPIO_Init+0x258>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d013      	beq.n	80033d6 <HAL_GPIO_Init+0x21a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a19      	ldr	r2, [pc, #100]	; (8003418 <HAL_GPIO_Init+0x25c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00d      	beq.n	80033d2 <HAL_GPIO_Init+0x216>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a18      	ldr	r2, [pc, #96]	; (800341c <HAL_GPIO_Init+0x260>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d007      	beq.n	80033ce <HAL_GPIO_Init+0x212>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a17      	ldr	r2, [pc, #92]	; (8003420 <HAL_GPIO_Init+0x264>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d101      	bne.n	80033ca <HAL_GPIO_Init+0x20e>
 80033c6:	2309      	movs	r3, #9
 80033c8:	e02d      	b.n	8003426 <HAL_GPIO_Init+0x26a>
 80033ca:	230a      	movs	r3, #10
 80033cc:	e02b      	b.n	8003426 <HAL_GPIO_Init+0x26a>
 80033ce:	2308      	movs	r3, #8
 80033d0:	e029      	b.n	8003426 <HAL_GPIO_Init+0x26a>
 80033d2:	2307      	movs	r3, #7
 80033d4:	e027      	b.n	8003426 <HAL_GPIO_Init+0x26a>
 80033d6:	2306      	movs	r3, #6
 80033d8:	e025      	b.n	8003426 <HAL_GPIO_Init+0x26a>
 80033da:	2305      	movs	r3, #5
 80033dc:	e023      	b.n	8003426 <HAL_GPIO_Init+0x26a>
 80033de:	2304      	movs	r3, #4
 80033e0:	e021      	b.n	8003426 <HAL_GPIO_Init+0x26a>
 80033e2:	2303      	movs	r3, #3
 80033e4:	e01f      	b.n	8003426 <HAL_GPIO_Init+0x26a>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e01d      	b.n	8003426 <HAL_GPIO_Init+0x26a>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e01b      	b.n	8003426 <HAL_GPIO_Init+0x26a>
 80033ee:	bf00      	nop
 80033f0:	58000080 	.word	0x58000080
 80033f4:	58024400 	.word	0x58024400
 80033f8:	58000400 	.word	0x58000400
 80033fc:	58020000 	.word	0x58020000
 8003400:	58020400 	.word	0x58020400
 8003404:	58020800 	.word	0x58020800
 8003408:	58020c00 	.word	0x58020c00
 800340c:	58021000 	.word	0x58021000
 8003410:	58021400 	.word	0x58021400
 8003414:	58021800 	.word	0x58021800
 8003418:	58021c00 	.word	0x58021c00
 800341c:	58022000 	.word	0x58022000
 8003420:	58022400 	.word	0x58022400
 8003424:	2300      	movs	r3, #0
 8003426:	69fa      	ldr	r2, [r7, #28]
 8003428:	f002 0203 	and.w	r2, r2, #3
 800342c:	0092      	lsls	r2, r2, #2
 800342e:	4093      	lsls	r3, r2
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003436:	4938      	ldr	r1, [pc, #224]	; (8003518 <HAL_GPIO_Init+0x35c>)
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	089b      	lsrs	r3, r3, #2
 800343c:	3302      	adds	r3, #2
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	43db      	mvns	r3, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4013      	ands	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800346a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	43db      	mvns	r3, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4013      	ands	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003498:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	43db      	mvns	r3, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4013      	ands	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	3301      	adds	r3, #1
 80034f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	fa22 f303 	lsr.w	r3, r2, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	f47f ae63 	bne.w	80031d0 <HAL_GPIO_Init+0x14>
  }
}
 800350a:	bf00      	nop
 800350c:	bf00      	nop
 800350e:	3724      	adds	r7, #36	; 0x24
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	58000400 	.word	0x58000400

0800351c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	887b      	ldrh	r3, [r7, #2]
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003534:	2301      	movs	r3, #1
 8003536:	73fb      	strb	r3, [r7, #15]
 8003538:	e001      	b.n	800353e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800353a:	2300      	movs	r3, #0
 800353c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800353e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003554:	4b19      	ldr	r3, [pc, #100]	; (80035bc <HAL_PWREx_ConfigSupply+0x70>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b04      	cmp	r3, #4
 800355e:	d00a      	beq.n	8003576 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003560:	4b16      	ldr	r3, [pc, #88]	; (80035bc <HAL_PWREx_ConfigSupply+0x70>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	429a      	cmp	r2, r3
 800356c:	d001      	beq.n	8003572 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e01f      	b.n	80035b2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003572:	2300      	movs	r3, #0
 8003574:	e01d      	b.n	80035b2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003576:	4b11      	ldr	r3, [pc, #68]	; (80035bc <HAL_PWREx_ConfigSupply+0x70>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f023 0207 	bic.w	r2, r3, #7
 800357e:	490f      	ldr	r1, [pc, #60]	; (80035bc <HAL_PWREx_ConfigSupply+0x70>)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4313      	orrs	r3, r2
 8003584:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003586:	f7fd fdc5 	bl	8001114 <HAL_GetTick>
 800358a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800358c:	e009      	b.n	80035a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800358e:	f7fd fdc1 	bl	8001114 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800359c:	d901      	bls.n	80035a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e007      	b.n	80035b2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035a2:	4b06      	ldr	r3, [pc, #24]	; (80035bc <HAL_PWREx_ConfigSupply+0x70>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ae:	d1ee      	bne.n	800358e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	58024800 	.word	0x58024800

080035c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08c      	sub	sp, #48	; 0x30
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d102      	bne.n	80035d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	f000 bc1d 	b.w	8003e0e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 8087 	beq.w	80036f0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035e2:	4b99      	ldr	r3, [pc, #612]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035ec:	4b96      	ldr	r3, [pc, #600]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 80035ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80035f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f4:	2b10      	cmp	r3, #16
 80035f6:	d007      	beq.n	8003608 <HAL_RCC_OscConfig+0x48>
 80035f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fa:	2b18      	cmp	r3, #24
 80035fc:	d110      	bne.n	8003620 <HAL_RCC_OscConfig+0x60>
 80035fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d10b      	bne.n	8003620 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003608:	4b8f      	ldr	r3, [pc, #572]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d06c      	beq.n	80036ee <HAL_RCC_OscConfig+0x12e>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d168      	bne.n	80036ee <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e3f6      	b.n	8003e0e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003628:	d106      	bne.n	8003638 <HAL_RCC_OscConfig+0x78>
 800362a:	4b87      	ldr	r3, [pc, #540]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a86      	ldr	r2, [pc, #536]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 8003630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	e02e      	b.n	8003696 <HAL_RCC_OscConfig+0xd6>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10c      	bne.n	800365a <HAL_RCC_OscConfig+0x9a>
 8003640:	4b81      	ldr	r3, [pc, #516]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a80      	ldr	r2, [pc, #512]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 8003646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800364a:	6013      	str	r3, [r2, #0]
 800364c:	4b7e      	ldr	r3, [pc, #504]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a7d      	ldr	r2, [pc, #500]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 8003652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	e01d      	b.n	8003696 <HAL_RCC_OscConfig+0xd6>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003662:	d10c      	bne.n	800367e <HAL_RCC_OscConfig+0xbe>
 8003664:	4b78      	ldr	r3, [pc, #480]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a77      	ldr	r2, [pc, #476]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 800366a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	4b75      	ldr	r3, [pc, #468]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a74      	ldr	r2, [pc, #464]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 8003676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	e00b      	b.n	8003696 <HAL_RCC_OscConfig+0xd6>
 800367e:	4b72      	ldr	r3, [pc, #456]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a71      	ldr	r2, [pc, #452]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 8003684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	4b6f      	ldr	r3, [pc, #444]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a6e      	ldr	r2, [pc, #440]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 8003690:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003694:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d013      	beq.n	80036c6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369e:	f7fd fd39 	bl	8001114 <HAL_GetTick>
 80036a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036a6:	f7fd fd35 	bl	8001114 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b64      	cmp	r3, #100	; 0x64
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e3aa      	b.n	8003e0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036b8:	4b63      	ldr	r3, [pc, #396]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0f0      	beq.n	80036a6 <HAL_RCC_OscConfig+0xe6>
 80036c4:	e014      	b.n	80036f0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c6:	f7fd fd25 	bl	8001114 <HAL_GetTick>
 80036ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036ce:	f7fd fd21 	bl	8001114 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b64      	cmp	r3, #100	; 0x64
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e396      	b.n	8003e0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036e0:	4b59      	ldr	r3, [pc, #356]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1f0      	bne.n	80036ce <HAL_RCC_OscConfig+0x10e>
 80036ec:	e000      	b.n	80036f0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 80cb 	beq.w	8003894 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036fe:	4b52      	ldr	r3, [pc, #328]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003706:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003708:	4b4f      	ldr	r3, [pc, #316]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 800370a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d007      	beq.n	8003724 <HAL_RCC_OscConfig+0x164>
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	2b18      	cmp	r3, #24
 8003718:	d156      	bne.n	80037c8 <HAL_RCC_OscConfig+0x208>
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	f003 0303 	and.w	r3, r3, #3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d151      	bne.n	80037c8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003724:	4b48      	ldr	r3, [pc, #288]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	d005      	beq.n	800373c <HAL_RCC_OscConfig+0x17c>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e368      	b.n	8003e0e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800373c:	4b42      	ldr	r3, [pc, #264]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f023 0219 	bic.w	r2, r3, #25
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	493f      	ldr	r1, [pc, #252]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800374e:	f7fd fce1 	bl	8001114 <HAL_GetTick>
 8003752:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003756:	f7fd fcdd 	bl	8001114 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e352      	b.n	8003e0e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003768:	4b37      	ldr	r3, [pc, #220]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0f0      	beq.n	8003756 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003774:	f7fd fcfe 	bl	8001174 <HAL_GetREVID>
 8003778:	4603      	mov	r3, r0
 800377a:	f241 0203 	movw	r2, #4099	; 0x1003
 800377e:	4293      	cmp	r3, r2
 8003780:	d817      	bhi.n	80037b2 <HAL_RCC_OscConfig+0x1f2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	2b40      	cmp	r3, #64	; 0x40
 8003788:	d108      	bne.n	800379c <HAL_RCC_OscConfig+0x1dc>
 800378a:	4b2f      	ldr	r3, [pc, #188]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003792:	4a2d      	ldr	r2, [pc, #180]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 8003794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003798:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800379a:	e07b      	b.n	8003894 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379c:	4b2a      	ldr	r3, [pc, #168]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	031b      	lsls	r3, r3, #12
 80037aa:	4927      	ldr	r1, [pc, #156]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037b0:	e070      	b.n	8003894 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b2:	4b25      	ldr	r3, [pc, #148]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	061b      	lsls	r3, r3, #24
 80037c0:	4921      	ldr	r1, [pc, #132]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037c6:	e065      	b.n	8003894 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d048      	beq.n	8003862 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80037d0:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f023 0219 	bic.w	r2, r3, #25
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	491a      	ldr	r1, [pc, #104]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e2:	f7fd fc97 	bl	8001114 <HAL_GetTick>
 80037e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ea:	f7fd fc93 	bl	8001114 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e308      	b.n	8003e0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037fc:	4b12      	ldr	r3, [pc, #72]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0f0      	beq.n	80037ea <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003808:	f7fd fcb4 	bl	8001174 <HAL_GetREVID>
 800380c:	4603      	mov	r3, r0
 800380e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003812:	4293      	cmp	r3, r2
 8003814:	d81a      	bhi.n	800384c <HAL_RCC_OscConfig+0x28c>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b40      	cmp	r3, #64	; 0x40
 800381c:	d108      	bne.n	8003830 <HAL_RCC_OscConfig+0x270>
 800381e:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003826:	4a08      	ldr	r2, [pc, #32]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 8003828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800382c:	6053      	str	r3, [r2, #4]
 800382e:	e031      	b.n	8003894 <HAL_RCC_OscConfig+0x2d4>
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	031b      	lsls	r3, r3, #12
 800383e:	4902      	ldr	r1, [pc, #8]	; (8003848 <HAL_RCC_OscConfig+0x288>)
 8003840:	4313      	orrs	r3, r2
 8003842:	604b      	str	r3, [r1, #4]
 8003844:	e026      	b.n	8003894 <HAL_RCC_OscConfig+0x2d4>
 8003846:	bf00      	nop
 8003848:	58024400 	.word	0x58024400
 800384c:	4b9a      	ldr	r3, [pc, #616]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	061b      	lsls	r3, r3, #24
 800385a:	4997      	ldr	r1, [pc, #604]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]
 8003860:	e018      	b.n	8003894 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003862:	4b95      	ldr	r3, [pc, #596]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a94      	ldr	r2, [pc, #592]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 8003868:	f023 0301 	bic.w	r3, r3, #1
 800386c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386e:	f7fd fc51 	bl	8001114 <HAL_GetTick>
 8003872:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003876:	f7fd fc4d 	bl	8001114 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e2c2      	b.n	8003e0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003888:	4b8b      	ldr	r3, [pc, #556]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1f0      	bne.n	8003876 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 80a9 	beq.w	80039f4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038a2:	4b85      	ldr	r3, [pc, #532]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038aa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038ac:	4b82      	ldr	r3, [pc, #520]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 80038ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d007      	beq.n	80038c8 <HAL_RCC_OscConfig+0x308>
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	2b18      	cmp	r3, #24
 80038bc:	d13a      	bne.n	8003934 <HAL_RCC_OscConfig+0x374>
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d135      	bne.n	8003934 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80038c8:	4b7b      	ldr	r3, [pc, #492]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_OscConfig+0x320>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	2b80      	cmp	r3, #128	; 0x80
 80038da:	d001      	beq.n	80038e0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e296      	b.n	8003e0e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038e0:	f7fd fc48 	bl	8001174 <HAL_GetREVID>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d817      	bhi.n	800391e <HAL_RCC_OscConfig+0x35e>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	d108      	bne.n	8003908 <HAL_RCC_OscConfig+0x348>
 80038f6:	4b70      	ldr	r3, [pc, #448]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80038fe:	4a6e      	ldr	r2, [pc, #440]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 8003900:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003904:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003906:	e075      	b.n	80039f4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003908:	4b6b      	ldr	r3, [pc, #428]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	069b      	lsls	r3, r3, #26
 8003916:	4968      	ldr	r1, [pc, #416]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 8003918:	4313      	orrs	r3, r2
 800391a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800391c:	e06a      	b.n	80039f4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800391e:	4b66      	ldr	r3, [pc, #408]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	061b      	lsls	r3, r3, #24
 800392c:	4962      	ldr	r1, [pc, #392]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 800392e:	4313      	orrs	r3, r2
 8003930:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003932:	e05f      	b.n	80039f4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d042      	beq.n	80039c2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800393c:	4b5e      	ldr	r3, [pc, #376]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a5d      	ldr	r2, [pc, #372]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 8003942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003948:	f7fd fbe4 	bl	8001114 <HAL_GetTick>
 800394c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003950:	f7fd fbe0 	bl	8001114 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e255      	b.n	8003e0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003962:	4b55      	ldr	r3, [pc, #340]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0f0      	beq.n	8003950 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800396e:	f7fd fc01 	bl	8001174 <HAL_GetREVID>
 8003972:	4603      	mov	r3, r0
 8003974:	f241 0203 	movw	r2, #4099	; 0x1003
 8003978:	4293      	cmp	r3, r2
 800397a:	d817      	bhi.n	80039ac <HAL_RCC_OscConfig+0x3ec>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	2b20      	cmp	r3, #32
 8003982:	d108      	bne.n	8003996 <HAL_RCC_OscConfig+0x3d6>
 8003984:	4b4c      	ldr	r3, [pc, #304]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800398c:	4a4a      	ldr	r2, [pc, #296]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 800398e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003992:	6053      	str	r3, [r2, #4]
 8003994:	e02e      	b.n	80039f4 <HAL_RCC_OscConfig+0x434>
 8003996:	4b48      	ldr	r3, [pc, #288]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	069b      	lsls	r3, r3, #26
 80039a4:	4944      	ldr	r1, [pc, #272]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	604b      	str	r3, [r1, #4]
 80039aa:	e023      	b.n	80039f4 <HAL_RCC_OscConfig+0x434>
 80039ac:	4b42      	ldr	r3, [pc, #264]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	061b      	lsls	r3, r3, #24
 80039ba:	493f      	ldr	r1, [pc, #252]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	60cb      	str	r3, [r1, #12]
 80039c0:	e018      	b.n	80039f4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80039c2:	4b3d      	ldr	r3, [pc, #244]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a3c      	ldr	r2, [pc, #240]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 80039c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ce:	f7fd fba1 	bl	8001114 <HAL_GetTick>
 80039d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80039d6:	f7fd fb9d 	bl	8001114 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e212      	b.n	8003e0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80039e8:	4b33      	ldr	r3, [pc, #204]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1f0      	bne.n	80039d6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0308 	and.w	r3, r3, #8
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d036      	beq.n	8003a6e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d019      	beq.n	8003a3c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a08:	4b2b      	ldr	r3, [pc, #172]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 8003a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a0c:	4a2a      	ldr	r2, [pc, #168]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a14:	f7fd fb7e 	bl	8001114 <HAL_GetTick>
 8003a18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a1c:	f7fd fb7a 	bl	8001114 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e1ef      	b.n	8003e0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a2e:	4b22      	ldr	r3, [pc, #136]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 8003a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCC_OscConfig+0x45c>
 8003a3a:	e018      	b.n	8003a6e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a3c:	4b1e      	ldr	r3, [pc, #120]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 8003a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a40:	4a1d      	ldr	r2, [pc, #116]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 8003a42:	f023 0301 	bic.w	r3, r3, #1
 8003a46:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a48:	f7fd fb64 	bl	8001114 <HAL_GetTick>
 8003a4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a50:	f7fd fb60 	bl	8001114 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e1d5      	b.n	8003e0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a62:	4b15      	ldr	r3, [pc, #84]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 8003a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f0      	bne.n	8003a50 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0320 	and.w	r3, r3, #32
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d039      	beq.n	8003aee <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d01c      	beq.n	8003abc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a82:	4b0d      	ldr	r3, [pc, #52]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a0c      	ldr	r2, [pc, #48]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 8003a88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a8c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a8e:	f7fd fb41 	bl	8001114 <HAL_GetTick>
 8003a92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003a96:	f7fd fb3d 	bl	8001114 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e1b2      	b.n	8003e0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003aa8:	4b03      	ldr	r3, [pc, #12]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0f0      	beq.n	8003a96 <HAL_RCC_OscConfig+0x4d6>
 8003ab4:	e01b      	b.n	8003aee <HAL_RCC_OscConfig+0x52e>
 8003ab6:	bf00      	nop
 8003ab8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003abc:	4b9b      	ldr	r3, [pc, #620]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a9a      	ldr	r2, [pc, #616]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003ac2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ac6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ac8:	f7fd fb24 	bl	8001114 <HAL_GetTick>
 8003acc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003ad0:	f7fd fb20 	bl	8001114 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e195      	b.n	8003e0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ae2:	4b92      	ldr	r3, [pc, #584]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 8081 	beq.w	8003bfe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003afc:	4b8c      	ldr	r3, [pc, #560]	; (8003d30 <HAL_RCC_OscConfig+0x770>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a8b      	ldr	r2, [pc, #556]	; (8003d30 <HAL_RCC_OscConfig+0x770>)
 8003b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b08:	f7fd fb04 	bl	8001114 <HAL_GetTick>
 8003b0c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b10:	f7fd fb00 	bl	8001114 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b64      	cmp	r3, #100	; 0x64
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e175      	b.n	8003e0e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b22:	4b83      	ldr	r3, [pc, #524]	; (8003d30 <HAL_RCC_OscConfig+0x770>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d106      	bne.n	8003b44 <HAL_RCC_OscConfig+0x584>
 8003b36:	4b7d      	ldr	r3, [pc, #500]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	4a7c      	ldr	r2, [pc, #496]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	6713      	str	r3, [r2, #112]	; 0x70
 8003b42:	e02d      	b.n	8003ba0 <HAL_RCC_OscConfig+0x5e0>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10c      	bne.n	8003b66 <HAL_RCC_OscConfig+0x5a6>
 8003b4c:	4b77      	ldr	r3, [pc, #476]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b50:	4a76      	ldr	r2, [pc, #472]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003b52:	f023 0301 	bic.w	r3, r3, #1
 8003b56:	6713      	str	r3, [r2, #112]	; 0x70
 8003b58:	4b74      	ldr	r3, [pc, #464]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5c:	4a73      	ldr	r2, [pc, #460]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003b5e:	f023 0304 	bic.w	r3, r3, #4
 8003b62:	6713      	str	r3, [r2, #112]	; 0x70
 8003b64:	e01c      	b.n	8003ba0 <HAL_RCC_OscConfig+0x5e0>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	2b05      	cmp	r3, #5
 8003b6c:	d10c      	bne.n	8003b88 <HAL_RCC_OscConfig+0x5c8>
 8003b6e:	4b6f      	ldr	r3, [pc, #444]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b72:	4a6e      	ldr	r2, [pc, #440]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003b74:	f043 0304 	orr.w	r3, r3, #4
 8003b78:	6713      	str	r3, [r2, #112]	; 0x70
 8003b7a:	4b6c      	ldr	r3, [pc, #432]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7e:	4a6b      	ldr	r2, [pc, #428]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003b80:	f043 0301 	orr.w	r3, r3, #1
 8003b84:	6713      	str	r3, [r2, #112]	; 0x70
 8003b86:	e00b      	b.n	8003ba0 <HAL_RCC_OscConfig+0x5e0>
 8003b88:	4b68      	ldr	r3, [pc, #416]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8c:	4a67      	ldr	r2, [pc, #412]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003b8e:	f023 0301 	bic.w	r3, r3, #1
 8003b92:	6713      	str	r3, [r2, #112]	; 0x70
 8003b94:	4b65      	ldr	r3, [pc, #404]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b98:	4a64      	ldr	r2, [pc, #400]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003b9a:	f023 0304 	bic.w	r3, r3, #4
 8003b9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d015      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba8:	f7fd fab4 	bl	8001114 <HAL_GetTick>
 8003bac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bae:	e00a      	b.n	8003bc6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bb0:	f7fd fab0 	bl	8001114 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e123      	b.n	8003e0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bc6:	4b59      	ldr	r3, [pc, #356]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0ee      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x5f0>
 8003bd2:	e014      	b.n	8003bfe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd4:	f7fd fa9e 	bl	8001114 <HAL_GetTick>
 8003bd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003bda:	e00a      	b.n	8003bf2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bdc:	f7fd fa9a 	bl	8001114 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e10d      	b.n	8003e0e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003bf2:	4b4e      	ldr	r3, [pc, #312]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1ee      	bne.n	8003bdc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 8102 	beq.w	8003e0c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c08:	4b48      	ldr	r3, [pc, #288]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c10:	2b18      	cmp	r3, #24
 8003c12:	f000 80bd 	beq.w	8003d90 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	f040 809e 	bne.w	8003d5c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c20:	4b42      	ldr	r3, [pc, #264]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a41      	ldr	r2, [pc, #260]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003c26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2c:	f7fd fa72 	bl	8001114 <HAL_GetTick>
 8003c30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c34:	f7fd fa6e 	bl	8001114 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e0e3      	b.n	8003e0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c46:	4b39      	ldr	r3, [pc, #228]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c52:	4b36      	ldr	r3, [pc, #216]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c56:	4b37      	ldr	r3, [pc, #220]	; (8003d34 <HAL_RCC_OscConfig+0x774>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c62:	0112      	lsls	r2, r2, #4
 8003c64:	430a      	orrs	r2, r1
 8003c66:	4931      	ldr	r1, [pc, #196]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	628b      	str	r3, [r1, #40]	; 0x28
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	3b01      	subs	r3, #1
 8003c72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	025b      	lsls	r3, r3, #9
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	431a      	orrs	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c86:	3b01      	subs	r3, #1
 8003c88:	041b      	lsls	r3, r3, #16
 8003c8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c94:	3b01      	subs	r3, #1
 8003c96:	061b      	lsls	r3, r3, #24
 8003c98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c9c:	4923      	ldr	r1, [pc, #140]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003ca2:	4b22      	ldr	r3, [pc, #136]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	4a21      	ldr	r2, [pc, #132]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003ca8:	f023 0301 	bic.w	r3, r3, #1
 8003cac:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003cae:	4b1f      	ldr	r3, [pc, #124]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cb2:	4b21      	ldr	r3, [pc, #132]	; (8003d38 <HAL_RCC_OscConfig+0x778>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003cba:	00d2      	lsls	r2, r2, #3
 8003cbc:	491b      	ldr	r1, [pc, #108]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003cc2:	4b1a      	ldr	r3, [pc, #104]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc6:	f023 020c 	bic.w	r2, r3, #12
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	4917      	ldr	r1, [pc, #92]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003cd4:	4b15      	ldr	r3, [pc, #84]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd8:	f023 0202 	bic.w	r2, r3, #2
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce0:	4912      	ldr	r1, [pc, #72]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ce6:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cea:	4a10      	ldr	r2, [pc, #64]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cf2:	4b0e      	ldr	r3, [pc, #56]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf6:	4a0d      	ldr	r2, [pc, #52]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003cfe:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	4a0a      	ldr	r2, [pc, #40]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003d0a:	4b08      	ldr	r3, [pc, #32]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	4a07      	ldr	r2, [pc, #28]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d16:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a04      	ldr	r2, [pc, #16]	; (8003d2c <HAL_RCC_OscConfig+0x76c>)
 8003d1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d22:	f7fd f9f7 	bl	8001114 <HAL_GetTick>
 8003d26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d28:	e011      	b.n	8003d4e <HAL_RCC_OscConfig+0x78e>
 8003d2a:	bf00      	nop
 8003d2c:	58024400 	.word	0x58024400
 8003d30:	58024800 	.word	0x58024800
 8003d34:	fffffc0c 	.word	0xfffffc0c
 8003d38:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d3c:	f7fd f9ea 	bl	8001114 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e05f      	b.n	8003e0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d4e:	4b32      	ldr	r3, [pc, #200]	; (8003e18 <HAL_RCC_OscConfig+0x858>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCC_OscConfig+0x77c>
 8003d5a:	e057      	b.n	8003e0c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d5c:	4b2e      	ldr	r3, [pc, #184]	; (8003e18 <HAL_RCC_OscConfig+0x858>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a2d      	ldr	r2, [pc, #180]	; (8003e18 <HAL_RCC_OscConfig+0x858>)
 8003d62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d68:	f7fd f9d4 	bl	8001114 <HAL_GetTick>
 8003d6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d70:	f7fd f9d0 	bl	8001114 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e045      	b.n	8003e0e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d82:	4b25      	ldr	r3, [pc, #148]	; (8003e18 <HAL_RCC_OscConfig+0x858>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f0      	bne.n	8003d70 <HAL_RCC_OscConfig+0x7b0>
 8003d8e:	e03d      	b.n	8003e0c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003d90:	4b21      	ldr	r3, [pc, #132]	; (8003e18 <HAL_RCC_OscConfig+0x858>)
 8003d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d94:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d96:	4b20      	ldr	r3, [pc, #128]	; (8003e18 <HAL_RCC_OscConfig+0x858>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d031      	beq.n	8003e08 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f003 0203 	and.w	r2, r3, #3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d12a      	bne.n	8003e08 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	091b      	lsrs	r3, r3, #4
 8003db6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d122      	bne.n	8003e08 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dcc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d11a      	bne.n	8003e08 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	0a5b      	lsrs	r3, r3, #9
 8003dd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dde:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d111      	bne.n	8003e08 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	0c1b      	lsrs	r3, r3, #16
 8003de8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d108      	bne.n	8003e08 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	0e1b      	lsrs	r3, r3, #24
 8003dfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e02:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d001      	beq.n	8003e0c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3730      	adds	r7, #48	; 0x30
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	58024400 	.word	0x58024400

08003e1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e19c      	b.n	800416a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e30:	4b8a      	ldr	r3, [pc, #552]	; (800405c <HAL_RCC_ClockConfig+0x240>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 030f 	and.w	r3, r3, #15
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d910      	bls.n	8003e60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3e:	4b87      	ldr	r3, [pc, #540]	; (800405c <HAL_RCC_ClockConfig+0x240>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f023 020f 	bic.w	r2, r3, #15
 8003e46:	4985      	ldr	r1, [pc, #532]	; (800405c <HAL_RCC_ClockConfig+0x240>)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4e:	4b83      	ldr	r3, [pc, #524]	; (800405c <HAL_RCC_ClockConfig+0x240>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e184      	b.n	800416a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d010      	beq.n	8003e8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	4b7b      	ldr	r3, [pc, #492]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d908      	bls.n	8003e8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e7c:	4b78      	ldr	r3, [pc, #480]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	4975      	ldr	r1, [pc, #468]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d010      	beq.n	8003ebc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	695a      	ldr	r2, [r3, #20]
 8003e9e:	4b70      	ldr	r3, [pc, #448]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d908      	bls.n	8003ebc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003eaa:	4b6d      	ldr	r3, [pc, #436]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	496a      	ldr	r1, [pc, #424]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0310 	and.w	r3, r3, #16
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d010      	beq.n	8003eea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	699a      	ldr	r2, [r3, #24]
 8003ecc:	4b64      	ldr	r3, [pc, #400]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d908      	bls.n	8003eea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ed8:	4b61      	ldr	r3, [pc, #388]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	495e      	ldr	r1, [pc, #376]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0320 	and.w	r3, r3, #32
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d010      	beq.n	8003f18 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69da      	ldr	r2, [r3, #28]
 8003efa:	4b59      	ldr	r3, [pc, #356]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d908      	bls.n	8003f18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003f06:	4b56      	ldr	r3, [pc, #344]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	4953      	ldr	r1, [pc, #332]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d010      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	4b4d      	ldr	r3, [pc, #308]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d908      	bls.n	8003f46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f34:	4b4a      	ldr	r3, [pc, #296]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	f023 020f 	bic.w	r2, r3, #15
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	4947      	ldr	r1, [pc, #284]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d055      	beq.n	8003ffe <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003f52:	4b43      	ldr	r3, [pc, #268]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	4940      	ldr	r1, [pc, #256]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d107      	bne.n	8003f7c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f6c:	4b3c      	ldr	r3, [pc, #240]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d121      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e0f6      	b.n	800416a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d107      	bne.n	8003f94 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f84:	4b36      	ldr	r3, [pc, #216]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d115      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0ea      	b.n	800416a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d107      	bne.n	8003fac <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f9c:	4b30      	ldr	r3, [pc, #192]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d109      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e0de      	b.n	800416a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fac:	4b2c      	ldr	r3, [pc, #176]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0d6      	b.n	800416a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fbc:	4b28      	ldr	r3, [pc, #160]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	f023 0207 	bic.w	r2, r3, #7
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	4925      	ldr	r1, [pc, #148]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fce:	f7fd f8a1 	bl	8001114 <HAL_GetTick>
 8003fd2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd4:	e00a      	b.n	8003fec <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd6:	f7fd f89d 	bl	8001114 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e0be      	b.n	800416a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fec:	4b1c      	ldr	r3, [pc, #112]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d1eb      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d010      	beq.n	800402c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	4b14      	ldr	r3, [pc, #80]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	429a      	cmp	r2, r3
 8004018:	d208      	bcs.n	800402c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800401a:	4b11      	ldr	r3, [pc, #68]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	f023 020f 	bic.w	r2, r3, #15
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	490e      	ldr	r1, [pc, #56]	; (8004060 <HAL_RCC_ClockConfig+0x244>)
 8004028:	4313      	orrs	r3, r2
 800402a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800402c:	4b0b      	ldr	r3, [pc, #44]	; (800405c <HAL_RCC_ClockConfig+0x240>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 030f 	and.w	r3, r3, #15
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d214      	bcs.n	8004064 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403a:	4b08      	ldr	r3, [pc, #32]	; (800405c <HAL_RCC_ClockConfig+0x240>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f023 020f 	bic.w	r2, r3, #15
 8004042:	4906      	ldr	r1, [pc, #24]	; (800405c <HAL_RCC_ClockConfig+0x240>)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	4313      	orrs	r3, r2
 8004048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800404a:	4b04      	ldr	r3, [pc, #16]	; (800405c <HAL_RCC_ClockConfig+0x240>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d005      	beq.n	8004064 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e086      	b.n	800416a <HAL_RCC_ClockConfig+0x34e>
 800405c:	52002000 	.word	0x52002000
 8004060:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d010      	beq.n	8004092 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	4b3f      	ldr	r3, [pc, #252]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800407c:	429a      	cmp	r2, r3
 800407e:	d208      	bcs.n	8004092 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004080:	4b3c      	ldr	r3, [pc, #240]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	4939      	ldr	r1, [pc, #228]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 800408e:	4313      	orrs	r3, r2
 8004090:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d010      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695a      	ldr	r2, [r3, #20]
 80040a2:	4b34      	ldr	r3, [pc, #208]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d208      	bcs.n	80040c0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040ae:	4b31      	ldr	r3, [pc, #196]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	492e      	ldr	r1, [pc, #184]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0310 	and.w	r3, r3, #16
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d010      	beq.n	80040ee <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699a      	ldr	r2, [r3, #24]
 80040d0:	4b28      	ldr	r3, [pc, #160]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040d8:	429a      	cmp	r2, r3
 80040da:	d208      	bcs.n	80040ee <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040dc:	4b25      	ldr	r3, [pc, #148]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	4922      	ldr	r1, [pc, #136]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d010      	beq.n	800411c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69da      	ldr	r2, [r3, #28]
 80040fe:	4b1d      	ldr	r3, [pc, #116]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004106:	429a      	cmp	r2, r3
 8004108:	d208      	bcs.n	800411c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800410a:	4b1a      	ldr	r3, [pc, #104]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	4917      	ldr	r1, [pc, #92]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 8004118:	4313      	orrs	r3, r2
 800411a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800411c:	f000 f834 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 8004120:	4602      	mov	r2, r0
 8004122:	4b14      	ldr	r3, [pc, #80]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	0a1b      	lsrs	r3, r3, #8
 8004128:	f003 030f 	and.w	r3, r3, #15
 800412c:	4912      	ldr	r1, [pc, #72]	; (8004178 <HAL_RCC_ClockConfig+0x35c>)
 800412e:	5ccb      	ldrb	r3, [r1, r3]
 8004130:	f003 031f 	and.w	r3, r3, #31
 8004134:	fa22 f303 	lsr.w	r3, r2, r3
 8004138:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800413a:	4b0e      	ldr	r3, [pc, #56]	; (8004174 <HAL_RCC_ClockConfig+0x358>)
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	4a0d      	ldr	r2, [pc, #52]	; (8004178 <HAL_RCC_ClockConfig+0x35c>)
 8004144:	5cd3      	ldrb	r3, [r2, r3]
 8004146:	f003 031f 	and.w	r3, r3, #31
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	fa22 f303 	lsr.w	r3, r2, r3
 8004150:	4a0a      	ldr	r2, [pc, #40]	; (800417c <HAL_RCC_ClockConfig+0x360>)
 8004152:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004154:	4a0a      	ldr	r2, [pc, #40]	; (8004180 <HAL_RCC_ClockConfig+0x364>)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800415a:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <HAL_RCC_ClockConfig+0x368>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f7fc ff8e 	bl	8001080 <HAL_InitTick>
 8004164:	4603      	mov	r3, r0
 8004166:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004168:	7bfb      	ldrb	r3, [r7, #15]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	58024400 	.word	0x58024400
 8004178:	0800a81c 	.word	0x0800a81c
 800417c:	24000004 	.word	0x24000004
 8004180:	24000000 	.word	0x24000000
 8004184:	24000008 	.word	0x24000008

08004188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004188:	b480      	push	{r7}
 800418a:	b089      	sub	sp, #36	; 0x24
 800418c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800418e:	4bb3      	ldr	r3, [pc, #716]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004196:	2b18      	cmp	r3, #24
 8004198:	f200 8155 	bhi.w	8004446 <HAL_RCC_GetSysClockFreq+0x2be>
 800419c:	a201      	add	r2, pc, #4	; (adr r2, 80041a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800419e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a2:	bf00      	nop
 80041a4:	08004209 	.word	0x08004209
 80041a8:	08004447 	.word	0x08004447
 80041ac:	08004447 	.word	0x08004447
 80041b0:	08004447 	.word	0x08004447
 80041b4:	08004447 	.word	0x08004447
 80041b8:	08004447 	.word	0x08004447
 80041bc:	08004447 	.word	0x08004447
 80041c0:	08004447 	.word	0x08004447
 80041c4:	0800422f 	.word	0x0800422f
 80041c8:	08004447 	.word	0x08004447
 80041cc:	08004447 	.word	0x08004447
 80041d0:	08004447 	.word	0x08004447
 80041d4:	08004447 	.word	0x08004447
 80041d8:	08004447 	.word	0x08004447
 80041dc:	08004447 	.word	0x08004447
 80041e0:	08004447 	.word	0x08004447
 80041e4:	08004235 	.word	0x08004235
 80041e8:	08004447 	.word	0x08004447
 80041ec:	08004447 	.word	0x08004447
 80041f0:	08004447 	.word	0x08004447
 80041f4:	08004447 	.word	0x08004447
 80041f8:	08004447 	.word	0x08004447
 80041fc:	08004447 	.word	0x08004447
 8004200:	08004447 	.word	0x08004447
 8004204:	0800423b 	.word	0x0800423b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004208:	4b94      	ldr	r3, [pc, #592]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0320 	and.w	r3, r3, #32
 8004210:	2b00      	cmp	r3, #0
 8004212:	d009      	beq.n	8004228 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004214:	4b91      	ldr	r3, [pc, #580]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	08db      	lsrs	r3, r3, #3
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	4a90      	ldr	r2, [pc, #576]	; (8004460 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004220:	fa22 f303 	lsr.w	r3, r2, r3
 8004224:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004226:	e111      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004228:	4b8d      	ldr	r3, [pc, #564]	; (8004460 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800422a:	61bb      	str	r3, [r7, #24]
    break;
 800422c:	e10e      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800422e:	4b8d      	ldr	r3, [pc, #564]	; (8004464 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004230:	61bb      	str	r3, [r7, #24]
    break;
 8004232:	e10b      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004234:	4b8c      	ldr	r3, [pc, #560]	; (8004468 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004236:	61bb      	str	r3, [r7, #24]
    break;
 8004238:	e108      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800423a:	4b88      	ldr	r3, [pc, #544]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800423c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004244:	4b85      	ldr	r3, [pc, #532]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800424e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004250:	4b82      	ldr	r3, [pc, #520]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800425a:	4b80      	ldr	r3, [pc, #512]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800425c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425e:	08db      	lsrs	r3, r3, #3
 8004260:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	fb02 f303 	mul.w	r3, r2, r3
 800426a:	ee07 3a90 	vmov	s15, r3
 800426e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004272:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80e1 	beq.w	8004440 <HAL_RCC_GetSysClockFreq+0x2b8>
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2b02      	cmp	r3, #2
 8004282:	f000 8083 	beq.w	800438c <HAL_RCC_GetSysClockFreq+0x204>
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2b02      	cmp	r3, #2
 800428a:	f200 80a1 	bhi.w	80043d0 <HAL_RCC_GetSysClockFreq+0x248>
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <HAL_RCC_GetSysClockFreq+0x114>
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d056      	beq.n	8004348 <HAL_RCC_GetSysClockFreq+0x1c0>
 800429a:	e099      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800429c:	4b6f      	ldr	r3, [pc, #444]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0320 	and.w	r3, r3, #32
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d02d      	beq.n	8004304 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80042a8:	4b6c      	ldr	r3, [pc, #432]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	08db      	lsrs	r3, r3, #3
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	4a6b      	ldr	r2, [pc, #428]	; (8004460 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042b4:	fa22 f303 	lsr.w	r3, r2, r3
 80042b8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	ee07 3a90 	vmov	s15, r3
 80042c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042d2:	4b62      	ldr	r3, [pc, #392]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042da:	ee07 3a90 	vmov	s15, r3
 80042de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80042e6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800446c <HAL_RCC_GetSysClockFreq+0x2e4>
 80042ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004302:	e087      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	ee07 3a90 	vmov	s15, r3
 800430a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800430e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004470 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004316:	4b51      	ldr	r3, [pc, #324]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800431e:	ee07 3a90 	vmov	s15, r3
 8004322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004326:	ed97 6a02 	vldr	s12, [r7, #8]
 800432a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800446c <HAL_RCC_GetSysClockFreq+0x2e4>
 800432e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800433a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800433e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004342:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004346:	e065      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004352:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004474 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800435a:	4b40      	ldr	r3, [pc, #256]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004362:	ee07 3a90 	vmov	s15, r3
 8004366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800436a:	ed97 6a02 	vldr	s12, [r7, #8]
 800436e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800446c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800437a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800437e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004386:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800438a:	e043      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	ee07 3a90 	vmov	s15, r3
 8004392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004396:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004478 <HAL_RCC_GetSysClockFreq+0x2f0>
 800439a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800439e:	4b2f      	ldr	r3, [pc, #188]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80043b2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800446c <HAL_RCC_GetSysClockFreq+0x2e4>
 80043b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043ce:	e021      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043da:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004474 <HAL_RCC_GetSysClockFreq+0x2ec>
 80043de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043e2:	4b1e      	ldr	r3, [pc, #120]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ea:	ee07 3a90 	vmov	s15, r3
 80043ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80043f6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800446c <HAL_RCC_GetSysClockFreq+0x2e4>
 80043fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800440a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800440e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004412:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004414:	4b11      	ldr	r3, [pc, #68]	; (800445c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004418:	0a5b      	lsrs	r3, r3, #9
 800441a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800441e:	3301      	adds	r3, #1
 8004420:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	ee07 3a90 	vmov	s15, r3
 8004428:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800442c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004438:	ee17 3a90 	vmov	r3, s15
 800443c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800443e:	e005      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	61bb      	str	r3, [r7, #24]
    break;
 8004444:	e002      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004446:	4b07      	ldr	r3, [pc, #28]	; (8004464 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004448:	61bb      	str	r3, [r7, #24]
    break;
 800444a:	bf00      	nop
  }

  return sysclockfreq;
 800444c:	69bb      	ldr	r3, [r7, #24]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3724      	adds	r7, #36	; 0x24
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	58024400 	.word	0x58024400
 8004460:	03d09000 	.word	0x03d09000
 8004464:	003d0900 	.word	0x003d0900
 8004468:	017d7840 	.word	0x017d7840
 800446c:	46000000 	.word	0x46000000
 8004470:	4c742400 	.word	0x4c742400
 8004474:	4a742400 	.word	0x4a742400
 8004478:	4bbebc20 	.word	0x4bbebc20

0800447c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004482:	f7ff fe81 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 8004486:	4602      	mov	r2, r0
 8004488:	4b10      	ldr	r3, [pc, #64]	; (80044cc <HAL_RCC_GetHCLKFreq+0x50>)
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	0a1b      	lsrs	r3, r3, #8
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	490f      	ldr	r1, [pc, #60]	; (80044d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004494:	5ccb      	ldrb	r3, [r1, r3]
 8004496:	f003 031f 	and.w	r3, r3, #31
 800449a:	fa22 f303 	lsr.w	r3, r2, r3
 800449e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044a0:	4b0a      	ldr	r3, [pc, #40]	; (80044cc <HAL_RCC_GetHCLKFreq+0x50>)
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	f003 030f 	and.w	r3, r3, #15
 80044a8:	4a09      	ldr	r2, [pc, #36]	; (80044d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80044aa:	5cd3      	ldrb	r3, [r2, r3]
 80044ac:	f003 031f 	and.w	r3, r3, #31
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	fa22 f303 	lsr.w	r3, r2, r3
 80044b6:	4a07      	ldr	r2, [pc, #28]	; (80044d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80044b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044ba:	4a07      	ldr	r2, [pc, #28]	; (80044d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80044c0:	4b04      	ldr	r3, [pc, #16]	; (80044d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80044c2:	681b      	ldr	r3, [r3, #0]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	58024400 	.word	0x58024400
 80044d0:	0800a81c 	.word	0x0800a81c
 80044d4:	24000004 	.word	0x24000004
 80044d8:	24000000 	.word	0x24000000

080044dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80044e0:	f7ff ffcc 	bl	800447c <HAL_RCC_GetHCLKFreq>
 80044e4:	4602      	mov	r2, r0
 80044e6:	4b06      	ldr	r3, [pc, #24]	; (8004500 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	091b      	lsrs	r3, r3, #4
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	4904      	ldr	r1, [pc, #16]	; (8004504 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044f2:	5ccb      	ldrb	r3, [r1, r3]
 80044f4:	f003 031f 	and.w	r3, r3, #31
 80044f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	58024400 	.word	0x58024400
 8004504:	0800a81c 	.word	0x0800a81c

08004508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800450c:	f7ff ffb6 	bl	800447c <HAL_RCC_GetHCLKFreq>
 8004510:	4602      	mov	r2, r0
 8004512:	4b06      	ldr	r3, [pc, #24]	; (800452c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	0a1b      	lsrs	r3, r3, #8
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	4904      	ldr	r1, [pc, #16]	; (8004530 <HAL_RCC_GetPCLK2Freq+0x28>)
 800451e:	5ccb      	ldrb	r3, [r1, r3]
 8004520:	f003 031f 	and.w	r3, r3, #31
 8004524:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004528:	4618      	mov	r0, r3
 800452a:	bd80      	pop	{r7, pc}
 800452c:	58024400 	.word	0x58024400
 8004530:	0800a81c 	.word	0x0800a81c

08004534 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800453c:	2300      	movs	r3, #0
 800453e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004540:	2300      	movs	r3, #0
 8004542:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d03f      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004554:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004558:	d02a      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800455a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800455e:	d824      	bhi.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004560:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004564:	d018      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004566:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800456a:	d81e      	bhi.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004570:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004574:	d007      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004576:	e018      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004578:	4ba3      	ldr	r3, [pc, #652]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800457a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457c:	4aa2      	ldr	r2, [pc, #648]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800457e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004582:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004584:	e015      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3304      	adds	r3, #4
 800458a:	2102      	movs	r1, #2
 800458c:	4618      	mov	r0, r3
 800458e:	f001 fff9 	bl	8006584 <RCCEx_PLL2_Config>
 8004592:	4603      	mov	r3, r0
 8004594:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004596:	e00c      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3324      	adds	r3, #36	; 0x24
 800459c:	2102      	movs	r1, #2
 800459e:	4618      	mov	r0, r3
 80045a0:	f002 f8a2 	bl	80066e8 <RCCEx_PLL3_Config>
 80045a4:	4603      	mov	r3, r0
 80045a6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80045a8:	e003      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	75fb      	strb	r3, [r7, #23]
      break;
 80045ae:	e000      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80045b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045b2:	7dfb      	ldrb	r3, [r7, #23]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d109      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80045b8:	4b93      	ldr	r3, [pc, #588]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045c4:	4990      	ldr	r1, [pc, #576]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	650b      	str	r3, [r1, #80]	; 0x50
 80045ca:	e001      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045cc:	7dfb      	ldrb	r3, [r7, #23]
 80045ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d03d      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d826      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80045e4:	a201      	add	r2, pc, #4	; (adr r2, 80045ec <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80045e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ea:	bf00      	nop
 80045ec:	08004601 	.word	0x08004601
 80045f0:	0800460f 	.word	0x0800460f
 80045f4:	08004621 	.word	0x08004621
 80045f8:	08004639 	.word	0x08004639
 80045fc:	08004639 	.word	0x08004639
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004600:	4b81      	ldr	r3, [pc, #516]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	4a80      	ldr	r2, [pc, #512]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800460a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800460c:	e015      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3304      	adds	r3, #4
 8004612:	2100      	movs	r1, #0
 8004614:	4618      	mov	r0, r3
 8004616:	f001 ffb5 	bl	8006584 <RCCEx_PLL2_Config>
 800461a:	4603      	mov	r3, r0
 800461c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800461e:	e00c      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3324      	adds	r3, #36	; 0x24
 8004624:	2100      	movs	r1, #0
 8004626:	4618      	mov	r0, r3
 8004628:	f002 f85e 	bl	80066e8 <RCCEx_PLL3_Config>
 800462c:	4603      	mov	r3, r0
 800462e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004630:	e003      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	75fb      	strb	r3, [r7, #23]
      break;
 8004636:	e000      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004638:	bf00      	nop
    }

    if(ret == HAL_OK)
 800463a:	7dfb      	ldrb	r3, [r7, #23]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d109      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004640:	4b71      	ldr	r3, [pc, #452]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004644:	f023 0207 	bic.w	r2, r3, #7
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464c:	496e      	ldr	r1, [pc, #440]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800464e:	4313      	orrs	r3, r2
 8004650:	650b      	str	r3, [r1, #80]	; 0x50
 8004652:	e001      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004654:	7dfb      	ldrb	r3, [r7, #23]
 8004656:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004660:	2b00      	cmp	r3, #0
 8004662:	d042      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800466c:	d02b      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800466e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004672:	d825      	bhi.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004674:	2bc0      	cmp	r3, #192	; 0xc0
 8004676:	d028      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004678:	2bc0      	cmp	r3, #192	; 0xc0
 800467a:	d821      	bhi.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800467c:	2b80      	cmp	r3, #128	; 0x80
 800467e:	d016      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004680:	2b80      	cmp	r3, #128	; 0x80
 8004682:	d81d      	bhi.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004684:	2b00      	cmp	r3, #0
 8004686:	d002      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004688:	2b40      	cmp	r3, #64	; 0x40
 800468a:	d007      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800468c:	e018      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800468e:	4b5e      	ldr	r3, [pc, #376]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	4a5d      	ldr	r2, [pc, #372]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004698:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800469a:	e017      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3304      	adds	r3, #4
 80046a0:	2100      	movs	r1, #0
 80046a2:	4618      	mov	r0, r3
 80046a4:	f001 ff6e 	bl	8006584 <RCCEx_PLL2_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80046ac:	e00e      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3324      	adds	r3, #36	; 0x24
 80046b2:	2100      	movs	r1, #0
 80046b4:	4618      	mov	r0, r3
 80046b6:	f002 f817 	bl	80066e8 <RCCEx_PLL3_Config>
 80046ba:	4603      	mov	r3, r0
 80046bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80046be:	e005      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	75fb      	strb	r3, [r7, #23]
      break;
 80046c4:	e002      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80046c6:	bf00      	nop
 80046c8:	e000      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80046ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046cc:	7dfb      	ldrb	r3, [r7, #23]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80046d2:	4b4d      	ldr	r3, [pc, #308]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046de:	494a      	ldr	r1, [pc, #296]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	650b      	str	r3, [r1, #80]	; 0x50
 80046e4:	e001      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e6:	7dfb      	ldrb	r3, [r7, #23]
 80046e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d049      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80046fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004700:	d030      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004702:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004706:	d82a      	bhi.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004708:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800470c:	d02c      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800470e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004712:	d824      	bhi.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004714:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004718:	d018      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800471a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800471e:	d81e      	bhi.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004724:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004728:	d007      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800472a:	e018      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800472c:	4b36      	ldr	r3, [pc, #216]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004730:	4a35      	ldr	r2, [pc, #212]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004736:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004738:	e017      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	3304      	adds	r3, #4
 800473e:	2100      	movs	r1, #0
 8004740:	4618      	mov	r0, r3
 8004742:	f001 ff1f 	bl	8006584 <RCCEx_PLL2_Config>
 8004746:	4603      	mov	r3, r0
 8004748:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800474a:	e00e      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3324      	adds	r3, #36	; 0x24
 8004750:	2100      	movs	r1, #0
 8004752:	4618      	mov	r0, r3
 8004754:	f001 ffc8 	bl	80066e8 <RCCEx_PLL3_Config>
 8004758:	4603      	mov	r3, r0
 800475a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800475c:	e005      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	75fb      	strb	r3, [r7, #23]
      break;
 8004762:	e002      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004764:	bf00      	nop
 8004766:	e000      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004768:	bf00      	nop
    }

    if(ret == HAL_OK)
 800476a:	7dfb      	ldrb	r3, [r7, #23]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10a      	bne.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004770:	4b25      	ldr	r3, [pc, #148]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004774:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800477e:	4922      	ldr	r1, [pc, #136]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004780:	4313      	orrs	r3, r2
 8004782:	658b      	str	r3, [r1, #88]	; 0x58
 8004784:	e001      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004786:	7dfb      	ldrb	r3, [r7, #23]
 8004788:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004792:	2b00      	cmp	r3, #0
 8004794:	d04b      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800479c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047a0:	d030      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80047a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047a6:	d82a      	bhi.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80047a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047ac:	d02e      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80047ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047b2:	d824      	bhi.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80047b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047b8:	d018      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80047ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047be:	d81e      	bhi.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80047c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047c8:	d007      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80047ca:	e018      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047cc:	4b0e      	ldr	r3, [pc, #56]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	4a0d      	ldr	r2, [pc, #52]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047d8:	e019      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	3304      	adds	r3, #4
 80047de:	2100      	movs	r1, #0
 80047e0:	4618      	mov	r0, r3
 80047e2:	f001 fecf 	bl	8006584 <RCCEx_PLL2_Config>
 80047e6:	4603      	mov	r3, r0
 80047e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80047ea:	e010      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3324      	adds	r3, #36	; 0x24
 80047f0:	2100      	movs	r1, #0
 80047f2:	4618      	mov	r0, r3
 80047f4:	f001 ff78 	bl	80066e8 <RCCEx_PLL3_Config>
 80047f8:	4603      	mov	r3, r0
 80047fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80047fc:	e007      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	75fb      	strb	r3, [r7, #23]
      break;
 8004802:	e004      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004804:	bf00      	nop
 8004806:	e002      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004808:	58024400 	.word	0x58024400
      break;
 800480c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800480e:	7dfb      	ldrb	r3, [r7, #23]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10a      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004814:	4b99      	ldr	r3, [pc, #612]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004818:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004822:	4996      	ldr	r1, [pc, #600]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004824:	4313      	orrs	r3, r2
 8004826:	658b      	str	r3, [r1, #88]	; 0x58
 8004828:	e001      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800482a:	7dfb      	ldrb	r3, [r7, #23]
 800482c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d032      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800483e:	2b30      	cmp	r3, #48	; 0x30
 8004840:	d01c      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004842:	2b30      	cmp	r3, #48	; 0x30
 8004844:	d817      	bhi.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004846:	2b20      	cmp	r3, #32
 8004848:	d00c      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800484a:	2b20      	cmp	r3, #32
 800484c:	d813      	bhi.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800484e:	2b00      	cmp	r3, #0
 8004850:	d016      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004852:	2b10      	cmp	r3, #16
 8004854:	d10f      	bne.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004856:	4b89      	ldr	r3, [pc, #548]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485a:	4a88      	ldr	r2, [pc, #544]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800485c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004860:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004862:	e00e      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3304      	adds	r3, #4
 8004868:	2102      	movs	r1, #2
 800486a:	4618      	mov	r0, r3
 800486c:	f001 fe8a 	bl	8006584 <RCCEx_PLL2_Config>
 8004870:	4603      	mov	r3, r0
 8004872:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004874:	e005      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	75fb      	strb	r3, [r7, #23]
      break;
 800487a:	e002      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800487c:	bf00      	nop
 800487e:	e000      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004882:	7dfb      	ldrb	r3, [r7, #23]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d109      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004888:	4b7c      	ldr	r3, [pc, #496]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800488a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800488c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004894:	4979      	ldr	r1, [pc, #484]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004896:	4313      	orrs	r3, r2
 8004898:	64cb      	str	r3, [r1, #76]	; 0x4c
 800489a:	e001      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489c:	7dfb      	ldrb	r3, [r7, #23]
 800489e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d047      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048b4:	d030      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80048b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048ba:	d82a      	bhi.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80048bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048c0:	d02c      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80048c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048c6:	d824      	bhi.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80048c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048cc:	d018      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80048ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048d2:	d81e      	bhi.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d003      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80048d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048dc:	d007      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80048de:	e018      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048e0:	4b66      	ldr	r3, [pc, #408]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e4:	4a65      	ldr	r2, [pc, #404]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80048e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80048ec:	e017      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3304      	adds	r3, #4
 80048f2:	2100      	movs	r1, #0
 80048f4:	4618      	mov	r0, r3
 80048f6:	f001 fe45 	bl	8006584 <RCCEx_PLL2_Config>
 80048fa:	4603      	mov	r3, r0
 80048fc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80048fe:	e00e      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	3324      	adds	r3, #36	; 0x24
 8004904:	2100      	movs	r1, #0
 8004906:	4618      	mov	r0, r3
 8004908:	f001 feee 	bl	80066e8 <RCCEx_PLL3_Config>
 800490c:	4603      	mov	r3, r0
 800490e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004910:	e005      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	75fb      	strb	r3, [r7, #23]
      break;
 8004916:	e002      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004918:	bf00      	nop
 800491a:	e000      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800491c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800491e:	7dfb      	ldrb	r3, [r7, #23]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d109      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004924:	4b55      	ldr	r3, [pc, #340]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004928:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004930:	4952      	ldr	r1, [pc, #328]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004932:	4313      	orrs	r3, r2
 8004934:	650b      	str	r3, [r1, #80]	; 0x50
 8004936:	e001      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004938:	7dfb      	ldrb	r3, [r7, #23]
 800493a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d049      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800494c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004950:	d02e      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004952:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004956:	d828      	bhi.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004958:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800495c:	d02a      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800495e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004962:	d822      	bhi.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004964:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004968:	d026      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800496a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800496e:	d81c      	bhi.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004970:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004974:	d010      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004976:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800497a:	d816      	bhi.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x476>
 800497c:	2b00      	cmp	r3, #0
 800497e:	d01d      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004984:	d111      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3304      	adds	r3, #4
 800498a:	2101      	movs	r1, #1
 800498c:	4618      	mov	r0, r3
 800498e:	f001 fdf9 	bl	8006584 <RCCEx_PLL2_Config>
 8004992:	4603      	mov	r3, r0
 8004994:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004996:	e012      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3324      	adds	r3, #36	; 0x24
 800499c:	2101      	movs	r1, #1
 800499e:	4618      	mov	r0, r3
 80049a0:	f001 fea2 	bl	80066e8 <RCCEx_PLL3_Config>
 80049a4:	4603      	mov	r3, r0
 80049a6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80049a8:	e009      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	75fb      	strb	r3, [r7, #23]
      break;
 80049ae:	e006      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80049b0:	bf00      	nop
 80049b2:	e004      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80049b4:	bf00      	nop
 80049b6:	e002      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80049b8:	bf00      	nop
 80049ba:	e000      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80049bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049be:	7dfb      	ldrb	r3, [r7, #23]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d109      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80049c4:	4b2d      	ldr	r3, [pc, #180]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d0:	492a      	ldr	r1, [pc, #168]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	650b      	str	r3, [r1, #80]	; 0x50
 80049d6:	e001      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
 80049da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d04d      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80049ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049f2:	d02e      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80049f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049f8:	d828      	bhi.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80049fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049fe:	d02a      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a04:	d822      	bhi.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004a06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a0a:	d026      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004a0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004a10:	d81c      	bhi.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004a12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a16:	d010      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004a18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a1c:	d816      	bhi.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d01d      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004a22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a26:	d111      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f001 fda8 	bl	8006584 <RCCEx_PLL2_Config>
 8004a34:	4603      	mov	r3, r0
 8004a36:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004a38:	e012      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	3324      	adds	r3, #36	; 0x24
 8004a3e:	2101      	movs	r1, #1
 8004a40:	4618      	mov	r0, r3
 8004a42:	f001 fe51 	bl	80066e8 <RCCEx_PLL3_Config>
 8004a46:	4603      	mov	r3, r0
 8004a48:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004a4a:	e009      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a50:	e006      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004a52:	bf00      	nop
 8004a54:	e004      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004a56:	bf00      	nop
 8004a58:	e002      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004a5a:	bf00      	nop
 8004a5c:	e000      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004a5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a60:	7dfb      	ldrb	r3, [r7, #23]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10c      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004a66:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a74:	4901      	ldr	r1, [pc, #4]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	658b      	str	r3, [r1, #88]	; 0x58
 8004a7a:	e003      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004a7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a80:	7dfb      	ldrb	r3, [r7, #23]
 8004a82:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d02f      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a98:	d00e      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004a9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a9e:	d814      	bhi.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d015      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004aa4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aa8:	d10f      	bne.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aaa:	4baf      	ldr	r3, [pc, #700]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aae:	4aae      	ldr	r2, [pc, #696]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ab4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004ab6:	e00c      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3304      	adds	r3, #4
 8004abc:	2101      	movs	r1, #1
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f001 fd60 	bl	8006584 <RCCEx_PLL2_Config>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004ac8:	e003      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	75fb      	strb	r3, [r7, #23]
      break;
 8004ace:	e000      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004ad0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ad2:	7dfb      	ldrb	r3, [r7, #23]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d109      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ad8:	4ba3      	ldr	r3, [pc, #652]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004adc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ae4:	49a0      	ldr	r1, [pc, #640]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	650b      	str	r3, [r1, #80]	; 0x50
 8004aea:	e001      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aec:	7dfb      	ldrb	r3, [r7, #23]
 8004aee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d032      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	d81b      	bhi.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004b04:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0a:	bf00      	nop
 8004b0c:	08004b43 	.word	0x08004b43
 8004b10:	08004b1d 	.word	0x08004b1d
 8004b14:	08004b2b 	.word	0x08004b2b
 8004b18:	08004b43 	.word	0x08004b43
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b1c:	4b92      	ldr	r3, [pc, #584]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b20:	4a91      	ldr	r2, [pc, #580]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004b28:	e00c      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	2102      	movs	r1, #2
 8004b30:	4618      	mov	r0, r3
 8004b32:	f001 fd27 	bl	8006584 <RCCEx_PLL2_Config>
 8004b36:	4603      	mov	r3, r0
 8004b38:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004b3a:	e003      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b40:	e000      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004b42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b44:	7dfb      	ldrb	r3, [r7, #23]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d109      	bne.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004b4a:	4b87      	ldr	r3, [pc, #540]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b4e:	f023 0203 	bic.w	r2, r3, #3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b56:	4984      	ldr	r1, [pc, #528]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004b5c:	e001      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b5e:	7dfb      	ldrb	r3, [r7, #23]
 8004b60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 8086 	beq.w	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b70:	4b7e      	ldr	r3, [pc, #504]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a7d      	ldr	r2, [pc, #500]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b7c:	f7fc faca 	bl	8001114 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b82:	e009      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b84:	f7fc fac6 	bl	8001114 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b64      	cmp	r3, #100	; 0x64
 8004b90:	d902      	bls.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	75fb      	strb	r3, [r7, #23]
        break;
 8004b96:	e005      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b98:	4b74      	ldr	r3, [pc, #464]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d0ef      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004ba4:	7dfb      	ldrb	r3, [r7, #23]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d166      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004baa:	4b6f      	ldr	r3, [pc, #444]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004bb4:	4053      	eors	r3, r2
 8004bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d013      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bbe:	4b6a      	ldr	r3, [pc, #424]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bc6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bc8:	4b67      	ldr	r3, [pc, #412]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bcc:	4a66      	ldr	r2, [pc, #408]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bd2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bd4:	4b64      	ldr	r3, [pc, #400]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd8:	4a63      	ldr	r2, [pc, #396]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bde:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004be0:	4a61      	ldr	r2, [pc, #388]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bf0:	d115      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf2:	f7fc fa8f 	bl	8001114 <HAL_GetTick>
 8004bf6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bf8:	e00b      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bfa:	f7fc fa8b 	bl	8001114 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d902      	bls.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	75fb      	strb	r3, [r7, #23]
            break;
 8004c10:	e005      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c12:	4b55      	ldr	r3, [pc, #340]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0ed      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004c1e:	7dfb      	ldrb	r3, [r7, #23]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d126      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c32:	d10d      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004c34:	4b4c      	ldr	r3, [pc, #304]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c42:	0919      	lsrs	r1, r3, #4
 8004c44:	4b4a      	ldr	r3, [pc, #296]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004c46:	400b      	ands	r3, r1
 8004c48:	4947      	ldr	r1, [pc, #284]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	610b      	str	r3, [r1, #16]
 8004c4e:	e005      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004c50:	4b45      	ldr	r3, [pc, #276]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	4a44      	ldr	r2, [pc, #272]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004c5a:	6113      	str	r3, [r2, #16]
 8004c5c:	4b42      	ldr	r3, [pc, #264]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c6a:	493f      	ldr	r1, [pc, #252]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	670b      	str	r3, [r1, #112]	; 0x70
 8004c70:	e004      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c72:	7dfb      	ldrb	r3, [r7, #23]
 8004c74:	75bb      	strb	r3, [r7, #22]
 8004c76:	e001      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c78:	7dfb      	ldrb	r3, [r7, #23]
 8004c7a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 8085 	beq.w	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c8e:	2b28      	cmp	r3, #40	; 0x28
 8004c90:	d866      	bhi.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004c92:	a201      	add	r2, pc, #4	; (adr r2, 8004c98 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c98:	08004d75 	.word	0x08004d75
 8004c9c:	08004d61 	.word	0x08004d61
 8004ca0:	08004d61 	.word	0x08004d61
 8004ca4:	08004d61 	.word	0x08004d61
 8004ca8:	08004d61 	.word	0x08004d61
 8004cac:	08004d61 	.word	0x08004d61
 8004cb0:	08004d61 	.word	0x08004d61
 8004cb4:	08004d61 	.word	0x08004d61
 8004cb8:	08004d3d 	.word	0x08004d3d
 8004cbc:	08004d61 	.word	0x08004d61
 8004cc0:	08004d61 	.word	0x08004d61
 8004cc4:	08004d61 	.word	0x08004d61
 8004cc8:	08004d61 	.word	0x08004d61
 8004ccc:	08004d61 	.word	0x08004d61
 8004cd0:	08004d61 	.word	0x08004d61
 8004cd4:	08004d61 	.word	0x08004d61
 8004cd8:	08004d4f 	.word	0x08004d4f
 8004cdc:	08004d61 	.word	0x08004d61
 8004ce0:	08004d61 	.word	0x08004d61
 8004ce4:	08004d61 	.word	0x08004d61
 8004ce8:	08004d61 	.word	0x08004d61
 8004cec:	08004d61 	.word	0x08004d61
 8004cf0:	08004d61 	.word	0x08004d61
 8004cf4:	08004d61 	.word	0x08004d61
 8004cf8:	08004d75 	.word	0x08004d75
 8004cfc:	08004d61 	.word	0x08004d61
 8004d00:	08004d61 	.word	0x08004d61
 8004d04:	08004d61 	.word	0x08004d61
 8004d08:	08004d61 	.word	0x08004d61
 8004d0c:	08004d61 	.word	0x08004d61
 8004d10:	08004d61 	.word	0x08004d61
 8004d14:	08004d61 	.word	0x08004d61
 8004d18:	08004d75 	.word	0x08004d75
 8004d1c:	08004d61 	.word	0x08004d61
 8004d20:	08004d61 	.word	0x08004d61
 8004d24:	08004d61 	.word	0x08004d61
 8004d28:	08004d61 	.word	0x08004d61
 8004d2c:	08004d61 	.word	0x08004d61
 8004d30:	08004d61 	.word	0x08004d61
 8004d34:	08004d61 	.word	0x08004d61
 8004d38:	08004d75 	.word	0x08004d75
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	3304      	adds	r3, #4
 8004d40:	2101      	movs	r1, #1
 8004d42:	4618      	mov	r0, r3
 8004d44:	f001 fc1e 	bl	8006584 <RCCEx_PLL2_Config>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004d4c:	e013      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3324      	adds	r3, #36	; 0x24
 8004d52:	2101      	movs	r1, #1
 8004d54:	4618      	mov	r0, r3
 8004d56:	f001 fcc7 	bl	80066e8 <RCCEx_PLL3_Config>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004d5e:	e00a      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	75fb      	strb	r3, [r7, #23]
      break;
 8004d64:	e007      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004d66:	bf00      	nop
 8004d68:	58024400 	.word	0x58024400
 8004d6c:	58024800 	.word	0x58024800
 8004d70:	00ffffcf 	.word	0x00ffffcf
      break;
 8004d74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d76:	7dfb      	ldrb	r3, [r7, #23]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d109      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004d7c:	4b96      	ldr	r3, [pc, #600]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d80:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d88:	4993      	ldr	r1, [pc, #588]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	654b      	str	r3, [r1, #84]	; 0x54
 8004d8e:	e001      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d90:	7dfb      	ldrb	r3, [r7, #23]
 8004d92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d038      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004da4:	2b05      	cmp	r3, #5
 8004da6:	d821      	bhi.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004da8:	a201      	add	r2, pc, #4	; (adr r2, 8004db0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dae:	bf00      	nop
 8004db0:	08004df3 	.word	0x08004df3
 8004db4:	08004dc9 	.word	0x08004dc9
 8004db8:	08004ddb 	.word	0x08004ddb
 8004dbc:	08004df3 	.word	0x08004df3
 8004dc0:	08004df3 	.word	0x08004df3
 8004dc4:	08004df3 	.word	0x08004df3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	2101      	movs	r1, #1
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f001 fbd8 	bl	8006584 <RCCEx_PLL2_Config>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004dd8:	e00c      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3324      	adds	r3, #36	; 0x24
 8004dde:	2101      	movs	r1, #1
 8004de0:	4618      	mov	r0, r3
 8004de2:	f001 fc81 	bl	80066e8 <RCCEx_PLL3_Config>
 8004de6:	4603      	mov	r3, r0
 8004de8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004dea:	e003      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	75fb      	strb	r3, [r7, #23]
      break;
 8004df0:	e000      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004df2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004df4:	7dfb      	ldrb	r3, [r7, #23]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d109      	bne.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004dfa:	4b77      	ldr	r3, [pc, #476]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfe:	f023 0207 	bic.w	r2, r3, #7
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e06:	4974      	ldr	r1, [pc, #464]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	654b      	str	r3, [r1, #84]	; 0x54
 8004e0c:	e001      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e0e:	7dfb      	ldrb	r3, [r7, #23]
 8004e10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0304 	and.w	r3, r3, #4
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d03a      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e24:	2b05      	cmp	r3, #5
 8004e26:	d821      	bhi.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004e28:	a201      	add	r2, pc, #4	; (adr r2, 8004e30 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2e:	bf00      	nop
 8004e30:	08004e73 	.word	0x08004e73
 8004e34:	08004e49 	.word	0x08004e49
 8004e38:	08004e5b 	.word	0x08004e5b
 8004e3c:	08004e73 	.word	0x08004e73
 8004e40:	08004e73 	.word	0x08004e73
 8004e44:	08004e73 	.word	0x08004e73
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f001 fb98 	bl	8006584 <RCCEx_PLL2_Config>
 8004e54:	4603      	mov	r3, r0
 8004e56:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004e58:	e00c      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	3324      	adds	r3, #36	; 0x24
 8004e5e:	2101      	movs	r1, #1
 8004e60:	4618      	mov	r0, r3
 8004e62:	f001 fc41 	bl	80066e8 <RCCEx_PLL3_Config>
 8004e66:	4603      	mov	r3, r0
 8004e68:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004e6a:	e003      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e70:	e000      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004e72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e74:	7dfb      	ldrb	r3, [r7, #23]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10a      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e7a:	4b57      	ldr	r3, [pc, #348]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e7e:	f023 0207 	bic.w	r2, r3, #7
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e88:	4953      	ldr	r1, [pc, #332]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	658b      	str	r3, [r1, #88]	; 0x58
 8004e8e:	e001      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e90:	7dfb      	ldrb	r3, [r7, #23]
 8004e92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0320 	and.w	r3, r3, #32
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d04b      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004eaa:	d02e      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004eb0:	d828      	bhi.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb6:	d02a      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ebc:	d822      	bhi.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004ebe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ec2:	d026      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004ec4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ec8:	d81c      	bhi.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004eca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ece:	d010      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ed4:	d816      	bhi.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d01d      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004eda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ede:	d111      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f001 fb4c 	bl	8006584 <RCCEx_PLL2_Config>
 8004eec:	4603      	mov	r3, r0
 8004eee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004ef0:	e012      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	3324      	adds	r3, #36	; 0x24
 8004ef6:	2102      	movs	r1, #2
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f001 fbf5 	bl	80066e8 <RCCEx_PLL3_Config>
 8004efe:	4603      	mov	r3, r0
 8004f00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004f02:	e009      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	75fb      	strb	r3, [r7, #23]
      break;
 8004f08:	e006      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004f0a:	bf00      	nop
 8004f0c:	e004      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004f0e:	bf00      	nop
 8004f10:	e002      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004f12:	bf00      	nop
 8004f14:	e000      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004f16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f18:	7dfb      	ldrb	r3, [r7, #23]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10a      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f1e:	4b2e      	ldr	r3, [pc, #184]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f22:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f2c:	492a      	ldr	r1, [pc, #168]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	654b      	str	r3, [r1, #84]	; 0x54
 8004f32:	e001      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f34:	7dfb      	ldrb	r3, [r7, #23]
 8004f36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d04d      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f4a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004f4e:	d02e      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004f50:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004f54:	d828      	bhi.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f5a:	d02a      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f60:	d822      	bhi.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004f62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f66:	d026      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004f68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f6c:	d81c      	bhi.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f72:	d010      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004f74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f78:	d816      	bhi.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d01d      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f82:	d111      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3304      	adds	r3, #4
 8004f88:	2100      	movs	r1, #0
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f001 fafa 	bl	8006584 <RCCEx_PLL2_Config>
 8004f90:	4603      	mov	r3, r0
 8004f92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004f94:	e012      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	3324      	adds	r3, #36	; 0x24
 8004f9a:	2102      	movs	r1, #2
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f001 fba3 	bl	80066e8 <RCCEx_PLL3_Config>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004fa6:	e009      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	75fb      	strb	r3, [r7, #23]
      break;
 8004fac:	e006      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004fae:	bf00      	nop
 8004fb0:	e004      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004fb2:	bf00      	nop
 8004fb4:	e002      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004fb6:	bf00      	nop
 8004fb8:	e000      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004fba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fbc:	7dfb      	ldrb	r3, [r7, #23]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10c      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004fc2:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fd0:	4901      	ldr	r1, [pc, #4]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	658b      	str	r3, [r1, #88]	; 0x58
 8004fd6:	e003      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004fd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fdc:	7dfb      	ldrb	r3, [r7, #23]
 8004fde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d04b      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ff2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ff6:	d02e      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004ff8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004ffc:	d828      	bhi.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004ffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005002:	d02a      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005008:	d822      	bhi.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800500a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800500e:	d026      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005010:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005014:	d81c      	bhi.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005016:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800501a:	d010      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800501c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005020:	d816      	bhi.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005022:	2b00      	cmp	r3, #0
 8005024:	d01d      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800502a:	d111      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3304      	adds	r3, #4
 8005030:	2100      	movs	r1, #0
 8005032:	4618      	mov	r0, r3
 8005034:	f001 faa6 	bl	8006584 <RCCEx_PLL2_Config>
 8005038:	4603      	mov	r3, r0
 800503a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800503c:	e012      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	3324      	adds	r3, #36	; 0x24
 8005042:	2102      	movs	r1, #2
 8005044:	4618      	mov	r0, r3
 8005046:	f001 fb4f 	bl	80066e8 <RCCEx_PLL3_Config>
 800504a:	4603      	mov	r3, r0
 800504c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800504e:	e009      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	75fb      	strb	r3, [r7, #23]
      break;
 8005054:	e006      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005056:	bf00      	nop
 8005058:	e004      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800505a:	bf00      	nop
 800505c:	e002      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800505e:	bf00      	nop
 8005060:	e000      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005062:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005064:	7dfb      	ldrb	r3, [r7, #23]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10a      	bne.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800506a:	4b9d      	ldr	r3, [pc, #628]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800506c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005078:	4999      	ldr	r1, [pc, #612]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800507a:	4313      	orrs	r3, r2
 800507c:	658b      	str	r3, [r1, #88]	; 0x58
 800507e:	e001      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005080:	7dfb      	ldrb	r3, [r7, #23]
 8005082:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0308 	and.w	r3, r3, #8
 800508c:	2b00      	cmp	r3, #0
 800508e:	d01a      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800509a:	d10a      	bne.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3324      	adds	r3, #36	; 0x24
 80050a0:	2102      	movs	r1, #2
 80050a2:	4618      	mov	r0, r3
 80050a4:	f001 fb20 	bl	80066e8 <RCCEx_PLL3_Config>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80050b2:	4b8b      	ldr	r3, [pc, #556]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050c0:	4987      	ldr	r1, [pc, #540]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0310 	and.w	r3, r3, #16
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d01a      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050dc:	d10a      	bne.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3324      	adds	r3, #36	; 0x24
 80050e2:	2102      	movs	r1, #2
 80050e4:	4618      	mov	r0, r3
 80050e6:	f001 faff 	bl	80066e8 <RCCEx_PLL3_Config>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050f4:	4b7a      	ldr	r3, [pc, #488]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005102:	4977      	ldr	r1, [pc, #476]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005104:	4313      	orrs	r3, r2
 8005106:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d034      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800511a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800511e:	d01d      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005120:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005124:	d817      	bhi.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800512a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800512e:	d009      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005130:	e011      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3304      	adds	r3, #4
 8005136:	2100      	movs	r1, #0
 8005138:	4618      	mov	r0, r3
 800513a:	f001 fa23 	bl	8006584 <RCCEx_PLL2_Config>
 800513e:	4603      	mov	r3, r0
 8005140:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005142:	e00c      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	3324      	adds	r3, #36	; 0x24
 8005148:	2102      	movs	r1, #2
 800514a:	4618      	mov	r0, r3
 800514c:	f001 facc 	bl	80066e8 <RCCEx_PLL3_Config>
 8005150:	4603      	mov	r3, r0
 8005152:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005154:	e003      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	75fb      	strb	r3, [r7, #23]
      break;
 800515a:	e000      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800515c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800515e:	7dfb      	ldrb	r3, [r7, #23]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10a      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005164:	4b5e      	ldr	r3, [pc, #376]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005168:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005172:	495b      	ldr	r1, [pc, #364]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005174:	4313      	orrs	r3, r2
 8005176:	658b      	str	r3, [r1, #88]	; 0x58
 8005178:	e001      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800517a:	7dfb      	ldrb	r3, [r7, #23]
 800517c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d033      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005190:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005194:	d01c      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005196:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800519a:	d816      	bhi.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800519c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051a0:	d003      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80051a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051a6:	d007      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80051a8:	e00f      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051aa:	4b4d      	ldr	r3, [pc, #308]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	4a4c      	ldr	r2, [pc, #304]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80051b6:	e00c      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3324      	adds	r3, #36	; 0x24
 80051bc:	2101      	movs	r1, #1
 80051be:	4618      	mov	r0, r3
 80051c0:	f001 fa92 	bl	80066e8 <RCCEx_PLL3_Config>
 80051c4:	4603      	mov	r3, r0
 80051c6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80051c8:	e003      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	75fb      	strb	r3, [r7, #23]
      break;
 80051ce:	e000      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80051d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051d2:	7dfb      	ldrb	r3, [r7, #23]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10a      	bne.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051d8:	4b41      	ldr	r3, [pc, #260]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e6:	493e      	ldr	r1, [pc, #248]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	654b      	str	r3, [r1, #84]	; 0x54
 80051ec:	e001      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ee:	7dfb      	ldrb	r3, [r7, #23]
 80051f0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d029      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800520a:	d007      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800520c:	e00f      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800520e:	4b34      	ldr	r3, [pc, #208]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005212:	4a33      	ldr	r2, [pc, #204]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005218:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800521a:	e00b      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3304      	adds	r3, #4
 8005220:	2102      	movs	r1, #2
 8005222:	4618      	mov	r0, r3
 8005224:	f001 f9ae 	bl	8006584 <RCCEx_PLL2_Config>
 8005228:	4603      	mov	r3, r0
 800522a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800522c:	e002      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	75fb      	strb	r3, [r7, #23]
      break;
 8005232:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005234:	7dfb      	ldrb	r3, [r7, #23]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800523a:	4b29      	ldr	r3, [pc, #164]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800523c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800523e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005246:	4926      	ldr	r1, [pc, #152]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005248:	4313      	orrs	r3, r2
 800524a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800524c:	e001      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800524e:	7dfb      	ldrb	r3, [r7, #23]
 8005250:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	3324      	adds	r3, #36	; 0x24
 8005262:	2102      	movs	r1, #2
 8005264:	4618      	mov	r0, r3
 8005266:	f001 fa3f 	bl	80066e8 <RCCEx_PLL3_Config>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d033      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005284:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005288:	d017      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800528a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800528e:	d811      	bhi.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005294:	d013      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800529a:	d80b      	bhi.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800529c:	2b00      	cmp	r3, #0
 800529e:	d010      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80052a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052a4:	d106      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052a6:	4b0e      	ldr	r3, [pc, #56]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052aa:	4a0d      	ldr	r2, [pc, #52]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80052b2:	e007      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	75fb      	strb	r3, [r7, #23]
      break;
 80052b8:	e004      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80052ba:	bf00      	nop
 80052bc:	e002      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80052be:	bf00      	nop
 80052c0:	e000      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80052c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052c4:	7dfb      	ldrb	r3, [r7, #23]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10c      	bne.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052ca:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052d6:	4902      	ldr	r1, [pc, #8]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	654b      	str	r3, [r1, #84]	; 0x54
 80052dc:	e004      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80052de:	bf00      	nop
 80052e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052e4:	7dfb      	ldrb	r3, [r7, #23]
 80052e6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d008      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052f4:	4b31      	ldr	r3, [pc, #196]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80052f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005300:	492e      	ldr	r1, [pc, #184]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005302:	4313      	orrs	r3, r2
 8005304:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d009      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005312:	4b2a      	ldr	r3, [pc, #168]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005320:	4926      	ldr	r1, [pc, #152]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005322:	4313      	orrs	r3, r2
 8005324:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d008      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005332:	4b22      	ldr	r3, [pc, #136]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005336:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800533e:	491f      	ldr	r1, [pc, #124]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005340:	4313      	orrs	r3, r2
 8005342:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00d      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005350:	4b1a      	ldr	r3, [pc, #104]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	4a19      	ldr	r2, [pc, #100]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005356:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800535a:	6113      	str	r3, [r2, #16]
 800535c:	4b17      	ldr	r3, [pc, #92]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800535e:	691a      	ldr	r2, [r3, #16]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005366:	4915      	ldr	r1, [pc, #84]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005368:	4313      	orrs	r3, r2
 800536a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	da08      	bge.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005374:	4b11      	ldr	r3, [pc, #68]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005378:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005380:	490e      	ldr	r1, [pc, #56]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005382:	4313      	orrs	r3, r2
 8005384:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d009      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005392:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005396:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a0:	4906      	ldr	r1, [pc, #24]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80053a6:	7dbb      	ldrb	r3, [r7, #22]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	e000      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	58024400 	.word	0x58024400

080053c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b090      	sub	sp, #64	; 0x40
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ce:	f040 8095 	bne.w	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80053d2:	4b97      	ldr	r3, [pc, #604]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80053d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80053dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053de:	2b04      	cmp	r3, #4
 80053e0:	f200 8088 	bhi.w	80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80053e4:	a201      	add	r2, pc, #4	; (adr r2, 80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80053e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ea:	bf00      	nop
 80053ec:	08005401 	.word	0x08005401
 80053f0:	08005429 	.word	0x08005429
 80053f4:	08005451 	.word	0x08005451
 80053f8:	080054ed 	.word	0x080054ed
 80053fc:	08005479 	.word	0x08005479
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005400:	4b8b      	ldr	r3, [pc, #556]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005408:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800540c:	d108      	bne.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800540e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005412:	4618      	mov	r0, r3
 8005414:	f000 ff64 	bl	80062e0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800541c:	f000 bc94 	b.w	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005420:	2300      	movs	r3, #0
 8005422:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005424:	f000 bc90 	b.w	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005428:	4b81      	ldr	r3, [pc, #516]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005430:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005434:	d108      	bne.n	8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005436:	f107 0318 	add.w	r3, r7, #24
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fca8 	bl	8005d90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005444:	f000 bc80 	b.w	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005448:	2300      	movs	r3, #0
 800544a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800544c:	f000 bc7c 	b.w	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005450:	4b77      	ldr	r3, [pc, #476]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800545c:	d108      	bne.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800545e:	f107 030c 	add.w	r3, r7, #12
 8005462:	4618      	mov	r0, r3
 8005464:	f000 fde8 	bl	8006038 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800546c:	f000 bc6c 	b.w	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005470:	2300      	movs	r3, #0
 8005472:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005474:	f000 bc68 	b.w	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005478:	4b6d      	ldr	r3, [pc, #436]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800547a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800547c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005480:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005482:	4b6b      	ldr	r3, [pc, #428]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0304 	and.w	r3, r3, #4
 800548a:	2b04      	cmp	r3, #4
 800548c:	d10c      	bne.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800548e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005490:	2b00      	cmp	r3, #0
 8005492:	d109      	bne.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005494:	4b66      	ldr	r3, [pc, #408]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	08db      	lsrs	r3, r3, #3
 800549a:	f003 0303 	and.w	r3, r3, #3
 800549e:	4a65      	ldr	r2, [pc, #404]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80054a0:	fa22 f303 	lsr.w	r3, r2, r3
 80054a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054a6:	e01f      	b.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80054a8:	4b61      	ldr	r3, [pc, #388]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b4:	d106      	bne.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80054b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054bc:	d102      	bne.n	80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80054be:	4b5e      	ldr	r3, [pc, #376]	; (8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054c2:	e011      	b.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80054c4:	4b5a      	ldr	r3, [pc, #360]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054d0:	d106      	bne.n	80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80054d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054d8:	d102      	bne.n	80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80054da:	4b58      	ldr	r3, [pc, #352]	; (800563c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80054dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054de:	e003      	b.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80054e4:	f000 bc30 	b.w	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80054e8:	f000 bc2e 	b.w	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80054ec:	4b54      	ldr	r3, [pc, #336]	; (8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80054ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054f0:	f000 bc2a 	b.w	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80054f4:	2300      	movs	r3, #0
 80054f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054f8:	f000 bc26 	b.w	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005502:	f040 809f 	bne.w	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005506:	4b4a      	ldr	r3, [pc, #296]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800550a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800550e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005516:	d04d      	beq.n	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800551e:	f200 8084 	bhi.w	800562a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005524:	2bc0      	cmp	r3, #192	; 0xc0
 8005526:	d07d      	beq.n	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552a:	2bc0      	cmp	r3, #192	; 0xc0
 800552c:	d87d      	bhi.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800552e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005530:	2b80      	cmp	r3, #128	; 0x80
 8005532:	d02d      	beq.n	8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8005534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005536:	2b80      	cmp	r3, #128	; 0x80
 8005538:	d877      	bhi.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8005540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005542:	2b40      	cmp	r3, #64	; 0x40
 8005544:	d012      	beq.n	800556c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8005546:	e070      	b.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005548:	4b39      	ldr	r3, [pc, #228]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005550:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005554:	d107      	bne.n	8005566 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800555a:	4618      	mov	r0, r3
 800555c:	f000 fec0 	bl	80062e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005564:	e3f0      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005566:	2300      	movs	r3, #0
 8005568:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800556a:	e3ed      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800556c:	4b30      	ldr	r3, [pc, #192]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005574:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005578:	d107      	bne.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800557a:	f107 0318 	add.w	r3, r7, #24
 800557e:	4618      	mov	r0, r3
 8005580:	f000 fc06 	bl	8005d90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005588:	e3de      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800558a:	2300      	movs	r3, #0
 800558c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800558e:	e3db      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005590:	4b27      	ldr	r3, [pc, #156]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800559c:	d107      	bne.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800559e:	f107 030c 	add.w	r3, r7, #12
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 fd48 	bl	8006038 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80055ac:	e3cc      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80055ae:	2300      	movs	r3, #0
 80055b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055b2:	e3c9      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80055b4:	4b1e      	ldr	r3, [pc, #120]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80055b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80055bc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80055be:	4b1c      	ldr	r3, [pc, #112]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0304 	and.w	r3, r3, #4
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	d10c      	bne.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80055ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d109      	bne.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055d0:	4b17      	ldr	r3, [pc, #92]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	08db      	lsrs	r3, r3, #3
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	4a16      	ldr	r2, [pc, #88]	; (8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80055dc:	fa22 f303 	lsr.w	r3, r2, r3
 80055e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055e2:	e01e      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80055e4:	4b12      	ldr	r3, [pc, #72]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055f0:	d106      	bne.n	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80055f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055f8:	d102      	bne.n	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80055fa:	4b0f      	ldr	r3, [pc, #60]	; (8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80055fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055fe:	e010      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005600:	4b0b      	ldr	r3, [pc, #44]	; (8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005608:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800560c:	d106      	bne.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800560e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005614:	d102      	bne.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005616:	4b09      	ldr	r3, [pc, #36]	; (800563c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005618:	63fb      	str	r3, [r7, #60]	; 0x3c
 800561a:	e002      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800561c:	2300      	movs	r3, #0
 800561e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005620:	e392      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005622:	e391      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005624:	4b06      	ldr	r3, [pc, #24]	; (8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005626:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005628:	e38e      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800562a:	2300      	movs	r3, #0
 800562c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800562e:	e38b      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005630:	58024400 	.word	0x58024400
 8005634:	03d09000 	.word	0x03d09000
 8005638:	003d0900 	.word	0x003d0900
 800563c:	017d7840 	.word	0x017d7840
 8005640:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800564a:	f040 809c 	bne.w	8005786 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800564e:	4b9d      	ldr	r3, [pc, #628]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005652:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005656:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800565e:	d054      	beq.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8005660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005662:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005666:	f200 808b 	bhi.w	8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800566a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005670:	f000 8083 	beq.w	800577a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8005674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005676:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800567a:	f200 8081 	bhi.w	8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005684:	d02f      	beq.n	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800568c:	d878      	bhi.n	8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	2b00      	cmp	r3, #0
 8005692:	d004      	beq.n	800569e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8005694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005696:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800569a:	d012      	beq.n	80056c2 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800569c:	e070      	b.n	8005780 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800569e:	4b89      	ldr	r3, [pc, #548]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056aa:	d107      	bne.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 fe15 	bl	80062e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80056b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80056ba:	e345      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80056bc:	2300      	movs	r3, #0
 80056be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056c0:	e342      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80056c2:	4b80      	ldr	r3, [pc, #512]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056ce:	d107      	bne.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056d0:	f107 0318 	add.w	r3, r7, #24
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 fb5b 	bl	8005d90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80056de:	e333      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80056e0:	2300      	movs	r3, #0
 80056e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056e4:	e330      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80056e6:	4b77      	ldr	r3, [pc, #476]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056f2:	d107      	bne.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056f4:	f107 030c 	add.w	r3, r7, #12
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 fc9d 	bl	8006038 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005702:	e321      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005704:	2300      	movs	r3, #0
 8005706:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005708:	e31e      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800570a:	4b6e      	ldr	r3, [pc, #440]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800570c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800570e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005712:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005714:	4b6b      	ldr	r3, [pc, #428]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0304 	and.w	r3, r3, #4
 800571c:	2b04      	cmp	r3, #4
 800571e:	d10c      	bne.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8005720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005722:	2b00      	cmp	r3, #0
 8005724:	d109      	bne.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005726:	4b67      	ldr	r3, [pc, #412]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	08db      	lsrs	r3, r3, #3
 800572c:	f003 0303 	and.w	r3, r3, #3
 8005730:	4a65      	ldr	r2, [pc, #404]	; (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005732:	fa22 f303 	lsr.w	r3, r2, r3
 8005736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005738:	e01e      	b.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800573a:	4b62      	ldr	r3, [pc, #392]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005746:	d106      	bne.n	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800574a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800574e:	d102      	bne.n	8005756 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005750:	4b5e      	ldr	r3, [pc, #376]	; (80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005754:	e010      	b.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005756:	4b5b      	ldr	r3, [pc, #364]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800575e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005762:	d106      	bne.n	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800576a:	d102      	bne.n	8005772 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800576c:	4b58      	ldr	r3, [pc, #352]	; (80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800576e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005770:	e002      	b.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005772:	2300      	movs	r3, #0
 8005774:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005776:	e2e7      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005778:	e2e6      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800577a:	4b56      	ldr	r3, [pc, #344]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800577c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800577e:	e2e3      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8005780:	2300      	movs	r3, #0
 8005782:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005784:	e2e0      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800578c:	f040 80a7 	bne.w	80058de <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005790:	4b4c      	ldr	r3, [pc, #304]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005794:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005798:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800579a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057a0:	d055      	beq.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80057a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057a8:	f200 8096 	bhi.w	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80057ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80057b2:	f000 8084 	beq.w	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80057b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80057bc:	f200 808c 	bhi.w	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80057c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057c6:	d030      	beq.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80057c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057ce:	f200 8083 	bhi.w	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d004      	beq.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057de:	d012      	beq.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80057e0:	e07a      	b.n	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80057e2:	4b38      	ldr	r3, [pc, #224]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057ee:	d107      	bne.n	8005800 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 fd73 	bl	80062e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80057fe:	e2a3      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005800:	2300      	movs	r3, #0
 8005802:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005804:	e2a0      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005806:	4b2f      	ldr	r3, [pc, #188]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800580e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005812:	d107      	bne.n	8005824 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005814:	f107 0318 	add.w	r3, r7, #24
 8005818:	4618      	mov	r0, r3
 800581a:	f000 fab9 	bl	8005d90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8005822:	e291      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005824:	2300      	movs	r3, #0
 8005826:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005828:	e28e      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800582a:	4b26      	ldr	r3, [pc, #152]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005832:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005836:	d107      	bne.n	8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005838:	f107 030c 	add.w	r3, r7, #12
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fbfb 	bl	8006038 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005846:	e27f      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005848:	2300      	movs	r3, #0
 800584a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800584c:	e27c      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800584e:	4b1d      	ldr	r3, [pc, #116]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005852:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005856:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005858:	4b1a      	ldr	r3, [pc, #104]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0304 	and.w	r3, r3, #4
 8005860:	2b04      	cmp	r3, #4
 8005862:	d10c      	bne.n	800587e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8005864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005866:	2b00      	cmp	r3, #0
 8005868:	d109      	bne.n	800587e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800586a:	4b16      	ldr	r3, [pc, #88]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	08db      	lsrs	r3, r3, #3
 8005870:	f003 0303 	and.w	r3, r3, #3
 8005874:	4a14      	ldr	r2, [pc, #80]	; (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005876:	fa22 f303 	lsr.w	r3, r2, r3
 800587a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800587c:	e01e      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800587e:	4b11      	ldr	r3, [pc, #68]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800588a:	d106      	bne.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800588c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005892:	d102      	bne.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005894:	4b0d      	ldr	r3, [pc, #52]	; (80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005898:	e010      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800589a:	4b0a      	ldr	r3, [pc, #40]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058a6:	d106      	bne.n	80058b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80058a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058ae:	d102      	bne.n	80058b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80058b0:	4b07      	ldr	r3, [pc, #28]	; (80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80058b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058b4:	e002      	b.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80058b6:	2300      	movs	r3, #0
 80058b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80058ba:	e245      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80058bc:	e244      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80058be:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80058c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058c2:	e241      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80058c4:	58024400 	.word	0x58024400
 80058c8:	03d09000 	.word	0x03d09000
 80058cc:	003d0900 	.word	0x003d0900
 80058d0:	017d7840 	.word	0x017d7840
 80058d4:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 80058d8:	2300      	movs	r3, #0
 80058da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058dc:	e234      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058e4:	f040 809c 	bne.w	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80058e8:	4b9b      	ldr	r3, [pc, #620]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80058ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ec:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80058f0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80058f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058f8:	d054      	beq.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 80058fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005900:	f200 808b 	bhi.w	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8005904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005906:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800590a:	f000 8083 	beq.w	8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800590e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005910:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005914:	f200 8081 	bhi.w	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8005918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800591e:	d02f      	beq.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8005920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005926:	d878      	bhi.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8005928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592a:	2b00      	cmp	r3, #0
 800592c:	d004      	beq.n	8005938 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800592e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005934:	d012      	beq.n	800595c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8005936:	e070      	b.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005938:	4b87      	ldr	r3, [pc, #540]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005940:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005944:	d107      	bne.n	8005956 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800594a:	4618      	mov	r0, r3
 800594c:	f000 fcc8 	bl	80062e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005952:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005954:	e1f8      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005956:	2300      	movs	r3, #0
 8005958:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800595a:	e1f5      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800595c:	4b7e      	ldr	r3, [pc, #504]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005964:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005968:	d107      	bne.n	800597a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800596a:	f107 0318 	add.w	r3, r7, #24
 800596e:	4618      	mov	r0, r3
 8005970:	f000 fa0e 	bl	8005d90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005978:	e1e6      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800597a:	2300      	movs	r3, #0
 800597c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800597e:	e1e3      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005980:	4b75      	ldr	r3, [pc, #468]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800598c:	d107      	bne.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800598e:	f107 030c 	add.w	r3, r7, #12
 8005992:	4618      	mov	r0, r3
 8005994:	f000 fb50 	bl	8006038 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800599c:	e1d4      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800599e:	2300      	movs	r3, #0
 80059a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059a2:	e1d1      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80059a4:	4b6c      	ldr	r3, [pc, #432]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80059a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059ac:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80059ae:	4b6a      	ldr	r3, [pc, #424]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0304 	and.w	r3, r3, #4
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	d10c      	bne.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80059ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d109      	bne.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80059c0:	4b65      	ldr	r3, [pc, #404]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	08db      	lsrs	r3, r3, #3
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	4a64      	ldr	r2, [pc, #400]	; (8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80059cc:	fa22 f303 	lsr.w	r3, r2, r3
 80059d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059d2:	e01e      	b.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80059d4:	4b60      	ldr	r3, [pc, #384]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059e0:	d106      	bne.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80059e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059e8:	d102      	bne.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80059ea:	4b5d      	ldr	r3, [pc, #372]	; (8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80059ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059ee:	e010      	b.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80059f0:	4b59      	ldr	r3, [pc, #356]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059fc:	d106      	bne.n	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80059fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a04:	d102      	bne.n	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005a06:	4b57      	ldr	r3, [pc, #348]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005a08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a0a:	e002      	b.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005a10:	e19a      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005a12:	e199      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005a14:	4b54      	ldr	r3, [pc, #336]	; (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005a16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a18:	e196      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a1e:	e193      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005a26:	d173      	bne.n	8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005a28:	4b4b      	ldr	r3, [pc, #300]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a30:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a38:	d02f      	beq.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8005a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a40:	d863      	bhi.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8005a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d004      	beq.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8005a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a4e:	d012      	beq.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8005a50:	e05b      	b.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a52:	4b41      	ldr	r3, [pc, #260]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a5e:	d107      	bne.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a60:	f107 0318 	add.w	r3, r7, #24
 8005a64:	4618      	mov	r0, r3
 8005a66:	f000 f993 	bl	8005d90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005a6e:	e16b      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005a70:	2300      	movs	r3, #0
 8005a72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a74:	e168      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a76:	4b38      	ldr	r3, [pc, #224]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a82:	d107      	bne.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a84:	f107 030c 	add.w	r3, r7, #12
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f000 fad5 	bl	8006038 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005a92:	e159      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a98:	e156      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005a9a:	4b2f      	ldr	r3, [pc, #188]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005aa2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005aa4:	4b2c      	ldr	r3, [pc, #176]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b04      	cmp	r3, #4
 8005aae:	d10c      	bne.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8005ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d109      	bne.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ab6:	4b28      	ldr	r3, [pc, #160]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	08db      	lsrs	r3, r3, #3
 8005abc:	f003 0303 	and.w	r3, r3, #3
 8005ac0:	4a26      	ldr	r2, [pc, #152]	; (8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8005ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ac8:	e01e      	b.n	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005aca:	4b23      	ldr	r3, [pc, #140]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ad6:	d106      	bne.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8005ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ada:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ade:	d102      	bne.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005ae0:	4b1f      	ldr	r3, [pc, #124]	; (8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8005ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ae4:	e010      	b.n	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ae6:	4b1c      	ldr	r3, [pc, #112]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005af2:	d106      	bne.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8005af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005afa:	d102      	bne.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005afc:	4b19      	ldr	r3, [pc, #100]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005afe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b00:	e002      	b.n	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005b02:	2300      	movs	r3, #0
 8005b04:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005b06:	e11f      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005b08:	e11e      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b0e:	e11b      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b16:	d13e      	bne.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005b18:	4b0f      	ldr	r3, [pc, #60]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b20:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d004      	beq.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8005b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b2e:	d01d      	beq.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005b30:	e02e      	b.n	8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b32:	4b09      	ldr	r3, [pc, #36]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b3e:	d107      	bne.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 fbcb 	bl	80062e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005b4e:	e0fb      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b54:	e0f8      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005b56:	bf00      	nop
 8005b58:	58024400 	.word	0x58024400
 8005b5c:	03d09000 	.word	0x03d09000
 8005b60:	003d0900 	.word	0x003d0900
 8005b64:	017d7840 	.word	0x017d7840
 8005b68:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b6c:	4b79      	ldr	r3, [pc, #484]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b78:	d107      	bne.n	8005b8a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b7a:	f107 0318 	add.w	r3, r7, #24
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 f906 	bl	8005d90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005b88:	e0de      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b8e:	e0db      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8005b90:	2300      	movs	r3, #0
 8005b92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b94:	e0d8      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b9c:	f040 8085 	bne.w	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005ba0:	4b6c      	ldr	r3, [pc, #432]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005ba8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bb0:	d06b      	beq.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bb8:	d874      	bhi.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc0:	d056      	beq.n	8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc8:	d86c      	bhi.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bcc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bd0:	d03b      	beq.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8005bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bd8:	d864      	bhi.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005be0:	d021      	beq.n	8005c26 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8005be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005be8:	d85c      	bhi.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d004      	beq.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bf6:	d004      	beq.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8005bf8:	e054      	b.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005bfa:	f000 f8b3 	bl	8005d64 <HAL_RCCEx_GetD3PCLK1Freq>
 8005bfe:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005c00:	e0a2      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c02:	4b54      	ldr	r3, [pc, #336]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c0e:	d107      	bne.n	8005c20 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c10:	f107 0318 	add.w	r3, r7, #24
 8005c14:	4618      	mov	r0, r3
 8005c16:	f000 f8bb 	bl	8005d90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005c1e:	e093      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005c20:	2300      	movs	r3, #0
 8005c22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c24:	e090      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c26:	4b4b      	ldr	r3, [pc, #300]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c32:	d107      	bne.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c34:	f107 030c 	add.w	r3, r7, #12
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 f9fd 	bl	8006038 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005c42:	e081      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005c44:	2300      	movs	r3, #0
 8005c46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c48:	e07e      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c4a:	4b42      	ldr	r3, [pc, #264]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0304 	and.w	r3, r3, #4
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d109      	bne.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c56:	4b3f      	ldr	r3, [pc, #252]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	08db      	lsrs	r3, r3, #3
 8005c5c:	f003 0303 	and.w	r3, r3, #3
 8005c60:	4a3d      	ldr	r2, [pc, #244]	; (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8005c62:	fa22 f303 	lsr.w	r3, r2, r3
 8005c66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005c68:	e06e      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c6e:	e06b      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005c70:	4b38      	ldr	r3, [pc, #224]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c7c:	d102      	bne.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8005c7e:	4b37      	ldr	r3, [pc, #220]	; (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005c80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c82:	e061      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005c84:	2300      	movs	r3, #0
 8005c86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c88:	e05e      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c8a:	4b32      	ldr	r3, [pc, #200]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c96:	d102      	bne.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8005c98:	4b31      	ldr	r3, [pc, #196]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005c9c:	e054      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ca2:	e051      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ca8:	e04e      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cb0:	d148      	bne.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005cb2:	4b28      	ldr	r3, [pc, #160]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005cba:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cc2:	d02a      	beq.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8005cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cca:	d838      	bhi.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8005ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d004      	beq.n	8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8005cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cd8:	d00d      	beq.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8005cda:	e030      	b.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005cdc:	4b1d      	ldr	r3, [pc, #116]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ce8:	d102      	bne.n	8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8005cea:	4b1d      	ldr	r3, [pc, #116]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005cec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005cee:	e02b      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cf4:	e028      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005cf6:	4b17      	ldr	r3, [pc, #92]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d02:	d107      	bne.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 fae9 	bl	80062e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d10:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005d12:	e019      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005d14:	2300      	movs	r3, #0
 8005d16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d18:	e016      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d1a:	4b0e      	ldr	r3, [pc, #56]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d26:	d107      	bne.n	8005d38 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d28:	f107 0318 	add.w	r3, r7, #24
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 f82f 	bl	8005d90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005d36:	e007      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d3c:	e004      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d42:	e001      	b.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8005d44:	2300      	movs	r3, #0
 8005d46:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3740      	adds	r7, #64	; 0x40
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	58024400 	.word	0x58024400
 8005d58:	03d09000 	.word	0x03d09000
 8005d5c:	003d0900 	.word	0x003d0900
 8005d60:	017d7840 	.word	0x017d7840

08005d64 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005d68:	f7fe fb88 	bl	800447c <HAL_RCC_GetHCLKFreq>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	4b06      	ldr	r3, [pc, #24]	; (8005d88 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	091b      	lsrs	r3, r3, #4
 8005d74:	f003 0307 	and.w	r3, r3, #7
 8005d78:	4904      	ldr	r1, [pc, #16]	; (8005d8c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005d7a:	5ccb      	ldrb	r3, [r1, r3]
 8005d7c:	f003 031f 	and.w	r3, r3, #31
 8005d80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	58024400 	.word	0x58024400
 8005d8c:	0800a81c 	.word	0x0800a81c

08005d90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b089      	sub	sp, #36	; 0x24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d98:	4ba1      	ldr	r3, [pc, #644]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9c:	f003 0303 	and.w	r3, r3, #3
 8005da0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005da2:	4b9f      	ldr	r3, [pc, #636]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da6:	0b1b      	lsrs	r3, r3, #12
 8005da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005dae:	4b9c      	ldr	r3, [pc, #624]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db2:	091b      	lsrs	r3, r3, #4
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005dba:	4b99      	ldr	r3, [pc, #612]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dbe:	08db      	lsrs	r3, r3, #3
 8005dc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	fb02 f303 	mul.w	r3, r2, r3
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 8111 	beq.w	8006000 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	f000 8083 	beq.w	8005eec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	f200 80a1 	bhi.w	8005f30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d003      	beq.n	8005dfc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d056      	beq.n	8005ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005dfa:	e099      	b.n	8005f30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dfc:	4b88      	ldr	r3, [pc, #544]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0320 	and.w	r3, r3, #32
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d02d      	beq.n	8005e64 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e08:	4b85      	ldr	r3, [pc, #532]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	08db      	lsrs	r3, r3, #3
 8005e0e:	f003 0303 	and.w	r3, r3, #3
 8005e12:	4a84      	ldr	r2, [pc, #528]	; (8006024 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005e14:	fa22 f303 	lsr.w	r3, r2, r3
 8005e18:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	ee07 3a90 	vmov	s15, r3
 8005e20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e32:	4b7b      	ldr	r3, [pc, #492]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e3a:	ee07 3a90 	vmov	s15, r3
 8005e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e42:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e46:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006028 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e5e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005e62:	e087      	b.n	8005f74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	ee07 3a90 	vmov	s15, r3
 8005e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e6e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800602c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e76:	4b6a      	ldr	r3, [pc, #424]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e7e:	ee07 3a90 	vmov	s15, r3
 8005e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e86:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e8a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006028 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ea6:	e065      	b.n	8005f74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	ee07 3a90 	vmov	s15, r3
 8005eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eb2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006030 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eba:	4b59      	ldr	r3, [pc, #356]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ec2:	ee07 3a90 	vmov	s15, r3
 8005ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eca:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ece:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006028 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ee6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005eea:	e043      	b.n	8005f74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	ee07 3a90 	vmov	s15, r3
 8005ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006034 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005efe:	4b48      	ldr	r3, [pc, #288]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f06:	ee07 3a90 	vmov	s15, r3
 8005f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006028 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f2e:	e021      	b.n	8005f74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	ee07 3a90 	vmov	s15, r3
 8005f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006030 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f42:	4b37      	ldr	r3, [pc, #220]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f4a:	ee07 3a90 	vmov	s15, r3
 8005f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f52:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006028 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f72:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005f74:	4b2a      	ldr	r3, [pc, #168]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f78:	0a5b      	lsrs	r3, r3, #9
 8005f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f7e:	ee07 3a90 	vmov	s15, r3
 8005f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f9a:	ee17 2a90 	vmov	r2, s15
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005fa2:	4b1f      	ldr	r3, [pc, #124]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa6:	0c1b      	lsrs	r3, r3, #16
 8005fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fac:	ee07 3a90 	vmov	s15, r3
 8005fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fc8:	ee17 2a90 	vmov	r2, s15
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005fd0:	4b13      	ldr	r3, [pc, #76]	; (8006020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd4:	0e1b      	lsrs	r3, r3, #24
 8005fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fda:	ee07 3a90 	vmov	s15, r3
 8005fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fe6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fea:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ff6:	ee17 2a90 	vmov	r2, s15
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005ffe:	e008      	b.n	8006012 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	609a      	str	r2, [r3, #8]
}
 8006012:	bf00      	nop
 8006014:	3724      	adds	r7, #36	; 0x24
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	58024400 	.word	0x58024400
 8006024:	03d09000 	.word	0x03d09000
 8006028:	46000000 	.word	0x46000000
 800602c:	4c742400 	.word	0x4c742400
 8006030:	4a742400 	.word	0x4a742400
 8006034:	4bbebc20 	.word	0x4bbebc20

08006038 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006038:	b480      	push	{r7}
 800603a:	b089      	sub	sp, #36	; 0x24
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006040:	4ba1      	ldr	r3, [pc, #644]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006044:	f003 0303 	and.w	r3, r3, #3
 8006048:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800604a:	4b9f      	ldr	r3, [pc, #636]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800604c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604e:	0d1b      	lsrs	r3, r3, #20
 8006050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006054:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006056:	4b9c      	ldr	r3, [pc, #624]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605a:	0a1b      	lsrs	r3, r3, #8
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006062:	4b99      	ldr	r3, [pc, #612]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006066:	08db      	lsrs	r3, r3, #3
 8006068:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	fb02 f303 	mul.w	r3, r2, r3
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 8111 	beq.w	80062a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	2b02      	cmp	r3, #2
 800608a:	f000 8083 	beq.w	8006194 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	2b02      	cmp	r3, #2
 8006092:	f200 80a1 	bhi.w	80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d003      	beq.n	80060a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d056      	beq.n	8006150 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80060a2:	e099      	b.n	80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060a4:	4b88      	ldr	r3, [pc, #544]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0320 	and.w	r3, r3, #32
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d02d      	beq.n	800610c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80060b0:	4b85      	ldr	r3, [pc, #532]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	08db      	lsrs	r3, r3, #3
 80060b6:	f003 0303 	and.w	r3, r3, #3
 80060ba:	4a84      	ldr	r2, [pc, #528]	; (80062cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80060bc:	fa22 f303 	lsr.w	r3, r2, r3
 80060c0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	ee07 3a90 	vmov	s15, r3
 80060c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060da:	4b7b      	ldr	r3, [pc, #492]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e2:	ee07 3a90 	vmov	s15, r3
 80060e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80060ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80062d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006106:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800610a:	e087      	b.n	800621c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	ee07 3a90 	vmov	s15, r3
 8006112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006116:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80062d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800611a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800611e:	4b6a      	ldr	r3, [pc, #424]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006126:	ee07 3a90 	vmov	s15, r3
 800612a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800612e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006132:	eddf 5a67 	vldr	s11, [pc, #412]	; 80062d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800613a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800613e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800614a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800614e:	e065      	b.n	800621c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	ee07 3a90 	vmov	s15, r3
 8006156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800615a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80062d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800615e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006162:	4b59      	ldr	r3, [pc, #356]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800616a:	ee07 3a90 	vmov	s15, r3
 800616e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006172:	ed97 6a03 	vldr	s12, [r7, #12]
 8006176:	eddf 5a56 	vldr	s11, [pc, #344]	; 80062d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800617a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800617e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800618a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800618e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006192:	e043      	b.n	800621c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	ee07 3a90 	vmov	s15, r3
 800619a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800619e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80062dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80061a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061a6:	4b48      	ldr	r3, [pc, #288]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ae:	ee07 3a90 	vmov	s15, r3
 80061b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80061ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80062d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061d6:	e021      	b.n	800621c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	ee07 3a90 	vmov	s15, r3
 80061de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80062d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80061e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ea:	4b37      	ldr	r3, [pc, #220]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061f2:	ee07 3a90 	vmov	s15, r3
 80061f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80061fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80062d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800620a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800620e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006216:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800621a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800621c:	4b2a      	ldr	r3, [pc, #168]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800621e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006220:	0a5b      	lsrs	r3, r3, #9
 8006222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006226:	ee07 3a90 	vmov	s15, r3
 800622a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800622e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006232:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006236:	edd7 6a07 	vldr	s13, [r7, #28]
 800623a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800623e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006242:	ee17 2a90 	vmov	r2, s15
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800624a:	4b1f      	ldr	r3, [pc, #124]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800624c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624e:	0c1b      	lsrs	r3, r3, #16
 8006250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006254:	ee07 3a90 	vmov	s15, r3
 8006258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800625c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006260:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006264:	edd7 6a07 	vldr	s13, [r7, #28]
 8006268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800626c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006270:	ee17 2a90 	vmov	r2, s15
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006278:	4b13      	ldr	r3, [pc, #76]	; (80062c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800627a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627c:	0e1b      	lsrs	r3, r3, #24
 800627e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006282:	ee07 3a90 	vmov	s15, r3
 8006286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800628a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800628e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006292:	edd7 6a07 	vldr	s13, [r7, #28]
 8006296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800629a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800629e:	ee17 2a90 	vmov	r2, s15
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80062a6:	e008      	b.n	80062ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	609a      	str	r2, [r3, #8]
}
 80062ba:	bf00      	nop
 80062bc:	3724      	adds	r7, #36	; 0x24
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	58024400 	.word	0x58024400
 80062cc:	03d09000 	.word	0x03d09000
 80062d0:	46000000 	.word	0x46000000
 80062d4:	4c742400 	.word	0x4c742400
 80062d8:	4a742400 	.word	0x4a742400
 80062dc:	4bbebc20 	.word	0x4bbebc20

080062e0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b089      	sub	sp, #36	; 0x24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062e8:	4ba0      	ldr	r3, [pc, #640]	; (800656c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ec:	f003 0303 	and.w	r3, r3, #3
 80062f0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80062f2:	4b9e      	ldr	r3, [pc, #632]	; (800656c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f6:	091b      	lsrs	r3, r3, #4
 80062f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062fc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80062fe:	4b9b      	ldr	r3, [pc, #620]	; (800656c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006308:	4b98      	ldr	r3, [pc, #608]	; (800656c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800630a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800630c:	08db      	lsrs	r3, r3, #3
 800630e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	fb02 f303 	mul.w	r3, r2, r3
 8006318:	ee07 3a90 	vmov	s15, r3
 800631c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006320:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	2b00      	cmp	r3, #0
 8006328:	f000 8111 	beq.w	800654e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	2b02      	cmp	r3, #2
 8006330:	f000 8083 	beq.w	800643a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	2b02      	cmp	r3, #2
 8006338:	f200 80a1 	bhi.w	800647e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d056      	beq.n	80063f6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006348:	e099      	b.n	800647e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800634a:	4b88      	ldr	r3, [pc, #544]	; (800656c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0320 	and.w	r3, r3, #32
 8006352:	2b00      	cmp	r3, #0
 8006354:	d02d      	beq.n	80063b2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006356:	4b85      	ldr	r3, [pc, #532]	; (800656c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	08db      	lsrs	r3, r3, #3
 800635c:	f003 0303 	and.w	r3, r3, #3
 8006360:	4a83      	ldr	r2, [pc, #524]	; (8006570 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006362:	fa22 f303 	lsr.w	r3, r2, r3
 8006366:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	ee07 3a90 	vmov	s15, r3
 800636e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	ee07 3a90 	vmov	s15, r3
 8006378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800637c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006380:	4b7a      	ldr	r3, [pc, #488]	; (800656c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006388:	ee07 3a90 	vmov	s15, r3
 800638c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006390:	ed97 6a03 	vldr	s12, [r7, #12]
 8006394:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006574 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006398:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800639c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ac:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80063b0:	e087      	b.n	80064c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	ee07 3a90 	vmov	s15, r3
 80063b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063bc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006578 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80063c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063c4:	4b69      	ldr	r3, [pc, #420]	; (800656c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063cc:	ee07 3a90 	vmov	s15, r3
 80063d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80063d8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006574 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80063dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063f4:	e065      	b.n	80064c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	ee07 3a90 	vmov	s15, r3
 80063fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006400:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800657c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006404:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006408:	4b58      	ldr	r3, [pc, #352]	; (800656c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800640a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006410:	ee07 3a90 	vmov	s15, r3
 8006414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006418:	ed97 6a03 	vldr	s12, [r7, #12]
 800641c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006574 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006420:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006424:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006428:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800642c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006434:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006438:	e043      	b.n	80064c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	ee07 3a90 	vmov	s15, r3
 8006440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006444:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006580 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006448:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800644c:	4b47      	ldr	r3, [pc, #284]	; (800656c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800644e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006454:	ee07 3a90 	vmov	s15, r3
 8006458:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800645c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006460:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006574 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006464:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006468:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800646c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006470:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006478:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800647c:	e021      	b.n	80064c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	ee07 3a90 	vmov	s15, r3
 8006484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006488:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006578 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800648c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006490:	4b36      	ldr	r3, [pc, #216]	; (800656c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006498:	ee07 3a90 	vmov	s15, r3
 800649c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80064a4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006574 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80064a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064c0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80064c2:	4b2a      	ldr	r3, [pc, #168]	; (800656c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c6:	0a5b      	lsrs	r3, r3, #9
 80064c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064cc:	ee07 3a90 	vmov	s15, r3
 80064d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80064e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064e8:	ee17 2a90 	vmov	r2, s15
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80064f0:	4b1e      	ldr	r3, [pc, #120]	; (800656c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f4:	0c1b      	lsrs	r3, r3, #16
 80064f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064fa:	ee07 3a90 	vmov	s15, r3
 80064fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006502:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006506:	ee37 7a87 	vadd.f32	s14, s15, s14
 800650a:	edd7 6a07 	vldr	s13, [r7, #28]
 800650e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006516:	ee17 2a90 	vmov	r2, s15
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800651e:	4b13      	ldr	r3, [pc, #76]	; (800656c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006522:	0e1b      	lsrs	r3, r3, #24
 8006524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006528:	ee07 3a90 	vmov	s15, r3
 800652c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006530:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006534:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006538:	edd7 6a07 	vldr	s13, [r7, #28]
 800653c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006544:	ee17 2a90 	vmov	r2, s15
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800654c:	e008      	b.n	8006560 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	609a      	str	r2, [r3, #8]
}
 8006560:	bf00      	nop
 8006562:	3724      	adds	r7, #36	; 0x24
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	58024400 	.word	0x58024400
 8006570:	03d09000 	.word	0x03d09000
 8006574:	46000000 	.word	0x46000000
 8006578:	4c742400 	.word	0x4c742400
 800657c:	4a742400 	.word	0x4a742400
 8006580:	4bbebc20 	.word	0x4bbebc20

08006584 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006592:	4b53      	ldr	r3, [pc, #332]	; (80066e0 <RCCEx_PLL2_Config+0x15c>)
 8006594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	2b03      	cmp	r3, #3
 800659c:	d101      	bne.n	80065a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e099      	b.n	80066d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80065a2:	4b4f      	ldr	r3, [pc, #316]	; (80066e0 <RCCEx_PLL2_Config+0x15c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a4e      	ldr	r2, [pc, #312]	; (80066e0 <RCCEx_PLL2_Config+0x15c>)
 80065a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80065ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065ae:	f7fa fdb1 	bl	8001114 <HAL_GetTick>
 80065b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80065b4:	e008      	b.n	80065c8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80065b6:	f7fa fdad 	bl	8001114 <HAL_GetTick>
 80065ba:	4602      	mov	r2, r0
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d901      	bls.n	80065c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e086      	b.n	80066d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80065c8:	4b45      	ldr	r3, [pc, #276]	; (80066e0 <RCCEx_PLL2_Config+0x15c>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1f0      	bne.n	80065b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80065d4:	4b42      	ldr	r3, [pc, #264]	; (80066e0 <RCCEx_PLL2_Config+0x15c>)
 80065d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	031b      	lsls	r3, r3, #12
 80065e2:	493f      	ldr	r1, [pc, #252]	; (80066e0 <RCCEx_PLL2_Config+0x15c>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	628b      	str	r3, [r1, #40]	; 0x28
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	3b01      	subs	r3, #1
 80065ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	3b01      	subs	r3, #1
 80065f8:	025b      	lsls	r3, r3, #9
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	431a      	orrs	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	3b01      	subs	r3, #1
 8006604:	041b      	lsls	r3, r3, #16
 8006606:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800660a:	431a      	orrs	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	3b01      	subs	r3, #1
 8006612:	061b      	lsls	r3, r3, #24
 8006614:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006618:	4931      	ldr	r1, [pc, #196]	; (80066e0 <RCCEx_PLL2_Config+0x15c>)
 800661a:	4313      	orrs	r3, r2
 800661c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800661e:	4b30      	ldr	r3, [pc, #192]	; (80066e0 <RCCEx_PLL2_Config+0x15c>)
 8006620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006622:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	492d      	ldr	r1, [pc, #180]	; (80066e0 <RCCEx_PLL2_Config+0x15c>)
 800662c:	4313      	orrs	r3, r2
 800662e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006630:	4b2b      	ldr	r3, [pc, #172]	; (80066e0 <RCCEx_PLL2_Config+0x15c>)
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006634:	f023 0220 	bic.w	r2, r3, #32
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	4928      	ldr	r1, [pc, #160]	; (80066e0 <RCCEx_PLL2_Config+0x15c>)
 800663e:	4313      	orrs	r3, r2
 8006640:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006642:	4b27      	ldr	r3, [pc, #156]	; (80066e0 <RCCEx_PLL2_Config+0x15c>)
 8006644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006646:	4a26      	ldr	r2, [pc, #152]	; (80066e0 <RCCEx_PLL2_Config+0x15c>)
 8006648:	f023 0310 	bic.w	r3, r3, #16
 800664c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800664e:	4b24      	ldr	r3, [pc, #144]	; (80066e0 <RCCEx_PLL2_Config+0x15c>)
 8006650:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006652:	4b24      	ldr	r3, [pc, #144]	; (80066e4 <RCCEx_PLL2_Config+0x160>)
 8006654:	4013      	ands	r3, r2
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	69d2      	ldr	r2, [r2, #28]
 800665a:	00d2      	lsls	r2, r2, #3
 800665c:	4920      	ldr	r1, [pc, #128]	; (80066e0 <RCCEx_PLL2_Config+0x15c>)
 800665e:	4313      	orrs	r3, r2
 8006660:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006662:	4b1f      	ldr	r3, [pc, #124]	; (80066e0 <RCCEx_PLL2_Config+0x15c>)
 8006664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006666:	4a1e      	ldr	r2, [pc, #120]	; (80066e0 <RCCEx_PLL2_Config+0x15c>)
 8006668:	f043 0310 	orr.w	r3, r3, #16
 800666c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d106      	bne.n	8006682 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006674:	4b1a      	ldr	r3, [pc, #104]	; (80066e0 <RCCEx_PLL2_Config+0x15c>)
 8006676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006678:	4a19      	ldr	r2, [pc, #100]	; (80066e0 <RCCEx_PLL2_Config+0x15c>)
 800667a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800667e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006680:	e00f      	b.n	80066a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d106      	bne.n	8006696 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006688:	4b15      	ldr	r3, [pc, #84]	; (80066e0 <RCCEx_PLL2_Config+0x15c>)
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	4a14      	ldr	r2, [pc, #80]	; (80066e0 <RCCEx_PLL2_Config+0x15c>)
 800668e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006692:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006694:	e005      	b.n	80066a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006696:	4b12      	ldr	r3, [pc, #72]	; (80066e0 <RCCEx_PLL2_Config+0x15c>)
 8006698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669a:	4a11      	ldr	r2, [pc, #68]	; (80066e0 <RCCEx_PLL2_Config+0x15c>)
 800669c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80066a2:	4b0f      	ldr	r3, [pc, #60]	; (80066e0 <RCCEx_PLL2_Config+0x15c>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a0e      	ldr	r2, [pc, #56]	; (80066e0 <RCCEx_PLL2_Config+0x15c>)
 80066a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066ae:	f7fa fd31 	bl	8001114 <HAL_GetTick>
 80066b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80066b4:	e008      	b.n	80066c8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80066b6:	f7fa fd2d 	bl	8001114 <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d901      	bls.n	80066c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e006      	b.n	80066d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80066c8:	4b05      	ldr	r3, [pc, #20]	; (80066e0 <RCCEx_PLL2_Config+0x15c>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d0f0      	beq.n	80066b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	58024400 	.word	0x58024400
 80066e4:	ffff0007 	.word	0xffff0007

080066e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066f2:	2300      	movs	r3, #0
 80066f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80066f6:	4b53      	ldr	r3, [pc, #332]	; (8006844 <RCCEx_PLL3_Config+0x15c>)
 80066f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fa:	f003 0303 	and.w	r3, r3, #3
 80066fe:	2b03      	cmp	r3, #3
 8006700:	d101      	bne.n	8006706 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e099      	b.n	800683a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006706:	4b4f      	ldr	r3, [pc, #316]	; (8006844 <RCCEx_PLL3_Config+0x15c>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a4e      	ldr	r2, [pc, #312]	; (8006844 <RCCEx_PLL3_Config+0x15c>)
 800670c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006712:	f7fa fcff 	bl	8001114 <HAL_GetTick>
 8006716:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006718:	e008      	b.n	800672c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800671a:	f7fa fcfb 	bl	8001114 <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	2b02      	cmp	r3, #2
 8006726:	d901      	bls.n	800672c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e086      	b.n	800683a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800672c:	4b45      	ldr	r3, [pc, #276]	; (8006844 <RCCEx_PLL3_Config+0x15c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1f0      	bne.n	800671a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006738:	4b42      	ldr	r3, [pc, #264]	; (8006844 <RCCEx_PLL3_Config+0x15c>)
 800673a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	051b      	lsls	r3, r3, #20
 8006746:	493f      	ldr	r1, [pc, #252]	; (8006844 <RCCEx_PLL3_Config+0x15c>)
 8006748:	4313      	orrs	r3, r2
 800674a:	628b      	str	r3, [r1, #40]	; 0x28
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	3b01      	subs	r3, #1
 8006752:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	3b01      	subs	r3, #1
 800675c:	025b      	lsls	r3, r3, #9
 800675e:	b29b      	uxth	r3, r3
 8006760:	431a      	orrs	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	3b01      	subs	r3, #1
 8006768:	041b      	lsls	r3, r3, #16
 800676a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	3b01      	subs	r3, #1
 8006776:	061b      	lsls	r3, r3, #24
 8006778:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800677c:	4931      	ldr	r1, [pc, #196]	; (8006844 <RCCEx_PLL3_Config+0x15c>)
 800677e:	4313      	orrs	r3, r2
 8006780:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006782:	4b30      	ldr	r3, [pc, #192]	; (8006844 <RCCEx_PLL3_Config+0x15c>)
 8006784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006786:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	492d      	ldr	r1, [pc, #180]	; (8006844 <RCCEx_PLL3_Config+0x15c>)
 8006790:	4313      	orrs	r3, r2
 8006792:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006794:	4b2b      	ldr	r3, [pc, #172]	; (8006844 <RCCEx_PLL3_Config+0x15c>)
 8006796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006798:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	4928      	ldr	r1, [pc, #160]	; (8006844 <RCCEx_PLL3_Config+0x15c>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80067a6:	4b27      	ldr	r3, [pc, #156]	; (8006844 <RCCEx_PLL3_Config+0x15c>)
 80067a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067aa:	4a26      	ldr	r2, [pc, #152]	; (8006844 <RCCEx_PLL3_Config+0x15c>)
 80067ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80067b2:	4b24      	ldr	r3, [pc, #144]	; (8006844 <RCCEx_PLL3_Config+0x15c>)
 80067b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067b6:	4b24      	ldr	r3, [pc, #144]	; (8006848 <RCCEx_PLL3_Config+0x160>)
 80067b8:	4013      	ands	r3, r2
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	69d2      	ldr	r2, [r2, #28]
 80067be:	00d2      	lsls	r2, r2, #3
 80067c0:	4920      	ldr	r1, [pc, #128]	; (8006844 <RCCEx_PLL3_Config+0x15c>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80067c6:	4b1f      	ldr	r3, [pc, #124]	; (8006844 <RCCEx_PLL3_Config+0x15c>)
 80067c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ca:	4a1e      	ldr	r2, [pc, #120]	; (8006844 <RCCEx_PLL3_Config+0x15c>)
 80067cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d106      	bne.n	80067e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80067d8:	4b1a      	ldr	r3, [pc, #104]	; (8006844 <RCCEx_PLL3_Config+0x15c>)
 80067da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067dc:	4a19      	ldr	r2, [pc, #100]	; (8006844 <RCCEx_PLL3_Config+0x15c>)
 80067de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80067e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80067e4:	e00f      	b.n	8006806 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d106      	bne.n	80067fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80067ec:	4b15      	ldr	r3, [pc, #84]	; (8006844 <RCCEx_PLL3_Config+0x15c>)
 80067ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f0:	4a14      	ldr	r2, [pc, #80]	; (8006844 <RCCEx_PLL3_Config+0x15c>)
 80067f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80067f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80067f8:	e005      	b.n	8006806 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80067fa:	4b12      	ldr	r3, [pc, #72]	; (8006844 <RCCEx_PLL3_Config+0x15c>)
 80067fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fe:	4a11      	ldr	r2, [pc, #68]	; (8006844 <RCCEx_PLL3_Config+0x15c>)
 8006800:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006804:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006806:	4b0f      	ldr	r3, [pc, #60]	; (8006844 <RCCEx_PLL3_Config+0x15c>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a0e      	ldr	r2, [pc, #56]	; (8006844 <RCCEx_PLL3_Config+0x15c>)
 800680c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006810:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006812:	f7fa fc7f 	bl	8001114 <HAL_GetTick>
 8006816:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006818:	e008      	b.n	800682c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800681a:	f7fa fc7b 	bl	8001114 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b02      	cmp	r3, #2
 8006826:	d901      	bls.n	800682c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e006      	b.n	800683a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800682c:	4b05      	ldr	r3, [pc, #20]	; (8006844 <RCCEx_PLL3_Config+0x15c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d0f0      	beq.n	800681a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006838:	7bfb      	ldrb	r3, [r7, #15]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	58024400 	.word	0x58024400
 8006848:	ffff0007 	.word	0xffff0007

0800684c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b08a      	sub	sp, #40	; 0x28
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e075      	b.n	800694a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d105      	bne.n	8006876 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7fa f8fb 	bl	8000a6c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2204      	movs	r2, #4
 800687a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f868 	bl	8006954 <HAL_SD_InitCard>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e05d      	b.n	800694a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800688e:	f107 0308 	add.w	r3, r7, #8
 8006892:	4619      	mov	r1, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fdaf 	bl	80073f8 <HAL_SD_GetCardStatus>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e052      	b.n	800694a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80068a4:	7e3b      	ldrb	r3, [r7, #24]
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80068aa:	7e7b      	ldrb	r3, [r7, #25]
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d10a      	bne.n	80068ce <HAL_SD_Init+0x82>
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d102      	bne.n	80068c4 <HAL_SD_Init+0x78>
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d004      	beq.n	80068ce <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068ca:	659a      	str	r2, [r3, #88]	; 0x58
 80068cc:	e00b      	b.n	80068e6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d104      	bne.n	80068e0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068dc:	659a      	str	r2, [r3, #88]	; 0x58
 80068de:	e002      	b.n	80068e6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	4619      	mov	r1, r3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fe6d 	bl	80075cc <HAL_SD_ConfigWideBusOperation>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d001      	beq.n	80068fc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e026      	b.n	800694a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80068fc:	f7fa fc0a 	bl	8001114 <HAL_GetTick>
 8006900:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006902:	e011      	b.n	8006928 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006904:	f7fa fc06 	bl	8001114 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006912:	d109      	bne.n	8006928 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800691a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e010      	b.n	800694a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 ff61 	bl	80077f0 <HAL_SD_GetCardState>
 800692e:	4603      	mov	r3, r0
 8006930:	2b04      	cmp	r3, #4
 8006932:	d1e7      	bne.n	8006904 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3728      	adds	r7, #40	; 0x28
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
	...

08006954 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006954:	b590      	push	{r4, r7, lr}
 8006956:	b08d      	sub	sp, #52	; 0x34
 8006958:	af02      	add	r7, sp, #8
 800695a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 800695c:	2300      	movs	r3, #0
 800695e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006960:	2300      	movs	r3, #0
 8006962:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006964:	2300      	movs	r3, #0
 8006966:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006968:	2300      	movs	r3, #0
 800696a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800696c:	2300      	movs	r3, #0
 800696e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006970:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006974:	f7fe fd24 	bl	80053c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006978:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	2b00      	cmp	r3, #0
 800697e:	d109      	bne.n	8006994 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800698e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e06a      	b.n	8006a6a <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	0a1b      	lsrs	r3, r3, #8
 8006998:	4a36      	ldr	r2, [pc, #216]	; (8006a74 <HAL_SD_InitCard+0x120>)
 800699a:	fba2 2303 	umull	r2, r3, r2, r3
 800699e:	091b      	lsrs	r3, r3, #4
 80069a0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681c      	ldr	r4, [r3, #0]
 80069a6:	466a      	mov	r2, sp
 80069a8:	f107 0318 	add.w	r3, r7, #24
 80069ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80069b0:	e882 0003 	stmia.w	r2, {r0, r1}
 80069b4:	f107 030c 	add.w	r3, r7, #12
 80069b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069ba:	4620      	mov	r0, r4
 80069bc:	f002 ff32 	bl	8009824 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f002 ff75 	bl	80098b4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80069d6:	4a28      	ldr	r2, [pc, #160]	; (8006a78 <HAL_SD_InitCard+0x124>)
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	fbb2 f3f3 	udiv	r3, r2, r3
 80069de:	3301      	adds	r3, #1
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fa fba3 	bl	800112c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fff0 	bl	80079cc <SD_PowerON>
 80069ec:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00b      	beq.n	8006a0c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a00:	6a3b      	ldr	r3, [r7, #32]
 8006a02:	431a      	orrs	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e02e      	b.n	8006a6a <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 ff0f 	bl	8007830 <SD_InitCard>
 8006a12:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00b      	beq.n	8006a32 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	431a      	orrs	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e01b      	b.n	8006a6a <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f002 ffd0 	bl	80099e0 <SDMMC_CmdBlockLength>
 8006a40:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00f      	beq.n	8006a68 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a0b      	ldr	r2, [pc, #44]	; (8006a7c <HAL_SD_InitCard+0x128>)
 8006a4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a54:	6a3b      	ldr	r3, [r7, #32]
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e000      	b.n	8006a6a <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	372c      	adds	r7, #44	; 0x2c
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd90      	pop	{r4, r7, pc}
 8006a72:	bf00      	nop
 8006a74:	014f8b59 	.word	0x014f8b59
 8006a78:	00012110 	.word	0x00012110
 8006a7c:	1fe00fff 	.word	0x1fe00fff

08006a80 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b092      	sub	sp, #72	; 0x48
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
 8006a8c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006a8e:	f7fa fb41 	bl	8001114 <HAL_GetTick>
 8006a92:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d107      	bne.n	8006ab2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e167      	b.n	8006d82 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	f040 815a 	bne.w	8006d74 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006ac6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	441a      	add	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d907      	bls.n	8006ae4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ad8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e14e      	b.n	8006d82 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2203      	movs	r2, #3
 8006ae8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2200      	movs	r2, #0
 8006af2:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d002      	beq.n	8006b02 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afe:	025b      	lsls	r3, r3, #9
 8006b00:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006b02:	f04f 33ff 	mov.w	r3, #4294967295
 8006b06:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	025b      	lsls	r3, r3, #9
 8006b0c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006b0e:	2390      	movs	r3, #144	; 0x90
 8006b10:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006b12:	2302      	movs	r3, #2
 8006b14:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f107 0214 	add.w	r2, r7, #20
 8006b26:	4611      	mov	r1, r2
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f002 ff2d 	bl	8009988 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68da      	ldr	r2, [r3, #12]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b3c:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d90a      	bls.n	8006b5a <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2202      	movs	r2, #2
 8006b48:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b50:	4618      	mov	r0, r3
 8006b52:	f002 ff8b 	bl	8009a6c <SDMMC_CmdReadMultiBlock>
 8006b56:	6478      	str	r0, [r7, #68]	; 0x44
 8006b58:	e009      	b.n	8006b6e <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b66:	4618      	mov	r0, r3
 8006b68:	f002 ff5d 	bl	8009a26 <SDMMC_CmdReadSingleBlock>
 8006b6c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d012      	beq.n	8006b9a <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a84      	ldr	r2, [pc, #528]	; (8006d8c <HAL_SD_ReadBlocks+0x30c>)
 8006b7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b82:	431a      	orrs	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e0f3      	b.n	8006d82 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006b9e:	e058      	b.n	8006c52 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d033      	beq.n	8006c16 <HAL_SD_ReadBlocks+0x196>
 8006bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb0:	2b1f      	cmp	r3, #31
 8006bb2:	d930      	bls.n	8006c16 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	643b      	str	r3, [r7, #64]	; 0x40
 8006bb8:	e027      	b.n	8006c0a <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f002 fe5a 	bl	8009878 <SDMMC_ReadFIFO>
 8006bc4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bcc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd6:	0a1b      	lsrs	r3, r3, #8
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bdc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be0:	3301      	adds	r3, #1
 8006be2:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be6:	0c1b      	lsrs	r3, r3, #16
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bec:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf6:	0e1b      	lsrs	r3, r3, #24
 8006bf8:	b2da      	uxtb	r2, r3
 8006bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bfc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c00:	3301      	adds	r3, #1
 8006c02:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8006c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c06:	3301      	adds	r3, #1
 8006c08:	643b      	str	r3, [r7, #64]	; 0x40
 8006c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c0c:	2b07      	cmp	r3, #7
 8006c0e:	d9d4      	bls.n	8006bba <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8006c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c12:	3b20      	subs	r3, #32
 8006c14:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8006c16:	f7fa fa7d 	bl	8001114 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d902      	bls.n	8006c2c <HAL_SD_ReadBlocks+0x1ac>
 8006c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d112      	bne.n	8006c52 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a56      	ldr	r2, [pc, #344]	; (8006d8c <HAL_SD_ReadBlocks+0x30c>)
 8006c32:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c38:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e097      	b.n	8006d82 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c58:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d09f      	beq.n	8006ba0 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68da      	ldr	r2, [r3, #12]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c6e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d022      	beq.n	8006cc4 <HAL_SD_ReadBlocks+0x244>
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d91f      	bls.n	8006cc4 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c88:	2b03      	cmp	r3, #3
 8006c8a:	d01b      	beq.n	8006cc4 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f002 ff55 	bl	8009b40 <SDMMC_CmdStopTransfer>
 8006c96:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8006c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d012      	beq.n	8006cc4 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a3a      	ldr	r2, [pc, #232]	; (8006d8c <HAL_SD_ReadBlocks+0x30c>)
 8006ca4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006caa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cac:	431a      	orrs	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e05e      	b.n	8006d82 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cca:	f003 0308 	and.w	r3, r3, #8
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d012      	beq.n	8006cf8 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a2d      	ldr	r2, [pc, #180]	; (8006d8c <HAL_SD_ReadBlocks+0x30c>)
 8006cd8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cde:	f043 0208 	orr.w	r2, r3, #8
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e044      	b.n	8006d82 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d012      	beq.n	8006d2c <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a20      	ldr	r2, [pc, #128]	; (8006d8c <HAL_SD_ReadBlocks+0x30c>)
 8006d0c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d12:	f043 0202 	orr.w	r2, r3, #2
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e02a      	b.n	8006d82 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d012      	beq.n	8006d60 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a13      	ldr	r2, [pc, #76]	; (8006d8c <HAL_SD_ReadBlocks+0x30c>)
 8006d40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d46:	f043 0220 	orr.w	r2, r3, #32
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e010      	b.n	8006d82 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a0a      	ldr	r2, [pc, #40]	; (8006d90 <HAL_SD_ReadBlocks+0x310>)
 8006d66:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8006d70:	2300      	movs	r3, #0
 8006d72:	e006      	b.n	8006d82 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d78:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
  }
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3748      	adds	r7, #72	; 0x48
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	1fe00fff 	.word	0x1fe00fff
 8006d90:	18000f3a 	.word	0x18000f3a

08006d94 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                     uint32_t Timeout)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b092      	sub	sp, #72	; 0x48
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
 8006da0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006da2:	f7fa f9b7 	bl	8001114 <HAL_GetTick>
 8006da6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d107      	bne.n	8006dc6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e16b      	b.n	800709e <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	f040 815e 	bne.w	8007090 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006dda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	441a      	add	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d907      	bls.n	8006df8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e152      	b.n	800709e <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2203      	movs	r2, #3
 8006dfc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2200      	movs	r2, #0
 8006e06:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d002      	beq.n	8006e16 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e12:	025b      	lsls	r3, r3, #9
 8006e14:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006e16:	f04f 33ff 	mov.w	r3, #4294967295
 8006e1a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	025b      	lsls	r3, r3, #9
 8006e20:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006e22:	2390      	movs	r3, #144	; 0x90
 8006e24:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006e26:	2300      	movs	r3, #0
 8006e28:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f107 0218 	add.w	r2, r7, #24
 8006e3a:	4611      	mov	r1, r2
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f002 fda3 	bl	8009988 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68da      	ldr	r2, [r3, #12]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e50:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d90a      	bls.n	8006e6e <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e64:	4618      	mov	r0, r3
 8006e66:	f002 fe47 	bl	8009af8 <SDMMC_CmdWriteMultiBlock>
 8006e6a:	6478      	str	r0, [r7, #68]	; 0x44
 8006e6c:	e009      	b.n	8006e82 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2210      	movs	r2, #16
 8006e72:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f002 fe19 	bl	8009ab2 <SDMMC_CmdWriteSingleBlock>
 8006e80:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d012      	beq.n	8006eae <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a86      	ldr	r2, [pc, #536]	; (80070a8 <HAL_SD_WriteBlocks+0x314>)
 8006e8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e96:	431a      	orrs	r2, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e0f7      	b.n	800709e <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8006eb2:	e05c      	b.n	8006f6e <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d037      	beq.n	8006f32 <HAL_SD_WriteBlocks+0x19e>
 8006ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ec4:	2b1f      	cmp	r3, #31
 8006ec6:	d934      	bls.n	8006f32 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8006ec8:	2300      	movs	r3, #0
 8006eca:	643b      	str	r3, [r7, #64]	; 0x40
 8006ecc:	e02b      	b.n	8006f26 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8006ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	021a      	lsls	r2, r3, #8
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee8:	3301      	adds	r3, #1
 8006eea:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	041a      	lsls	r2, r3, #16
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efa:	3301      	adds	r3, #1
 8006efc:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	061a      	lsls	r2, r3, #24
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f107 0214 	add.w	r2, r7, #20
 8006f18:	4611      	mov	r1, r2
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f002 fcb9 	bl	8009892 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8006f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f22:	3301      	adds	r3, #1
 8006f24:	643b      	str	r3, [r7, #64]	; 0x40
 8006f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f28:	2b07      	cmp	r3, #7
 8006f2a:	d9d0      	bls.n	8006ece <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8006f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f2e:	3b20      	subs	r3, #32
 8006f30:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8006f32:	f7fa f8ef 	bl	8001114 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d902      	bls.n	8006f48 <HAL_SD_WriteBlocks+0x1b4>
 8006f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d112      	bne.n	8006f6e <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a56      	ldr	r2, [pc, #344]	; (80070a8 <HAL_SD_WriteBlocks+0x314>)
 8006f4e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f56:	431a      	orrs	r2, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e097      	b.n	800709e <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f74:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d09b      	beq.n	8006eb4 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68da      	ldr	r2, [r3, #12]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f8a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d022      	beq.n	8006fe0 <HAL_SD_WriteBlocks+0x24c>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d91f      	bls.n	8006fe0 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa4:	2b03      	cmp	r3, #3
 8006fa6:	d01b      	beq.n	8006fe0 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f002 fdc7 	bl	8009b40 <SDMMC_CmdStopTransfer>
 8006fb2:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8006fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d012      	beq.n	8006fe0 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a3a      	ldr	r2, [pc, #232]	; (80070a8 <HAL_SD_WriteBlocks+0x314>)
 8006fc0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e05e      	b.n	800709e <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe6:	f003 0308 	and.w	r3, r3, #8
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d012      	beq.n	8007014 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a2d      	ldr	r2, [pc, #180]	; (80070a8 <HAL_SD_WriteBlocks+0x314>)
 8006ff4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ffa:	f043 0208 	orr.w	r2, r3, #8
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e044      	b.n	800709e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701a:	f003 0302 	and.w	r3, r3, #2
 800701e:	2b00      	cmp	r3, #0
 8007020:	d012      	beq.n	8007048 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a20      	ldr	r2, [pc, #128]	; (80070a8 <HAL_SD_WriteBlocks+0x314>)
 8007028:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800702e:	f043 0202 	orr.w	r2, r3, #2
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e02a      	b.n	800709e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800704e:	f003 0310 	and.w	r3, r3, #16
 8007052:	2b00      	cmp	r3, #0
 8007054:	d012      	beq.n	800707c <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a13      	ldr	r2, [pc, #76]	; (80070a8 <HAL_SD_WriteBlocks+0x314>)
 800705c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007062:	f043 0210 	orr.w	r2, r3, #16
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e010      	b.n	800709e <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a0a      	ldr	r2, [pc, #40]	; (80070ac <HAL_SD_WriteBlocks+0x318>)
 8007082:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 800708c:	2300      	movs	r3, #0
 800708e:	e006      	b.n	800709e <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007094:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
  }
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3748      	adds	r7, #72	; 0x48
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	1fe00fff 	.word	0x1fe00fff
 80070ac:	18000f3a 	.word	0x18000f3a

080070b0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070be:	0f9b      	lsrs	r3, r3, #30
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ca:	0e9b      	lsrs	r3, r3, #26
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	f003 030f 	and.w	r3, r3, #15
 80070d2:	b2da      	uxtb	r2, r3
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070dc:	0e1b      	lsrs	r3, r3, #24
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	f003 0303 	and.w	r3, r3, #3
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ee:	0c1b      	lsrs	r3, r3, #16
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070fa:	0a1b      	lsrs	r3, r3, #8
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007106:	b2da      	uxtb	r2, r3
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007110:	0d1b      	lsrs	r3, r3, #20
 8007112:	b29a      	uxth	r2, r3
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800711c:	0c1b      	lsrs	r3, r3, #16
 800711e:	b2db      	uxtb	r3, r3
 8007120:	f003 030f 	and.w	r3, r3, #15
 8007124:	b2da      	uxtb	r2, r3
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800712e:	0bdb      	lsrs	r3, r3, #15
 8007130:	b2db      	uxtb	r3, r3
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	b2da      	uxtb	r2, r3
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007140:	0b9b      	lsrs	r3, r3, #14
 8007142:	b2db      	uxtb	r3, r3
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	b2da      	uxtb	r2, r3
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007152:	0b5b      	lsrs	r3, r3, #13
 8007154:	b2db      	uxtb	r3, r3
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	b2da      	uxtb	r2, r3
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007164:	0b1b      	lsrs	r3, r3, #12
 8007166:	b2db      	uxtb	r3, r3
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	b2da      	uxtb	r2, r3
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2200      	movs	r2, #0
 8007176:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717c:	2b00      	cmp	r3, #0
 800717e:	d163      	bne.n	8007248 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007184:	009a      	lsls	r2, r3, #2
 8007186:	f640 73fc 	movw	r3, #4092	; 0xffc
 800718a:	4013      	ands	r3, r2
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8007190:	0f92      	lsrs	r2, r2, #30
 8007192:	431a      	orrs	r2, r3
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800719c:	0edb      	lsrs	r3, r3, #27
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	f003 0307 	and.w	r3, r3, #7
 80071a4:	b2da      	uxtb	r2, r3
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071ae:	0e1b      	lsrs	r3, r3, #24
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	f003 0307 	and.w	r3, r3, #7
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071c0:	0d5b      	lsrs	r3, r3, #21
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	f003 0307 	and.w	r3, r3, #7
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071d2:	0c9b      	lsrs	r3, r3, #18
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	f003 0307 	and.w	r3, r3, #7
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071e4:	0bdb      	lsrs	r3, r3, #15
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	f003 0307 	and.w	r3, r3, #7
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	7e1b      	ldrb	r3, [r3, #24]
 8007200:	b2db      	uxtb	r3, r3
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	3302      	adds	r3, #2
 8007208:	2201      	movs	r2, #1
 800720a:	fa02 f303 	lsl.w	r3, r2, r3
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007212:	fb03 f202 	mul.w	r2, r3, r2
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	7a1b      	ldrb	r3, [r3, #8]
 800721e:	b2db      	uxtb	r3, r3
 8007220:	f003 030f 	and.w	r3, r3, #15
 8007224:	2201      	movs	r2, #1
 8007226:	409a      	lsls	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007234:	0a52      	lsrs	r2, r2, #9
 8007236:	fb03 f202 	mul.w	r2, r3, r2
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007244:	655a      	str	r2, [r3, #84]	; 0x54
 8007246:	e031      	b.n	80072ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724c:	2b01      	cmp	r3, #1
 800724e:	d11d      	bne.n	800728c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007254:	041b      	lsls	r3, r3, #16
 8007256:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800725e:	0c1b      	lsrs	r3, r3, #16
 8007260:	431a      	orrs	r2, r3
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	3301      	adds	r3, #1
 800726c:	029a      	lsls	r2, r3, #10
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007280:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	655a      	str	r2, [r3, #84]	; 0x54
 800728a:	e00f      	b.n	80072ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a58      	ldr	r2, [pc, #352]	; (80073f4 <HAL_SD_GetCardCSD+0x344>)
 8007292:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007298:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e09d      	b.n	80073e8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072b0:	0b9b      	lsrs	r3, r3, #14
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	f003 0301 	and.w	r3, r3, #1
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072c2:	09db      	lsrs	r3, r3, #7
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ca:	b2da      	uxtb	r2, r3
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072da:	b2da      	uxtb	r2, r3
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072e4:	0fdb      	lsrs	r3, r3, #31
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072f0:	0f5b      	lsrs	r3, r3, #29
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	f003 0303 	and.w	r3, r3, #3
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007302:	0e9b      	lsrs	r3, r3, #26
 8007304:	b2db      	uxtb	r3, r3
 8007306:	f003 0307 	and.w	r3, r3, #7
 800730a:	b2da      	uxtb	r2, r3
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007314:	0d9b      	lsrs	r3, r3, #22
 8007316:	b2db      	uxtb	r3, r3
 8007318:	f003 030f 	and.w	r3, r3, #15
 800731c:	b2da      	uxtb	r2, r3
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007326:	0d5b      	lsrs	r3, r3, #21
 8007328:	b2db      	uxtb	r3, r3
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	b2da      	uxtb	r2, r3
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007342:	0c1b      	lsrs	r3, r3, #16
 8007344:	b2db      	uxtb	r3, r3
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	b2da      	uxtb	r2, r3
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007356:	0bdb      	lsrs	r3, r3, #15
 8007358:	b2db      	uxtb	r3, r3
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	b2da      	uxtb	r2, r3
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800736a:	0b9b      	lsrs	r3, r3, #14
 800736c:	b2db      	uxtb	r3, r3
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	b2da      	uxtb	r2, r3
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800737e:	0b5b      	lsrs	r3, r3, #13
 8007380:	b2db      	uxtb	r3, r3
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	b2da      	uxtb	r2, r3
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007392:	0b1b      	lsrs	r3, r3, #12
 8007394:	b2db      	uxtb	r3, r3
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	b2da      	uxtb	r2, r3
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073a6:	0a9b      	lsrs	r3, r3, #10
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	f003 0303 	and.w	r3, r3, #3
 80073ae:	b2da      	uxtb	r2, r3
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073ba:	0a1b      	lsrs	r3, r3, #8
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	f003 0303 	and.w	r3, r3, #3
 80073c2:	b2da      	uxtb	r2, r3
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073ce:	085b      	lsrs	r3, r3, #1
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073d6:	b2da      	uxtb	r2, r3
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr
 80073f4:	1fe00fff 	.word	0x1fe00fff

080073f8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b094      	sub	sp, #80	; 0x50
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007402:	2300      	movs	r3, #0
 8007404:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b03      	cmp	r3, #3
 8007412:	d101      	bne.n	8007418 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e0a7      	b.n	8007568 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007418:	f107 0308 	add.w	r3, r7, #8
 800741c:	4619      	mov	r1, r3
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fb62 	bl	8007ae8 <SD_SendSDStatus>
 8007424:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007428:	2b00      	cmp	r3, #0
 800742a:	d011      	beq.n	8007450 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a4f      	ldr	r2, [pc, #316]	; (8007570 <HAL_SD_GetCardStatus+0x178>)
 8007432:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800743a:	431a      	orrs	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800744e:	e070      	b.n	8007532 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	099b      	lsrs	r3, r3, #6
 8007454:	b2db      	uxtb	r3, r3
 8007456:	f003 0303 	and.w	r3, r3, #3
 800745a:	b2da      	uxtb	r2, r3
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	095b      	lsrs	r3, r3, #5
 8007464:	b2db      	uxtb	r3, r3
 8007466:	f003 0301 	and.w	r3, r3, #1
 800746a:	b2da      	uxtb	r2, r3
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	0a1b      	lsrs	r3, r3, #8
 8007474:	b29b      	uxth	r3, r3
 8007476:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800747a:	b29a      	uxth	r2, r3
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	0e1b      	lsrs	r3, r3, #24
 8007480:	b29b      	uxth	r3, r3
 8007482:	4313      	orrs	r3, r2
 8007484:	b29a      	uxth	r2, r3
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	061a      	lsls	r2, r3, #24
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	021b      	lsls	r3, r3, #8
 8007492:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007496:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	0a1b      	lsrs	r3, r3, #8
 800749c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80074a0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	0e1b      	lsrs	r3, r3, #24
 80074a6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	b2da      	uxtb	r2, r3
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	0a1b      	lsrs	r3, r3, #8
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	0d1b      	lsrs	r3, r3, #20
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	f003 030f 	and.w	r3, r3, #15
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	0c1b      	lsrs	r3, r3, #16
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80074d8:	b29a      	uxth	r2, r3
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	b29b      	uxth	r3, r3
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	4313      	orrs	r3, r2
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	0a9b      	lsrs	r3, r3, #10
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074f4:	b2da      	uxtb	r2, r3
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	0a1b      	lsrs	r3, r3, #8
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	f003 0303 	and.w	r3, r3, #3
 8007504:	b2da      	uxtb	r2, r3
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	091b      	lsrs	r3, r3, #4
 800750e:	b2db      	uxtb	r3, r3
 8007510:	f003 030f 	and.w	r3, r3, #15
 8007514:	b2da      	uxtb	r2, r3
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	b2db      	uxtb	r3, r3
 800751e:	f003 030f 	and.w	r3, r3, #15
 8007522:	b2da      	uxtb	r2, r3
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	0e1b      	lsrs	r3, r3, #24
 800752c:	b2da      	uxtb	r2, r3
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f44f 7100 	mov.w	r1, #512	; 0x200
 800753a:	4618      	mov	r0, r3
 800753c:	f002 fa50 	bl	80099e0 <SDMMC_CmdBlockLength>
 8007540:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00d      	beq.n	8007564 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a08      	ldr	r2, [pc, #32]	; (8007570 <HAL_SD_GetCardStatus+0x178>)
 800754e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007554:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8007564:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007568:	4618      	mov	r0, r3
 800756a:	3750      	adds	r7, #80	; 0x50
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	1fe00fff 	.word	0x1fe00fff

08007574 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80075cc:	b590      	push	{r4, r7, lr}
 80075ce:	b08d      	sub	sp, #52	; 0x34
 80075d0:	af02      	add	r7, sp, #8
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 80075da:	2300      	movs	r3, #0
 80075dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2203      	movs	r2, #3
 80075e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ec:	2b03      	cmp	r3, #3
 80075ee:	d02e      	beq.n	800764e <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075f6:	d106      	bne.n	8007606 <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	635a      	str	r2, [r3, #52]	; 0x34
 8007604:	e029      	b.n	800765a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800760c:	d10a      	bne.n	8007624 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fb62 	bl	8007cd8 <SD_WideBus_Enable>
 8007614:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	431a      	orrs	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	635a      	str	r2, [r3, #52]	; 0x34
 8007622:	e01a      	b.n	800765a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10a      	bne.n	8007640 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fb9f 	bl	8007d6e <SD_WideBus_Disable>
 8007630:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	431a      	orrs	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	635a      	str	r2, [r3, #52]	; 0x34
 800763e:	e00c      	b.n	800765a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007644:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	635a      	str	r2, [r3, #52]	; 0x34
 800764c:	e005      	b.n	800765a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007652:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800765e:	2b00      	cmp	r3, #0
 8007660:	d007      	beq.n	8007672 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a5e      	ldr	r2, [pc, #376]	; (80077e0 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007668:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007670:	e094      	b.n	800779c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007672:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007676:	f7fd fea3 	bl	80053c0 <HAL_RCCEx_GetPeriphCLKFreq>
 800767a:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 8083 	beq.w	800778a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	695a      	ldr	r2, [r3, #20]
 800769e:	6a3b      	ldr	r3, [r7, #32]
 80076a0:	4950      	ldr	r1, [pc, #320]	; (80077e4 <HAL_SD_ConfigWideBusOperation+0x218>)
 80076a2:	fba1 1303 	umull	r1, r3, r1, r3
 80076a6:	0e1b      	lsrs	r3, r3, #24
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d303      	bcc.n	80076b4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	61bb      	str	r3, [r7, #24]
 80076b2:	e05a      	b.n	800776a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076bc:	d103      	bne.n	80076c6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	61bb      	str	r3, [r7, #24]
 80076c4:	e051      	b.n	800776a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076ce:	d126      	bne.n	800771e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	695b      	ldr	r3, [r3, #20]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10e      	bne.n	80076f6 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	4a43      	ldr	r2, [pc, #268]	; (80077e8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d906      	bls.n	80076ee <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80076e0:	6a3b      	ldr	r3, [r7, #32]
 80076e2:	4a40      	ldr	r2, [pc, #256]	; (80077e4 <HAL_SD_ConfigWideBusOperation+0x218>)
 80076e4:	fba2 2303 	umull	r2, r3, r2, r3
 80076e8:	0e5b      	lsrs	r3, r3, #25
 80076ea:	61bb      	str	r3, [r7, #24]
 80076ec:	e03d      	b.n	800776a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	61bb      	str	r3, [r7, #24]
 80076f4:	e039      	b.n	800776a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	005b      	lsls	r3, r3, #1
 80076fc:	6a3a      	ldr	r2, [r7, #32]
 80076fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007702:	4a39      	ldr	r2, [pc, #228]	; (80077e8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d906      	bls.n	8007716 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	4a36      	ldr	r2, [pc, #216]	; (80077e4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800770c:	fba2 2303 	umull	r2, r3, r2, r3
 8007710:	0e5b      	lsrs	r3, r3, #25
 8007712:	61bb      	str	r3, [r7, #24]
 8007714:	e029      	b.n	800776a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	61bb      	str	r3, [r7, #24]
 800771c:	e025      	b.n	800776a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10e      	bne.n	8007744 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007726:	6a3b      	ldr	r3, [r7, #32]
 8007728:	4a30      	ldr	r2, [pc, #192]	; (80077ec <HAL_SD_ConfigWideBusOperation+0x220>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d906      	bls.n	800773c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	4a2c      	ldr	r2, [pc, #176]	; (80077e4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007732:	fba2 2303 	umull	r2, r3, r2, r3
 8007736:	0e1b      	lsrs	r3, r3, #24
 8007738:	61bb      	str	r3, [r7, #24]
 800773a:	e016      	b.n	800776a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	695b      	ldr	r3, [r3, #20]
 8007740:	61bb      	str	r3, [r7, #24]
 8007742:	e012      	b.n	800776a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	695b      	ldr	r3, [r3, #20]
 8007748:	005b      	lsls	r3, r3, #1
 800774a:	6a3a      	ldr	r2, [r7, #32]
 800774c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007750:	4a26      	ldr	r2, [pc, #152]	; (80077ec <HAL_SD_ConfigWideBusOperation+0x220>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d906      	bls.n	8007764 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	4a22      	ldr	r2, [pc, #136]	; (80077e4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800775a:	fba2 2303 	umull	r2, r3, r2, r3
 800775e:	0e1b      	lsrs	r3, r3, #24
 8007760:	61bb      	str	r3, [r7, #24]
 8007762:	e002      	b.n	800776a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681c      	ldr	r4, [r3, #0]
 800776e:	466a      	mov	r2, sp
 8007770:	f107 0314 	add.w	r3, r7, #20
 8007774:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007778:	e882 0003 	stmia.w	r2, {r0, r1}
 800777c:	f107 0308 	add.w	r3, r7, #8
 8007780:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007782:	4620      	mov	r0, r4
 8007784:	f002 f84e 	bl	8009824 <SDMMC_Init>
 8007788:	e008      	b.n	800779c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800778e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80077a4:	4618      	mov	r0, r3
 80077a6:	f002 f91b 	bl	80099e0 <SDMMC_CmdBlockLength>
 80077aa:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00c      	beq.n	80077cc <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a0a      	ldr	r2, [pc, #40]	; (80077e0 <HAL_SD_ConfigWideBusOperation+0x214>)
 80077b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	431a      	orrs	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80077d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80077d8:	4618      	mov	r0, r3
 80077da:	372c      	adds	r7, #44	; 0x2c
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd90      	pop	{r4, r7, pc}
 80077e0:	1fe00fff 	.word	0x1fe00fff
 80077e4:	55e63b89 	.word	0x55e63b89
 80077e8:	02faf080 	.word	0x02faf080
 80077ec:	017d7840 	.word	0x017d7840

080077f0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80077f8:	2300      	movs	r3, #0
 80077fa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80077fc:	f107 030c 	add.w	r3, r7, #12
 8007800:	4619      	mov	r1, r3
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fa40 	bl	8007c88 <SD_SendStatus>
 8007808:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d005      	beq.n	800781c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	431a      	orrs	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	0a5b      	lsrs	r3, r3, #9
 8007820:	f003 030f 	and.w	r3, r3, #15
 8007824:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007826:	693b      	ldr	r3, [r7, #16]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3718      	adds	r7, #24
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b090      	sub	sp, #64	; 0x40
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8007838:	2300      	movs	r3, #0
 800783a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800783c:	f7f9 fc6a 	bl	8001114 <HAL_GetTick>
 8007840:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4618      	mov	r0, r3
 8007848:	f002 f845 	bl	80098d6 <SDMMC_GetPowerState>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d102      	bne.n	8007858 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007852:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007856:	e0b5      	b.n	80079c4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785c:	2b03      	cmp	r3, #3
 800785e:	d02e      	beq.n	80078be <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4618      	mov	r0, r3
 8007866:	f002 fa90 	bl	8009d8a <SDMMC_CmdSendCID>
 800786a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800786c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786e:	2b00      	cmp	r3, #0
 8007870:	d001      	beq.n	8007876 <SD_InitCard+0x46>
    {
      return errorstate;
 8007872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007874:	e0a6      	b.n	80079c4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2100      	movs	r1, #0
 800787c:	4618      	mov	r0, r3
 800787e:	f002 f870 	bl	8009962 <SDMMC_GetResponse>
 8007882:	4602      	mov	r2, r0
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2104      	movs	r1, #4
 800788e:	4618      	mov	r0, r3
 8007890:	f002 f867 	bl	8009962 <SDMMC_GetResponse>
 8007894:	4602      	mov	r2, r0
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2108      	movs	r1, #8
 80078a0:	4618      	mov	r0, r3
 80078a2:	f002 f85e 	bl	8009962 <SDMMC_GetResponse>
 80078a6:	4602      	mov	r2, r0
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	210c      	movs	r1, #12
 80078b2:	4618      	mov	r0, r3
 80078b4:	f002 f855 	bl	8009962 <SDMMC_GetResponse>
 80078b8:	4602      	mov	r2, r0
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	d01d      	beq.n	8007902 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80078c6:	e019      	b.n	80078fc <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f107 020a 	add.w	r2, r7, #10
 80078d0:	4611      	mov	r1, r2
 80078d2:	4618      	mov	r0, r3
 80078d4:	f002 fa98 	bl	8009e08 <SDMMC_CmdSetRelAdd>
 80078d8:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80078da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d001      	beq.n	80078e4 <SD_InitCard+0xb4>
      {
        return errorstate;
 80078e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e2:	e06f      	b.n	80079c4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80078e4:	f7f9 fc16 	bl	8001114 <HAL_GetTick>
 80078e8:	4602      	mov	r2, r0
 80078ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ec:	1ad3      	subs	r3, r2, r3
 80078ee:	f241 3287 	movw	r2, #4999	; 0x1387
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d902      	bls.n	80078fc <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80078f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80078fa:	e063      	b.n	80079c4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80078fc:	897b      	ldrh	r3, [r7, #10]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d0e2      	beq.n	80078c8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007906:	2b03      	cmp	r3, #3
 8007908:	d036      	beq.n	8007978 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800790a:	897b      	ldrh	r3, [r7, #10]
 800790c:	461a      	mov	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800791a:	041b      	lsls	r3, r3, #16
 800791c:	4619      	mov	r1, r3
 800791e:	4610      	mov	r0, r2
 8007920:	f002 fa52 	bl	8009dc8 <SDMMC_CmdSendCSD>
 8007924:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007928:	2b00      	cmp	r3, #0
 800792a:	d001      	beq.n	8007930 <SD_InitCard+0x100>
    {
      return errorstate;
 800792c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792e:	e049      	b.n	80079c4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2100      	movs	r1, #0
 8007936:	4618      	mov	r0, r3
 8007938:	f002 f813 	bl	8009962 <SDMMC_GetResponse>
 800793c:	4602      	mov	r2, r0
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2104      	movs	r1, #4
 8007948:	4618      	mov	r0, r3
 800794a:	f002 f80a 	bl	8009962 <SDMMC_GetResponse>
 800794e:	4602      	mov	r2, r0
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2108      	movs	r1, #8
 800795a:	4618      	mov	r0, r3
 800795c:	f002 f801 	bl	8009962 <SDMMC_GetResponse>
 8007960:	4602      	mov	r2, r0
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	210c      	movs	r1, #12
 800796c:	4618      	mov	r0, r3
 800796e:	f001 fff8 	bl	8009962 <SDMMC_GetResponse>
 8007972:	4602      	mov	r2, r0
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2104      	movs	r1, #4
 800797e:	4618      	mov	r0, r3
 8007980:	f001 ffef 	bl	8009962 <SDMMC_GetResponse>
 8007984:	4603      	mov	r3, r0
 8007986:	0d1a      	lsrs	r2, r3, #20
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800798c:	f107 030c 	add.w	r3, r7, #12
 8007990:	4619      	mov	r1, r3
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f7ff fb8c 	bl	80070b0 <HAL_SD_GetCardCSD>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800799e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80079a2:	e00f      	b.n	80079c4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ac:	041b      	lsls	r3, r3, #16
 80079ae:	4619      	mov	r1, r3
 80079b0:	4610      	mov	r0, r2
 80079b2:	f002 f901 	bl	8009bb8 <SDMMC_CmdSelDesel>
 80079b6:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80079b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d001      	beq.n	80079c2 <SD_InitCard+0x192>
  {
    return errorstate;
 80079be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c0:	e000      	b.n	80079c4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3740      	adds	r7, #64	; 0x40
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b086      	sub	sp, #24
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079d4:	2300      	movs	r3, #0
 80079d6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80079d8:	2300      	movs	r3, #0
 80079da:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80079dc:	2300      	movs	r3, #0
 80079de:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4618      	mov	r0, r3
 80079e6:	f002 f90a 	bl	8009bfe <SDMMC_CmdGoIdleState>
 80079ea:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d001      	beq.n	80079f6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	e072      	b.n	8007adc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4618      	mov	r0, r3
 80079fc:	f002 f91d 	bl	8009c3a <SDMMC_CmdOperCond>
 8007a00:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a08:	d10d      	bne.n	8007a26 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4618      	mov	r0, r3
 8007a16:	f002 f8f2 	bl	8009bfe <SDMMC_CmdGoIdleState>
 8007a1a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d004      	beq.n	8007a2c <SD_PowerON+0x60>
    {
      return errorstate;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	e05a      	b.n	8007adc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d137      	bne.n	8007aa4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2100      	movs	r1, #0
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f002 f91d 	bl	8009c7a <SDMMC_CmdAppCommand>
 8007a40:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d02d      	beq.n	8007aa4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007a4c:	e046      	b.n	8007adc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2100      	movs	r1, #0
 8007a54:	4618      	mov	r0, r3
 8007a56:	f002 f910 	bl	8009c7a <SDMMC_CmdAppCommand>
 8007a5a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <SD_PowerON+0x9a>
    {
      return errorstate;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	e03a      	b.n	8007adc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	491e      	ldr	r1, [pc, #120]	; (8007ae4 <SD_PowerON+0x118>)
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f002 f927 	bl	8009cc0 <SDMMC_CmdAppOperCommand>
 8007a72:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d002      	beq.n	8007a80 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007a7e:	e02d      	b.n	8007adc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2100      	movs	r1, #0
 8007a86:	4618      	mov	r0, r3
 8007a88:	f001 ff6b 	bl	8009962 <SDMMC_GetResponse>
 8007a8c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	0fdb      	lsrs	r3, r3, #31
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d101      	bne.n	8007a9a <SD_PowerON+0xce>
 8007a96:	2301      	movs	r3, #1
 8007a98:	e000      	b.n	8007a9c <SD_PowerON+0xd0>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	613b      	str	r3, [r7, #16]

    count++;
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d802      	bhi.n	8007ab4 <SD_PowerON+0xe8>
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d0cc      	beq.n	8007a4e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d902      	bls.n	8007ac4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007abe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ac2:	e00b      	b.n	8007adc <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3718      	adds	r7, #24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	c1100000 	.word	0xc1100000

08007ae8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b08c      	sub	sp, #48	; 0x30
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007af2:	f7f9 fb0f 	bl	8001114 <HAL_GetTick>
 8007af6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2100      	movs	r1, #0
 8007b02:	4618      	mov	r0, r3
 8007b04:	f001 ff2d 	bl	8009962 <SDMMC_GetResponse>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b12:	d102      	bne.n	8007b1a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007b14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b18:	e0b0      	b.n	8007c7c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2140      	movs	r1, #64	; 0x40
 8007b20:	4618      	mov	r0, r3
 8007b22:	f001 ff5d 	bl	80099e0 <SDMMC_CmdBlockLength>
 8007b26:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007b28:	6a3b      	ldr	r3, [r7, #32]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d005      	beq.n	8007b3a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	e0a0      	b.n	8007c7c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b42:	041b      	lsls	r3, r3, #16
 8007b44:	4619      	mov	r1, r3
 8007b46:	4610      	mov	r0, r2
 8007b48:	f002 f897 	bl	8009c7a <SDMMC_CmdAppCommand>
 8007b4c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007b4e:	6a3b      	ldr	r3, [r7, #32]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d005      	beq.n	8007b60 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
 8007b5e:	e08d      	b.n	8007c7c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007b60:	f04f 33ff 	mov.w	r3, #4294967295
 8007b64:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007b66:	2340      	movs	r3, #64	; 0x40
 8007b68:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007b6a:	2360      	movs	r3, #96	; 0x60
 8007b6c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007b6e:	2302      	movs	r3, #2
 8007b70:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007b76:	2301      	movs	r3, #1
 8007b78:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f107 0208 	add.w	r2, r7, #8
 8007b82:	4611      	mov	r1, r2
 8007b84:	4618      	mov	r0, r3
 8007b86:	f001 feff 	bl	8009988 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f002 f97f 	bl	8009e92 <SDMMC_CmdStatusRegister>
 8007b94:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007b96:	6a3b      	ldr	r3, [r7, #32]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d02b      	beq.n	8007bf4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	e069      	b.n	8007c7c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d013      	beq.n	8007bde <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bba:	e00d      	b.n	8007bd8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f001 fe59 	bl	8009878 <SDMMC_ReadFIFO>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bca:	601a      	str	r2, [r3, #0]
        pData++;
 8007bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bce:	3304      	adds	r3, #4
 8007bd0:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8007bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bda:	2b07      	cmp	r3, #7
 8007bdc:	d9ee      	bls.n	8007bbc <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007bde:	f7f9 fa99 	bl	8001114 <HAL_GetTick>
 8007be2:	4602      	mov	r2, r0
 8007be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bec:	d102      	bne.n	8007bf4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007bee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007bf2:	e043      	b.n	8007c7c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bfa:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d0d2      	beq.n	8007ba8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c08:	f003 0308 	and.w	r3, r3, #8
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d001      	beq.n	8007c14 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007c10:	2308      	movs	r3, #8
 8007c12:	e033      	b.n	8007c7c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c1a:	f003 0302 	and.w	r3, r3, #2
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d001      	beq.n	8007c26 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007c22:	2302      	movs	r3, #2
 8007c24:	e02a      	b.n	8007c7c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c2c:	f003 0320 	and.w	r3, r3, #32
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d017      	beq.n	8007c64 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007c34:	2320      	movs	r3, #32
 8007c36:	e021      	b.n	8007c7c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f001 fe1b 	bl	8009878 <SDMMC_ReadFIFO>
 8007c42:	4602      	mov	r2, r0
 8007c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c46:	601a      	str	r2, [r3, #0]
    pData++;
 8007c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007c4e:	f7f9 fa61 	bl	8001114 <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c5c:	d102      	bne.n	8007c64 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007c5e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c62:	e00b      	b.n	8007c7c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1e2      	bne.n	8007c38 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a03      	ldr	r2, [pc, #12]	; (8007c84 <SD_SendSDStatus+0x19c>)
 8007c78:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3730      	adds	r7, #48	; 0x30
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	18000f3a 	.word	0x18000f3a

08007c88 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d102      	bne.n	8007c9e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007c98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c9c:	e018      	b.n	8007cd0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ca6:	041b      	lsls	r3, r3, #16
 8007ca8:	4619      	mov	r1, r3
 8007caa:	4610      	mov	r0, r2
 8007cac:	f002 f8ce 	bl	8009e4c <SDMMC_CmdSendStatus>
 8007cb0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d001      	beq.n	8007cbc <SD_SendStatus+0x34>
  {
    return errorstate;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	e009      	b.n	8007cd0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f001 fe4d 	bl	8009962 <SDMMC_GetResponse>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	60fb      	str	r3, [r7, #12]
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2100      	movs	r1, #0
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f001 fe37 	bl	8009962 <SDMMC_GetResponse>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cfe:	d102      	bne.n	8007d06 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007d00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d04:	e02f      	b.n	8007d66 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007d06:	f107 030c 	add.w	r3, r7, #12
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f879 	bl	8007e04 <SD_FindSCR>
 8007d12:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	e023      	b.n	8007d66 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d01c      	beq.n	8007d62 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d30:	041b      	lsls	r3, r3, #16
 8007d32:	4619      	mov	r1, r3
 8007d34:	4610      	mov	r0, r2
 8007d36:	f001 ffa0 	bl	8009c7a <SDMMC_CmdAppCommand>
 8007d3a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d001      	beq.n	8007d46 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	e00f      	b.n	8007d66 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2102      	movs	r1, #2
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f001 ffd7 	bl	8009d00 <SDMMC_CmdBusWidth>
 8007d52:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d001      	beq.n	8007d5e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	e003      	b.n	8007d66 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	e001      	b.n	8007d66 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007d62:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3718      	adds	r7, #24
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b086      	sub	sp, #24
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007d76:	2300      	movs	r3, #0
 8007d78:	60fb      	str	r3, [r7, #12]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2100      	movs	r1, #0
 8007d84:	4618      	mov	r0, r3
 8007d86:	f001 fdec 	bl	8009962 <SDMMC_GetResponse>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d94:	d102      	bne.n	8007d9c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007d96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d9a:	e02f      	b.n	8007dfc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007d9c:	f107 030c 	add.w	r3, r7, #12
 8007da0:	4619      	mov	r1, r3
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f82e 	bl	8007e04 <SD_FindSCR>
 8007da8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d001      	beq.n	8007db4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	e023      	b.n	8007dfc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d01c      	beq.n	8007df8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dc6:	041b      	lsls	r3, r3, #16
 8007dc8:	4619      	mov	r1, r3
 8007dca:	4610      	mov	r0, r2
 8007dcc:	f001 ff55 	bl	8009c7a <SDMMC_CmdAppCommand>
 8007dd0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	e00f      	b.n	8007dfc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2100      	movs	r1, #0
 8007de2:	4618      	mov	r0, r3
 8007de4:	f001 ff8c 	bl	8009d00 <SDMMC_CmdBusWidth>
 8007de8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d001      	beq.n	8007df4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	e003      	b.n	8007dfc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007df4:	2300      	movs	r3, #0
 8007df6:	e001      	b.n	8007dfc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007df8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3718      	adds	r7, #24
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b08e      	sub	sp, #56	; 0x38
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007e0e:	f7f9 f981 	bl	8001114 <HAL_GetTick>
 8007e12:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007e14:	2300      	movs	r3, #0
 8007e16:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007e18:	2300      	movs	r3, #0
 8007e1a:	60bb      	str	r3, [r7, #8]
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2108      	movs	r1, #8
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f001 fdd8 	bl	80099e0 <SDMMC_CmdBlockLength>
 8007e30:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d001      	beq.n	8007e3c <SD_FindSCR+0x38>
  {
    return errorstate;
 8007e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3a:	e0ad      	b.n	8007f98 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e44:	041b      	lsls	r3, r3, #16
 8007e46:	4619      	mov	r1, r3
 8007e48:	4610      	mov	r0, r2
 8007e4a:	f001 ff16 	bl	8009c7a <SDMMC_CmdAppCommand>
 8007e4e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <SD_FindSCR+0x56>
  {
    return errorstate;
 8007e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e58:	e09e      	b.n	8007f98 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e5e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007e60:	2308      	movs	r3, #8
 8007e62:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007e64:	2330      	movs	r3, #48	; 0x30
 8007e66:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007e68:	2302      	movs	r3, #2
 8007e6a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007e70:	2301      	movs	r3, #1
 8007e72:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f107 0210 	add.w	r2, r7, #16
 8007e7c:	4611      	mov	r1, r2
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f001 fd82 	bl	8009988 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f001 ff5c 	bl	8009d46 <SDMMC_CmdSendSCR>
 8007e8e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d027      	beq.n	8007ee6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e98:	e07e      	b.n	8007f98 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ea0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d113      	bne.n	8007ed0 <SD_FindSCR+0xcc>
 8007ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d110      	bne.n	8007ed0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f001 fce0 	bl	8009878 <SDMMC_ReadFIFO>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f001 fcd9 	bl	8009878 <SDMMC_ReadFIFO>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	60fb      	str	r3, [r7, #12]
      index++;
 8007eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ecc:	3301      	adds	r3, #1
 8007ece:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007ed0:	f7f9 f920 	bl	8001114 <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ede:	d102      	bne.n	8007ee6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007ee0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ee4:	e058      	b.n	8007f98 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eec:	f240 532a 	movw	r3, #1322	; 0x52a
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d0d1      	beq.n	8007e9a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007efc:	f003 0308 	and.w	r3, r3, #8
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d005      	beq.n	8007f10 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2208      	movs	r2, #8
 8007f0a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007f0c:	2308      	movs	r3, #8
 8007f0e:	e043      	b.n	8007f98 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f16:	f003 0302 	and.w	r3, r3, #2
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d005      	beq.n	8007f2a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2202      	movs	r2, #2
 8007f24:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007f26:	2302      	movs	r3, #2
 8007f28:	e036      	b.n	8007f98 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f30:	f003 0320 	and.w	r3, r3, #32
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d005      	beq.n	8007f44 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2220      	movs	r2, #32
 8007f3e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007f40:	2320      	movs	r3, #32
 8007f42:	e029      	b.n	8007f98 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a15      	ldr	r2, [pc, #84]	; (8007fa0 <SD_FindSCR+0x19c>)
 8007f4a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	061a      	lsls	r2, r3, #24
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	021b      	lsls	r3, r3, #8
 8007f54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f58:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	0a1b      	lsrs	r3, r3, #8
 8007f5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007f62:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	0e1b      	lsrs	r3, r3, #24
 8007f68:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6c:	601a      	str	r2, [r3, #0]
    scr++;
 8007f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f70:	3304      	adds	r3, #4
 8007f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	061a      	lsls	r2, r3, #24
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	021b      	lsls	r3, r3, #8
 8007f7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f80:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	0a1b      	lsrs	r3, r3, #8
 8007f86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007f8a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	0e1b      	lsrs	r3, r3, #24
 8007f90:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f94:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3738      	adds	r7, #56	; 0x38
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	18000f3a 	.word	0x18000f3a

08007fa4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e0f1      	b.n	800819a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a78      	ldr	r2, [pc, #480]	; (80081a4 <HAL_SPI_Init+0x200>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d00f      	beq.n	8007fe6 <HAL_SPI_Init+0x42>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a77      	ldr	r2, [pc, #476]	; (80081a8 <HAL_SPI_Init+0x204>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d00a      	beq.n	8007fe6 <HAL_SPI_Init+0x42>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a75      	ldr	r2, [pc, #468]	; (80081ac <HAL_SPI_Init+0x208>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d005      	beq.n	8007fe6 <HAL_SPI_Init+0x42>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	2b0f      	cmp	r3, #15
 8007fe0:	d901      	bls.n	8007fe6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e0d9      	b.n	800819a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fb90 	bl	800870c <SPI_GetPacketSize>
 8007fec:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a6c      	ldr	r2, [pc, #432]	; (80081a4 <HAL_SPI_Init+0x200>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d00c      	beq.n	8008012 <HAL_SPI_Init+0x6e>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a6a      	ldr	r2, [pc, #424]	; (80081a8 <HAL_SPI_Init+0x204>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d007      	beq.n	8008012 <HAL_SPI_Init+0x6e>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a69      	ldr	r2, [pc, #420]	; (80081ac <HAL_SPI_Init+0x208>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d002      	beq.n	8008012 <HAL_SPI_Init+0x6e>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2b08      	cmp	r3, #8
 8008010:	d811      	bhi.n	8008036 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008016:	4a63      	ldr	r2, [pc, #396]	; (80081a4 <HAL_SPI_Init+0x200>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d009      	beq.n	8008030 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a61      	ldr	r2, [pc, #388]	; (80081a8 <HAL_SPI_Init+0x204>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d004      	beq.n	8008030 <HAL_SPI_Init+0x8c>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a60      	ldr	r2, [pc, #384]	; (80081ac <HAL_SPI_Init+0x208>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d104      	bne.n	800803a <HAL_SPI_Init+0x96>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2b10      	cmp	r3, #16
 8008034:	d901      	bls.n	800803a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e0af      	b.n	800819a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	d106      	bne.n	8008054 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7f8 fd98 	bl	8000b84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2202      	movs	r2, #2
 8008058:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f022 0201 	bic.w	r2, r2, #1
 800806a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008076:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008080:	d119      	bne.n	80080b6 <HAL_SPI_Init+0x112>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800808a:	d103      	bne.n	8008094 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008090:	2b00      	cmp	r3, #0
 8008092:	d008      	beq.n	80080a6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10c      	bne.n	80080b6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80080a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080a4:	d107      	bne.n	80080b6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80080b4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	69da      	ldr	r2, [r3, #28]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080be:	431a      	orrs	r2, r3
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	431a      	orrs	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080c8:	ea42 0103 	orr.w	r1, r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	68da      	ldr	r2, [r3, #12]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	430a      	orrs	r2, r1
 80080d6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e0:	431a      	orrs	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e6:	431a      	orrs	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	431a      	orrs	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	431a      	orrs	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	695b      	ldr	r3, [r3, #20]
 80080f8:	431a      	orrs	r2, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a1b      	ldr	r3, [r3, #32]
 80080fe:	431a      	orrs	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	431a      	orrs	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800810a:	431a      	orrs	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	431a      	orrs	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008116:	ea42 0103 	orr.w	r1, r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	430a      	orrs	r2, r1
 8008124:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d113      	bne.n	8008156 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008140:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008154:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f022 0201 	bic.w	r2, r2, #1
 8008164:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00a      	beq.n	8008188 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	430a      	orrs	r2, r1
 8008186:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	40013000 	.word	0x40013000
 80081a8:	40003800 	.word	0x40003800
 80081ac:	40003c00 	.word	0x40003c00

080081b0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b08a      	sub	sp, #40	; 0x28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	695b      	ldr	r3, [r3, #20]
 80081c6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80081c8:	6a3a      	ldr	r2, [r7, #32]
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	4013      	ands	r3, r2
 80081ce:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80081d8:	2300      	movs	r3, #0
 80081da:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80081e2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3330      	adds	r3, #48	; 0x30
 80081ea:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d113      	bne.n	800821e <HAL_SPI_IRQHandler+0x6e>
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	f003 0320 	and.w	r3, r3, #32
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d10e      	bne.n	800821e <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008206:	2b00      	cmp	r3, #0
 8008208:	d009      	beq.n	800821e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	4798      	blx	r3
    handled = 1UL;
 800821a:	2301      	movs	r3, #1
 800821c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10f      	bne.n	8008248 <HAL_SPI_IRQHandler+0x98>
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00a      	beq.n	8008248 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008238:	2b00      	cmp	r3, #0
 800823a:	d105      	bne.n	8008248 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	4798      	blx	r3
    handled = 1UL;
 8008244:	2301      	movs	r3, #1
 8008246:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	f003 0320 	and.w	r3, r3, #32
 800824e:	2b00      	cmp	r3, #0
 8008250:	d10f      	bne.n	8008272 <HAL_SPI_IRQHandler+0xc2>
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	f003 0302 	and.w	r3, r3, #2
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00a      	beq.n	8008272 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008262:	2b00      	cmp	r3, #0
 8008264:	d105      	bne.n	8008272 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	4798      	blx	r3
    handled = 1UL;
 800826e:	2301      	movs	r3, #1
 8008270:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8008272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008274:	2b00      	cmp	r3, #0
 8008276:	f040 815a 	bne.w	800852e <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	f003 0308 	and.w	r3, r3, #8
 8008280:	2b00      	cmp	r3, #0
 8008282:	f000 808b 	beq.w	800839c <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	699a      	ldr	r2, [r3, #24]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f042 0208 	orr.w	r2, r2, #8
 8008294:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	699a      	ldr	r2, [r3, #24]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f042 0210 	orr.w	r2, r2, #16
 80082a4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	699a      	ldr	r2, [r3, #24]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082b4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	691a      	ldr	r2, [r3, #16]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f022 0208 	bic.w	r2, r2, #8
 80082c4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d13d      	bne.n	8008350 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80082d4:	e036      	b.n	8008344 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	2b0f      	cmp	r3, #15
 80082dc:	d90b      	bls.n	80082f6 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80082e8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082ee:	1d1a      	adds	r2, r3, #4
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	665a      	str	r2, [r3, #100]	; 0x64
 80082f4:	e01d      	b.n	8008332 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	2b07      	cmp	r3, #7
 80082fc:	d90b      	bls.n	8008316 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	8812      	ldrh	r2, [r2, #0]
 8008306:	b292      	uxth	r2, r2
 8008308:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800830e:	1c9a      	adds	r2, r3, #2
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	665a      	str	r2, [r3, #100]	; 0x64
 8008314:	e00d      	b.n	8008332 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008322:	7812      	ldrb	r2, [r2, #0]
 8008324:	b2d2      	uxtb	r2, r2
 8008326:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800832c:	1c5a      	adds	r2, r3, #1
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008338:	b29b      	uxth	r3, r3
 800833a:	3b01      	subs	r3, #1
 800833c:	b29a      	uxth	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800834a:	b29b      	uxth	r3, r3
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1c2      	bne.n	80082d6 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f93b 	bl	80085cc <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2201      	movs	r2, #1
 800835a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008364:	2b00      	cmp	r3, #0
 8008366:	d003      	beq.n	8008370 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f90b 	bl	8008584 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800836e:	e0e3      	b.n	8008538 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008370:	7cfb      	ldrb	r3, [r7, #19]
 8008372:	2b05      	cmp	r3, #5
 8008374:	d103      	bne.n	800837e <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f8fa 	bl	8008570 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800837c:	e0d9      	b.n	8008532 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800837e:	7cfb      	ldrb	r3, [r7, #19]
 8008380:	2b04      	cmp	r3, #4
 8008382:	d103      	bne.n	800838c <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f8e9 	bl	800855c <HAL_SPI_RxCpltCallback>
    return;
 800838a:	e0d2      	b.n	8008532 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800838c:	7cfb      	ldrb	r3, [r7, #19]
 800838e:	2b03      	cmp	r3, #3
 8008390:	f040 80cf 	bne.w	8008532 <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f8d7 	bl	8008548 <HAL_SPI_TxCpltCallback>
    return;
 800839a:	e0ca      	b.n	8008532 <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00d      	beq.n	80083c2 <HAL_SPI_IRQHandler+0x212>
 80083a6:	6a3b      	ldr	r3, [r7, #32]
 80083a8:	f003 0308 	and.w	r3, r3, #8
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d008      	beq.n	80083c2 <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	699a      	ldr	r2, [r3, #24]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083be:	619a      	str	r2, [r3, #24]

    return;
 80083c0:	e0ba      	b.n	8008538 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f000 80b5 	beq.w	8008538 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00f      	beq.n	80083f8 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083de:	f043 0204 	orr.w	r2, r3, #4
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	699a      	ldr	r2, [r3, #24]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083f6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00f      	beq.n	8008422 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008408:	f043 0201 	orr.w	r2, r3, #1
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	699a      	ldr	r2, [r3, #24]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008420:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00f      	beq.n	800844c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008432:	f043 0208 	orr.w	r2, r3, #8
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	699a      	ldr	r2, [r3, #24]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800844a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	f003 0320 	and.w	r3, r3, #32
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00f      	beq.n	8008476 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800845c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	699a      	ldr	r2, [r3, #24]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f042 0220 	orr.w	r2, r2, #32
 8008474:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800847c:	2b00      	cmp	r3, #0
 800847e:	d05a      	beq.n	8008536 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f022 0201 	bic.w	r2, r2, #1
 800848e:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	6919      	ldr	r1, [r3, #16]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	4b29      	ldr	r3, [pc, #164]	; (8008540 <HAL_SPI_IRQHandler+0x390>)
 800849c:	400b      	ands	r3, r1
 800849e:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80084a6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80084aa:	d138      	bne.n	800851e <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	689a      	ldr	r2, [r3, #8]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80084ba:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d013      	beq.n	80084ec <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084c8:	4a1e      	ldr	r2, [pc, #120]	; (8008544 <HAL_SPI_IRQHandler+0x394>)
 80084ca:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7f9 fac7 	bl	8001a64 <HAL_DMA_Abort_IT>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d007      	beq.n	80084ec <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d020      	beq.n	8008536 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084f8:	4a12      	ldr	r2, [pc, #72]	; (8008544 <HAL_SPI_IRQHandler+0x394>)
 80084fa:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008500:	4618      	mov	r0, r3
 8008502:	f7f9 faaf 	bl	8001a64 <HAL_DMA_Abort_IT>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d014      	beq.n	8008536 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008512:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800851c:	e00b      	b.n	8008536 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2201      	movs	r2, #1
 8008522:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 f82c 	bl	8008584 <HAL_SPI_ErrorCallback>
    return;
 800852c:	e003      	b.n	8008536 <HAL_SPI_IRQHandler+0x386>
    return;
 800852e:	bf00      	nop
 8008530:	e002      	b.n	8008538 <HAL_SPI_IRQHandler+0x388>
    return;
 8008532:	bf00      	nop
 8008534:	e000      	b.n	8008538 <HAL_SPI_IRQHandler+0x388>
    return;
 8008536:	bf00      	nop
  }
}
 8008538:	3728      	adds	r7, #40	; 0x28
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	fffffc94 	.word	0xfffffc94
 8008544:	08008599 	.word	0x08008599

08008548 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008564:	bf00      	nop
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f7ff ffe0 	bl	8008584 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80085c4:	bf00      	nop
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	699a      	ldr	r2, [r3, #24]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f042 0208 	orr.w	r2, r2, #8
 80085ea:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	699a      	ldr	r2, [r3, #24]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f042 0210 	orr.w	r2, r2, #16
 80085fa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f022 0201 	bic.w	r2, r2, #1
 800860a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	6919      	ldr	r1, [r3, #16]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	4b3c      	ldr	r3, [pc, #240]	; (8008708 <SPI_CloseTransfer+0x13c>)
 8008618:	400b      	ands	r3, r1
 800861a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	689a      	ldr	r2, [r3, #8]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800862a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008632:	b2db      	uxtb	r3, r3
 8008634:	2b04      	cmp	r3, #4
 8008636:	d014      	beq.n	8008662 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f003 0320 	and.w	r3, r3, #32
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00f      	beq.n	8008662 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008648:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	699a      	ldr	r2, [r3, #24]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f042 0220 	orr.w	r2, r2, #32
 8008660:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b03      	cmp	r3, #3
 800866c:	d014      	beq.n	8008698 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00f      	beq.n	8008698 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800867e:	f043 0204 	orr.w	r2, r3, #4
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	699a      	ldr	r2, [r3, #24]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008696:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00f      	beq.n	80086c2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086a8:	f043 0201 	orr.w	r2, r3, #1
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	699a      	ldr	r2, [r3, #24]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086c0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00f      	beq.n	80086ec <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086d2:	f043 0208 	orr.w	r2, r3, #8
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	699a      	ldr	r2, [r3, #24]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086ea:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80086fc:	bf00      	nop
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	fffffc90 	.word	0xfffffc90

0800870c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008718:	095b      	lsrs	r3, r3, #5
 800871a:	3301      	adds	r3, #1
 800871c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	3301      	adds	r3, #1
 8008724:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	3307      	adds	r3, #7
 800872a:	08db      	lsrs	r3, r3, #3
 800872c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	fb02 f303 	mul.w	r3, r2, r3
}
 8008736:	4618      	mov	r0, r3
 8008738:	3714      	adds	r7, #20
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr

08008742 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b082      	sub	sp, #8
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d101      	bne.n	8008754 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	e042      	b.n	80087da <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800875a:	2b00      	cmp	r3, #0
 800875c:	d106      	bne.n	800876c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7f8 faee 	bl	8000d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2224      	movs	r2, #36	; 0x24
 8008770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f022 0201 	bic.w	r2, r2, #1
 8008782:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f82d 	bl	80087e4 <UART_SetConfig>
 800878a:	4603      	mov	r3, r0
 800878c:	2b01      	cmp	r3, #1
 800878e:	d101      	bne.n	8008794 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e022      	b.n	80087da <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008798:	2b00      	cmp	r3, #0
 800879a:	d002      	beq.n	80087a2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fd89 	bl	80092b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	685a      	ldr	r2, [r3, #4]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80087b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	689a      	ldr	r2, [r3, #8]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80087c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f042 0201 	orr.w	r2, r2, #1
 80087d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fe10 	bl	80093f8 <UART_CheckIdleState>
 80087d8:	4603      	mov	r3, r0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3708      	adds	r7, #8
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
	...

080087e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087e8:	b092      	sub	sp, #72	; 0x48
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	689a      	ldr	r2, [r3, #8]
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	431a      	orrs	r2, r3
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	431a      	orrs	r2, r3
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	69db      	ldr	r3, [r3, #28]
 8008808:	4313      	orrs	r3, r2
 800880a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	4bbe      	ldr	r3, [pc, #760]	; (8008b0c <UART_SetConfig+0x328>)
 8008814:	4013      	ands	r3, r2
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	6812      	ldr	r2, [r2, #0]
 800881a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800881c:	430b      	orrs	r3, r1
 800881e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	68da      	ldr	r2, [r3, #12]
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	430a      	orrs	r2, r1
 8008834:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	699b      	ldr	r3, [r3, #24]
 800883a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4ab3      	ldr	r2, [pc, #716]	; (8008b10 <UART_SetConfig+0x32c>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d004      	beq.n	8008850 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	6a1b      	ldr	r3, [r3, #32]
 800884a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800884c:	4313      	orrs	r3, r2
 800884e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	689a      	ldr	r2, [r3, #8]
 8008856:	4baf      	ldr	r3, [pc, #700]	; (8008b14 <UART_SetConfig+0x330>)
 8008858:	4013      	ands	r3, r2
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	6812      	ldr	r2, [r2, #0]
 800885e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008860:	430b      	orrs	r3, r1
 8008862:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886a:	f023 010f 	bic.w	r1, r3, #15
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	430a      	orrs	r2, r1
 8008878:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4aa6      	ldr	r2, [pc, #664]	; (8008b18 <UART_SetConfig+0x334>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d177      	bne.n	8008974 <UART_SetConfig+0x190>
 8008884:	4ba5      	ldr	r3, [pc, #660]	; (8008b1c <UART_SetConfig+0x338>)
 8008886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008888:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800888c:	2b28      	cmp	r3, #40	; 0x28
 800888e:	d86d      	bhi.n	800896c <UART_SetConfig+0x188>
 8008890:	a201      	add	r2, pc, #4	; (adr r2, 8008898 <UART_SetConfig+0xb4>)
 8008892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008896:	bf00      	nop
 8008898:	0800893d 	.word	0x0800893d
 800889c:	0800896d 	.word	0x0800896d
 80088a0:	0800896d 	.word	0x0800896d
 80088a4:	0800896d 	.word	0x0800896d
 80088a8:	0800896d 	.word	0x0800896d
 80088ac:	0800896d 	.word	0x0800896d
 80088b0:	0800896d 	.word	0x0800896d
 80088b4:	0800896d 	.word	0x0800896d
 80088b8:	08008945 	.word	0x08008945
 80088bc:	0800896d 	.word	0x0800896d
 80088c0:	0800896d 	.word	0x0800896d
 80088c4:	0800896d 	.word	0x0800896d
 80088c8:	0800896d 	.word	0x0800896d
 80088cc:	0800896d 	.word	0x0800896d
 80088d0:	0800896d 	.word	0x0800896d
 80088d4:	0800896d 	.word	0x0800896d
 80088d8:	0800894d 	.word	0x0800894d
 80088dc:	0800896d 	.word	0x0800896d
 80088e0:	0800896d 	.word	0x0800896d
 80088e4:	0800896d 	.word	0x0800896d
 80088e8:	0800896d 	.word	0x0800896d
 80088ec:	0800896d 	.word	0x0800896d
 80088f0:	0800896d 	.word	0x0800896d
 80088f4:	0800896d 	.word	0x0800896d
 80088f8:	08008955 	.word	0x08008955
 80088fc:	0800896d 	.word	0x0800896d
 8008900:	0800896d 	.word	0x0800896d
 8008904:	0800896d 	.word	0x0800896d
 8008908:	0800896d 	.word	0x0800896d
 800890c:	0800896d 	.word	0x0800896d
 8008910:	0800896d 	.word	0x0800896d
 8008914:	0800896d 	.word	0x0800896d
 8008918:	0800895d 	.word	0x0800895d
 800891c:	0800896d 	.word	0x0800896d
 8008920:	0800896d 	.word	0x0800896d
 8008924:	0800896d 	.word	0x0800896d
 8008928:	0800896d 	.word	0x0800896d
 800892c:	0800896d 	.word	0x0800896d
 8008930:	0800896d 	.word	0x0800896d
 8008934:	0800896d 	.word	0x0800896d
 8008938:	08008965 	.word	0x08008965
 800893c:	2301      	movs	r3, #1
 800893e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008942:	e222      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008944:	2304      	movs	r3, #4
 8008946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800894a:	e21e      	b.n	8008d8a <UART_SetConfig+0x5a6>
 800894c:	2308      	movs	r3, #8
 800894e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008952:	e21a      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008954:	2310      	movs	r3, #16
 8008956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800895a:	e216      	b.n	8008d8a <UART_SetConfig+0x5a6>
 800895c:	2320      	movs	r3, #32
 800895e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008962:	e212      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008964:	2340      	movs	r3, #64	; 0x40
 8008966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800896a:	e20e      	b.n	8008d8a <UART_SetConfig+0x5a6>
 800896c:	2380      	movs	r3, #128	; 0x80
 800896e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008972:	e20a      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a69      	ldr	r2, [pc, #420]	; (8008b20 <UART_SetConfig+0x33c>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d130      	bne.n	80089e0 <UART_SetConfig+0x1fc>
 800897e:	4b67      	ldr	r3, [pc, #412]	; (8008b1c <UART_SetConfig+0x338>)
 8008980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008982:	f003 0307 	and.w	r3, r3, #7
 8008986:	2b05      	cmp	r3, #5
 8008988:	d826      	bhi.n	80089d8 <UART_SetConfig+0x1f4>
 800898a:	a201      	add	r2, pc, #4	; (adr r2, 8008990 <UART_SetConfig+0x1ac>)
 800898c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008990:	080089a9 	.word	0x080089a9
 8008994:	080089b1 	.word	0x080089b1
 8008998:	080089b9 	.word	0x080089b9
 800899c:	080089c1 	.word	0x080089c1
 80089a0:	080089c9 	.word	0x080089c9
 80089a4:	080089d1 	.word	0x080089d1
 80089a8:	2300      	movs	r3, #0
 80089aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ae:	e1ec      	b.n	8008d8a <UART_SetConfig+0x5a6>
 80089b0:	2304      	movs	r3, #4
 80089b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089b6:	e1e8      	b.n	8008d8a <UART_SetConfig+0x5a6>
 80089b8:	2308      	movs	r3, #8
 80089ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089be:	e1e4      	b.n	8008d8a <UART_SetConfig+0x5a6>
 80089c0:	2310      	movs	r3, #16
 80089c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089c6:	e1e0      	b.n	8008d8a <UART_SetConfig+0x5a6>
 80089c8:	2320      	movs	r3, #32
 80089ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ce:	e1dc      	b.n	8008d8a <UART_SetConfig+0x5a6>
 80089d0:	2340      	movs	r3, #64	; 0x40
 80089d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089d6:	e1d8      	b.n	8008d8a <UART_SetConfig+0x5a6>
 80089d8:	2380      	movs	r3, #128	; 0x80
 80089da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089de:	e1d4      	b.n	8008d8a <UART_SetConfig+0x5a6>
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a4f      	ldr	r2, [pc, #316]	; (8008b24 <UART_SetConfig+0x340>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d130      	bne.n	8008a4c <UART_SetConfig+0x268>
 80089ea:	4b4c      	ldr	r3, [pc, #304]	; (8008b1c <UART_SetConfig+0x338>)
 80089ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ee:	f003 0307 	and.w	r3, r3, #7
 80089f2:	2b05      	cmp	r3, #5
 80089f4:	d826      	bhi.n	8008a44 <UART_SetConfig+0x260>
 80089f6:	a201      	add	r2, pc, #4	; (adr r2, 80089fc <UART_SetConfig+0x218>)
 80089f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fc:	08008a15 	.word	0x08008a15
 8008a00:	08008a1d 	.word	0x08008a1d
 8008a04:	08008a25 	.word	0x08008a25
 8008a08:	08008a2d 	.word	0x08008a2d
 8008a0c:	08008a35 	.word	0x08008a35
 8008a10:	08008a3d 	.word	0x08008a3d
 8008a14:	2300      	movs	r3, #0
 8008a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a1a:	e1b6      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008a1c:	2304      	movs	r3, #4
 8008a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a22:	e1b2      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008a24:	2308      	movs	r3, #8
 8008a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a2a:	e1ae      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008a2c:	2310      	movs	r3, #16
 8008a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a32:	e1aa      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008a34:	2320      	movs	r3, #32
 8008a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a3a:	e1a6      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008a3c:	2340      	movs	r3, #64	; 0x40
 8008a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a42:	e1a2      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008a44:	2380      	movs	r3, #128	; 0x80
 8008a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a4a:	e19e      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a35      	ldr	r2, [pc, #212]	; (8008b28 <UART_SetConfig+0x344>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d130      	bne.n	8008ab8 <UART_SetConfig+0x2d4>
 8008a56:	4b31      	ldr	r3, [pc, #196]	; (8008b1c <UART_SetConfig+0x338>)
 8008a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a5a:	f003 0307 	and.w	r3, r3, #7
 8008a5e:	2b05      	cmp	r3, #5
 8008a60:	d826      	bhi.n	8008ab0 <UART_SetConfig+0x2cc>
 8008a62:	a201      	add	r2, pc, #4	; (adr r2, 8008a68 <UART_SetConfig+0x284>)
 8008a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a68:	08008a81 	.word	0x08008a81
 8008a6c:	08008a89 	.word	0x08008a89
 8008a70:	08008a91 	.word	0x08008a91
 8008a74:	08008a99 	.word	0x08008a99
 8008a78:	08008aa1 	.word	0x08008aa1
 8008a7c:	08008aa9 	.word	0x08008aa9
 8008a80:	2300      	movs	r3, #0
 8008a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a86:	e180      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008a88:	2304      	movs	r3, #4
 8008a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a8e:	e17c      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008a90:	2308      	movs	r3, #8
 8008a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a96:	e178      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008a98:	2310      	movs	r3, #16
 8008a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a9e:	e174      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008aa0:	2320      	movs	r3, #32
 8008aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aa6:	e170      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008aa8:	2340      	movs	r3, #64	; 0x40
 8008aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aae:	e16c      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008ab0:	2380      	movs	r3, #128	; 0x80
 8008ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ab6:	e168      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a1b      	ldr	r2, [pc, #108]	; (8008b2c <UART_SetConfig+0x348>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d142      	bne.n	8008b48 <UART_SetConfig+0x364>
 8008ac2:	4b16      	ldr	r3, [pc, #88]	; (8008b1c <UART_SetConfig+0x338>)
 8008ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac6:	f003 0307 	and.w	r3, r3, #7
 8008aca:	2b05      	cmp	r3, #5
 8008acc:	d838      	bhi.n	8008b40 <UART_SetConfig+0x35c>
 8008ace:	a201      	add	r2, pc, #4	; (adr r2, 8008ad4 <UART_SetConfig+0x2f0>)
 8008ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad4:	08008aed 	.word	0x08008aed
 8008ad8:	08008af5 	.word	0x08008af5
 8008adc:	08008afd 	.word	0x08008afd
 8008ae0:	08008b05 	.word	0x08008b05
 8008ae4:	08008b31 	.word	0x08008b31
 8008ae8:	08008b39 	.word	0x08008b39
 8008aec:	2300      	movs	r3, #0
 8008aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008af2:	e14a      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008af4:	2304      	movs	r3, #4
 8008af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008afa:	e146      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008afc:	2308      	movs	r3, #8
 8008afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b02:	e142      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008b04:	2310      	movs	r3, #16
 8008b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b0a:	e13e      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008b0c:	cfff69f3 	.word	0xcfff69f3
 8008b10:	58000c00 	.word	0x58000c00
 8008b14:	11fff4ff 	.word	0x11fff4ff
 8008b18:	40011000 	.word	0x40011000
 8008b1c:	58024400 	.word	0x58024400
 8008b20:	40004400 	.word	0x40004400
 8008b24:	40004800 	.word	0x40004800
 8008b28:	40004c00 	.word	0x40004c00
 8008b2c:	40005000 	.word	0x40005000
 8008b30:	2320      	movs	r3, #32
 8008b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b36:	e128      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008b38:	2340      	movs	r3, #64	; 0x40
 8008b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b3e:	e124      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008b40:	2380      	movs	r3, #128	; 0x80
 8008b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b46:	e120      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4acb      	ldr	r2, [pc, #812]	; (8008e7c <UART_SetConfig+0x698>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d176      	bne.n	8008c40 <UART_SetConfig+0x45c>
 8008b52:	4bcb      	ldr	r3, [pc, #812]	; (8008e80 <UART_SetConfig+0x69c>)
 8008b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b5a:	2b28      	cmp	r3, #40	; 0x28
 8008b5c:	d86c      	bhi.n	8008c38 <UART_SetConfig+0x454>
 8008b5e:	a201      	add	r2, pc, #4	; (adr r2, 8008b64 <UART_SetConfig+0x380>)
 8008b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b64:	08008c09 	.word	0x08008c09
 8008b68:	08008c39 	.word	0x08008c39
 8008b6c:	08008c39 	.word	0x08008c39
 8008b70:	08008c39 	.word	0x08008c39
 8008b74:	08008c39 	.word	0x08008c39
 8008b78:	08008c39 	.word	0x08008c39
 8008b7c:	08008c39 	.word	0x08008c39
 8008b80:	08008c39 	.word	0x08008c39
 8008b84:	08008c11 	.word	0x08008c11
 8008b88:	08008c39 	.word	0x08008c39
 8008b8c:	08008c39 	.word	0x08008c39
 8008b90:	08008c39 	.word	0x08008c39
 8008b94:	08008c39 	.word	0x08008c39
 8008b98:	08008c39 	.word	0x08008c39
 8008b9c:	08008c39 	.word	0x08008c39
 8008ba0:	08008c39 	.word	0x08008c39
 8008ba4:	08008c19 	.word	0x08008c19
 8008ba8:	08008c39 	.word	0x08008c39
 8008bac:	08008c39 	.word	0x08008c39
 8008bb0:	08008c39 	.word	0x08008c39
 8008bb4:	08008c39 	.word	0x08008c39
 8008bb8:	08008c39 	.word	0x08008c39
 8008bbc:	08008c39 	.word	0x08008c39
 8008bc0:	08008c39 	.word	0x08008c39
 8008bc4:	08008c21 	.word	0x08008c21
 8008bc8:	08008c39 	.word	0x08008c39
 8008bcc:	08008c39 	.word	0x08008c39
 8008bd0:	08008c39 	.word	0x08008c39
 8008bd4:	08008c39 	.word	0x08008c39
 8008bd8:	08008c39 	.word	0x08008c39
 8008bdc:	08008c39 	.word	0x08008c39
 8008be0:	08008c39 	.word	0x08008c39
 8008be4:	08008c29 	.word	0x08008c29
 8008be8:	08008c39 	.word	0x08008c39
 8008bec:	08008c39 	.word	0x08008c39
 8008bf0:	08008c39 	.word	0x08008c39
 8008bf4:	08008c39 	.word	0x08008c39
 8008bf8:	08008c39 	.word	0x08008c39
 8008bfc:	08008c39 	.word	0x08008c39
 8008c00:	08008c39 	.word	0x08008c39
 8008c04:	08008c31 	.word	0x08008c31
 8008c08:	2301      	movs	r3, #1
 8008c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c0e:	e0bc      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008c10:	2304      	movs	r3, #4
 8008c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c16:	e0b8      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008c18:	2308      	movs	r3, #8
 8008c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c1e:	e0b4      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008c20:	2310      	movs	r3, #16
 8008c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c26:	e0b0      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008c28:	2320      	movs	r3, #32
 8008c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c2e:	e0ac      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008c30:	2340      	movs	r3, #64	; 0x40
 8008c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c36:	e0a8      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008c38:	2380      	movs	r3, #128	; 0x80
 8008c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c3e:	e0a4      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a8f      	ldr	r2, [pc, #572]	; (8008e84 <UART_SetConfig+0x6a0>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d130      	bne.n	8008cac <UART_SetConfig+0x4c8>
 8008c4a:	4b8d      	ldr	r3, [pc, #564]	; (8008e80 <UART_SetConfig+0x69c>)
 8008c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c4e:	f003 0307 	and.w	r3, r3, #7
 8008c52:	2b05      	cmp	r3, #5
 8008c54:	d826      	bhi.n	8008ca4 <UART_SetConfig+0x4c0>
 8008c56:	a201      	add	r2, pc, #4	; (adr r2, 8008c5c <UART_SetConfig+0x478>)
 8008c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c5c:	08008c75 	.word	0x08008c75
 8008c60:	08008c7d 	.word	0x08008c7d
 8008c64:	08008c85 	.word	0x08008c85
 8008c68:	08008c8d 	.word	0x08008c8d
 8008c6c:	08008c95 	.word	0x08008c95
 8008c70:	08008c9d 	.word	0x08008c9d
 8008c74:	2300      	movs	r3, #0
 8008c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c7a:	e086      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008c7c:	2304      	movs	r3, #4
 8008c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c82:	e082      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008c84:	2308      	movs	r3, #8
 8008c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c8a:	e07e      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008c8c:	2310      	movs	r3, #16
 8008c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c92:	e07a      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008c94:	2320      	movs	r3, #32
 8008c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c9a:	e076      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008c9c:	2340      	movs	r3, #64	; 0x40
 8008c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ca2:	e072      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008ca4:	2380      	movs	r3, #128	; 0x80
 8008ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008caa:	e06e      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a75      	ldr	r2, [pc, #468]	; (8008e88 <UART_SetConfig+0x6a4>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d130      	bne.n	8008d18 <UART_SetConfig+0x534>
 8008cb6:	4b72      	ldr	r3, [pc, #456]	; (8008e80 <UART_SetConfig+0x69c>)
 8008cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cba:	f003 0307 	and.w	r3, r3, #7
 8008cbe:	2b05      	cmp	r3, #5
 8008cc0:	d826      	bhi.n	8008d10 <UART_SetConfig+0x52c>
 8008cc2:	a201      	add	r2, pc, #4	; (adr r2, 8008cc8 <UART_SetConfig+0x4e4>)
 8008cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc8:	08008ce1 	.word	0x08008ce1
 8008ccc:	08008ce9 	.word	0x08008ce9
 8008cd0:	08008cf1 	.word	0x08008cf1
 8008cd4:	08008cf9 	.word	0x08008cf9
 8008cd8:	08008d01 	.word	0x08008d01
 8008cdc:	08008d09 	.word	0x08008d09
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ce6:	e050      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008ce8:	2304      	movs	r3, #4
 8008cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cee:	e04c      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008cf0:	2308      	movs	r3, #8
 8008cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cf6:	e048      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008cf8:	2310      	movs	r3, #16
 8008cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cfe:	e044      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008d00:	2320      	movs	r3, #32
 8008d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d06:	e040      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008d08:	2340      	movs	r3, #64	; 0x40
 8008d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d0e:	e03c      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008d10:	2380      	movs	r3, #128	; 0x80
 8008d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d16:	e038      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a5b      	ldr	r2, [pc, #364]	; (8008e8c <UART_SetConfig+0x6a8>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d130      	bne.n	8008d84 <UART_SetConfig+0x5a0>
 8008d22:	4b57      	ldr	r3, [pc, #348]	; (8008e80 <UART_SetConfig+0x69c>)
 8008d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d26:	f003 0307 	and.w	r3, r3, #7
 8008d2a:	2b05      	cmp	r3, #5
 8008d2c:	d826      	bhi.n	8008d7c <UART_SetConfig+0x598>
 8008d2e:	a201      	add	r2, pc, #4	; (adr r2, 8008d34 <UART_SetConfig+0x550>)
 8008d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d34:	08008d4d 	.word	0x08008d4d
 8008d38:	08008d55 	.word	0x08008d55
 8008d3c:	08008d5d 	.word	0x08008d5d
 8008d40:	08008d65 	.word	0x08008d65
 8008d44:	08008d6d 	.word	0x08008d6d
 8008d48:	08008d75 	.word	0x08008d75
 8008d4c:	2302      	movs	r3, #2
 8008d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d52:	e01a      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008d54:	2304      	movs	r3, #4
 8008d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d5a:	e016      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008d5c:	2308      	movs	r3, #8
 8008d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d62:	e012      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008d64:	2310      	movs	r3, #16
 8008d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d6a:	e00e      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008d6c:	2320      	movs	r3, #32
 8008d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d72:	e00a      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008d74:	2340      	movs	r3, #64	; 0x40
 8008d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d7a:	e006      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008d7c:	2380      	movs	r3, #128	; 0x80
 8008d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d82:	e002      	b.n	8008d8a <UART_SetConfig+0x5a6>
 8008d84:	2380      	movs	r3, #128	; 0x80
 8008d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a3f      	ldr	r2, [pc, #252]	; (8008e8c <UART_SetConfig+0x6a8>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	f040 80f8 	bne.w	8008f86 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008d9a:	2b20      	cmp	r3, #32
 8008d9c:	dc46      	bgt.n	8008e2c <UART_SetConfig+0x648>
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	f2c0 8082 	blt.w	8008ea8 <UART_SetConfig+0x6c4>
 8008da4:	3b02      	subs	r3, #2
 8008da6:	2b1e      	cmp	r3, #30
 8008da8:	d87e      	bhi.n	8008ea8 <UART_SetConfig+0x6c4>
 8008daa:	a201      	add	r2, pc, #4	; (adr r2, 8008db0 <UART_SetConfig+0x5cc>)
 8008dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db0:	08008e33 	.word	0x08008e33
 8008db4:	08008ea9 	.word	0x08008ea9
 8008db8:	08008e3b 	.word	0x08008e3b
 8008dbc:	08008ea9 	.word	0x08008ea9
 8008dc0:	08008ea9 	.word	0x08008ea9
 8008dc4:	08008ea9 	.word	0x08008ea9
 8008dc8:	08008e4b 	.word	0x08008e4b
 8008dcc:	08008ea9 	.word	0x08008ea9
 8008dd0:	08008ea9 	.word	0x08008ea9
 8008dd4:	08008ea9 	.word	0x08008ea9
 8008dd8:	08008ea9 	.word	0x08008ea9
 8008ddc:	08008ea9 	.word	0x08008ea9
 8008de0:	08008ea9 	.word	0x08008ea9
 8008de4:	08008ea9 	.word	0x08008ea9
 8008de8:	08008e5b 	.word	0x08008e5b
 8008dec:	08008ea9 	.word	0x08008ea9
 8008df0:	08008ea9 	.word	0x08008ea9
 8008df4:	08008ea9 	.word	0x08008ea9
 8008df8:	08008ea9 	.word	0x08008ea9
 8008dfc:	08008ea9 	.word	0x08008ea9
 8008e00:	08008ea9 	.word	0x08008ea9
 8008e04:	08008ea9 	.word	0x08008ea9
 8008e08:	08008ea9 	.word	0x08008ea9
 8008e0c:	08008ea9 	.word	0x08008ea9
 8008e10:	08008ea9 	.word	0x08008ea9
 8008e14:	08008ea9 	.word	0x08008ea9
 8008e18:	08008ea9 	.word	0x08008ea9
 8008e1c:	08008ea9 	.word	0x08008ea9
 8008e20:	08008ea9 	.word	0x08008ea9
 8008e24:	08008ea9 	.word	0x08008ea9
 8008e28:	08008e9b 	.word	0x08008e9b
 8008e2c:	2b40      	cmp	r3, #64	; 0x40
 8008e2e:	d037      	beq.n	8008ea0 <UART_SetConfig+0x6bc>
 8008e30:	e03a      	b.n	8008ea8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008e32:	f7fc ff97 	bl	8005d64 <HAL_RCCEx_GetD3PCLK1Freq>
 8008e36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e38:	e03c      	b.n	8008eb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7fc ffa6 	bl	8005d90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e48:	e034      	b.n	8008eb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e4a:	f107 0318 	add.w	r3, r7, #24
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7fd f8f2 	bl	8006038 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e58:	e02c      	b.n	8008eb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e5a:	4b09      	ldr	r3, [pc, #36]	; (8008e80 <UART_SetConfig+0x69c>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 0320 	and.w	r3, r3, #32
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d016      	beq.n	8008e94 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e66:	4b06      	ldr	r3, [pc, #24]	; (8008e80 <UART_SetConfig+0x69c>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	08db      	lsrs	r3, r3, #3
 8008e6c:	f003 0303 	and.w	r3, r3, #3
 8008e70:	4a07      	ldr	r2, [pc, #28]	; (8008e90 <UART_SetConfig+0x6ac>)
 8008e72:	fa22 f303 	lsr.w	r3, r2, r3
 8008e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e78:	e01c      	b.n	8008eb4 <UART_SetConfig+0x6d0>
 8008e7a:	bf00      	nop
 8008e7c:	40011400 	.word	0x40011400
 8008e80:	58024400 	.word	0x58024400
 8008e84:	40007800 	.word	0x40007800
 8008e88:	40007c00 	.word	0x40007c00
 8008e8c:	58000c00 	.word	0x58000c00
 8008e90:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008e94:	4b9d      	ldr	r3, [pc, #628]	; (800910c <UART_SetConfig+0x928>)
 8008e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e98:	e00c      	b.n	8008eb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e9a:	4b9d      	ldr	r3, [pc, #628]	; (8009110 <UART_SetConfig+0x92c>)
 8008e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e9e:	e009      	b.n	8008eb4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ea0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ea6:	e005      	b.n	8008eb4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008eac:	2301      	movs	r3, #1
 8008eae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008eb2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f000 81de 	beq.w	8009278 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec0:	4a94      	ldr	r2, [pc, #592]	; (8009114 <UART_SetConfig+0x930>)
 8008ec2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eca:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ece:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	685a      	ldr	r2, [r3, #4]
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	005b      	lsls	r3, r3, #1
 8008ed8:	4413      	add	r3, r2
 8008eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d305      	bcc.n	8008eec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d903      	bls.n	8008ef4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008ef2:	e1c1      	b.n	8009278 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	60bb      	str	r3, [r7, #8]
 8008efa:	60fa      	str	r2, [r7, #12]
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f00:	4a84      	ldr	r2, [pc, #528]	; (8009114 <UART_SetConfig+0x930>)
 8008f02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	2200      	movs	r2, #0
 8008f0a:	603b      	str	r3, [r7, #0]
 8008f0c:	607a      	str	r2, [r7, #4]
 8008f0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008f16:	f7f7 f9df 	bl	80002d8 <__aeabi_uldivmod>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	4610      	mov	r0, r2
 8008f20:	4619      	mov	r1, r3
 8008f22:	f04f 0200 	mov.w	r2, #0
 8008f26:	f04f 0300 	mov.w	r3, #0
 8008f2a:	020b      	lsls	r3, r1, #8
 8008f2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008f30:	0202      	lsls	r2, r0, #8
 8008f32:	6979      	ldr	r1, [r7, #20]
 8008f34:	6849      	ldr	r1, [r1, #4]
 8008f36:	0849      	lsrs	r1, r1, #1
 8008f38:	2000      	movs	r0, #0
 8008f3a:	460c      	mov	r4, r1
 8008f3c:	4605      	mov	r5, r0
 8008f3e:	eb12 0804 	adds.w	r8, r2, r4
 8008f42:	eb43 0905 	adc.w	r9, r3, r5
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	469a      	mov	sl, r3
 8008f4e:	4693      	mov	fp, r2
 8008f50:	4652      	mov	r2, sl
 8008f52:	465b      	mov	r3, fp
 8008f54:	4640      	mov	r0, r8
 8008f56:	4649      	mov	r1, r9
 8008f58:	f7f7 f9be 	bl	80002d8 <__aeabi_uldivmod>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	460b      	mov	r3, r1
 8008f60:	4613      	mov	r3, r2
 8008f62:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f6a:	d308      	bcc.n	8008f7e <UART_SetConfig+0x79a>
 8008f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f72:	d204      	bcs.n	8008f7e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f7a:	60da      	str	r2, [r3, #12]
 8008f7c:	e17c      	b.n	8009278 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008f84:	e178      	b.n	8009278 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	69db      	ldr	r3, [r3, #28]
 8008f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f8e:	f040 80c5 	bne.w	800911c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008f92:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008f96:	2b20      	cmp	r3, #32
 8008f98:	dc48      	bgt.n	800902c <UART_SetConfig+0x848>
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	db7b      	blt.n	8009096 <UART_SetConfig+0x8b2>
 8008f9e:	2b20      	cmp	r3, #32
 8008fa0:	d879      	bhi.n	8009096 <UART_SetConfig+0x8b2>
 8008fa2:	a201      	add	r2, pc, #4	; (adr r2, 8008fa8 <UART_SetConfig+0x7c4>)
 8008fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa8:	08009033 	.word	0x08009033
 8008fac:	0800903b 	.word	0x0800903b
 8008fb0:	08009097 	.word	0x08009097
 8008fb4:	08009097 	.word	0x08009097
 8008fb8:	08009043 	.word	0x08009043
 8008fbc:	08009097 	.word	0x08009097
 8008fc0:	08009097 	.word	0x08009097
 8008fc4:	08009097 	.word	0x08009097
 8008fc8:	08009053 	.word	0x08009053
 8008fcc:	08009097 	.word	0x08009097
 8008fd0:	08009097 	.word	0x08009097
 8008fd4:	08009097 	.word	0x08009097
 8008fd8:	08009097 	.word	0x08009097
 8008fdc:	08009097 	.word	0x08009097
 8008fe0:	08009097 	.word	0x08009097
 8008fe4:	08009097 	.word	0x08009097
 8008fe8:	08009063 	.word	0x08009063
 8008fec:	08009097 	.word	0x08009097
 8008ff0:	08009097 	.word	0x08009097
 8008ff4:	08009097 	.word	0x08009097
 8008ff8:	08009097 	.word	0x08009097
 8008ffc:	08009097 	.word	0x08009097
 8009000:	08009097 	.word	0x08009097
 8009004:	08009097 	.word	0x08009097
 8009008:	08009097 	.word	0x08009097
 800900c:	08009097 	.word	0x08009097
 8009010:	08009097 	.word	0x08009097
 8009014:	08009097 	.word	0x08009097
 8009018:	08009097 	.word	0x08009097
 800901c:	08009097 	.word	0x08009097
 8009020:	08009097 	.word	0x08009097
 8009024:	08009097 	.word	0x08009097
 8009028:	08009089 	.word	0x08009089
 800902c:	2b40      	cmp	r3, #64	; 0x40
 800902e:	d02e      	beq.n	800908e <UART_SetConfig+0x8aa>
 8009030:	e031      	b.n	8009096 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009032:	f7fb fa53 	bl	80044dc <HAL_RCC_GetPCLK1Freq>
 8009036:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009038:	e033      	b.n	80090a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800903a:	f7fb fa65 	bl	8004508 <HAL_RCC_GetPCLK2Freq>
 800903e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009040:	e02f      	b.n	80090a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009046:	4618      	mov	r0, r3
 8009048:	f7fc fea2 	bl	8005d90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800904c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009050:	e027      	b.n	80090a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009052:	f107 0318 	add.w	r3, r7, #24
 8009056:	4618      	mov	r0, r3
 8009058:	f7fc ffee 	bl	8006038 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009060:	e01f      	b.n	80090a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009062:	4b2d      	ldr	r3, [pc, #180]	; (8009118 <UART_SetConfig+0x934>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 0320 	and.w	r3, r3, #32
 800906a:	2b00      	cmp	r3, #0
 800906c:	d009      	beq.n	8009082 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800906e:	4b2a      	ldr	r3, [pc, #168]	; (8009118 <UART_SetConfig+0x934>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	08db      	lsrs	r3, r3, #3
 8009074:	f003 0303 	and.w	r3, r3, #3
 8009078:	4a24      	ldr	r2, [pc, #144]	; (800910c <UART_SetConfig+0x928>)
 800907a:	fa22 f303 	lsr.w	r3, r2, r3
 800907e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009080:	e00f      	b.n	80090a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009082:	4b22      	ldr	r3, [pc, #136]	; (800910c <UART_SetConfig+0x928>)
 8009084:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009086:	e00c      	b.n	80090a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009088:	4b21      	ldr	r3, [pc, #132]	; (8009110 <UART_SetConfig+0x92c>)
 800908a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800908c:	e009      	b.n	80090a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800908e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009094:	e005      	b.n	80090a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009096:	2300      	movs	r3, #0
 8009098:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80090a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80090a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	f000 80e7 	beq.w	8009278 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ae:	4a19      	ldr	r2, [pc, #100]	; (8009114 <UART_SetConfig+0x930>)
 80090b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090b4:	461a      	mov	r2, r3
 80090b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80090bc:	005a      	lsls	r2, r3, #1
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	085b      	lsrs	r3, r3, #1
 80090c4:	441a      	add	r2, r3
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d2:	2b0f      	cmp	r3, #15
 80090d4:	d916      	bls.n	8009104 <UART_SetConfig+0x920>
 80090d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090dc:	d212      	bcs.n	8009104 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	f023 030f 	bic.w	r3, r3, #15
 80090e6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ea:	085b      	lsrs	r3, r3, #1
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	f003 0307 	and.w	r3, r3, #7
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80090f6:	4313      	orrs	r3, r2
 80090f8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009100:	60da      	str	r2, [r3, #12]
 8009102:	e0b9      	b.n	8009278 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800910a:	e0b5      	b.n	8009278 <UART_SetConfig+0xa94>
 800910c:	03d09000 	.word	0x03d09000
 8009110:	003d0900 	.word	0x003d0900
 8009114:	0800a834 	.word	0x0800a834
 8009118:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800911c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009120:	2b20      	cmp	r3, #32
 8009122:	dc49      	bgt.n	80091b8 <UART_SetConfig+0x9d4>
 8009124:	2b00      	cmp	r3, #0
 8009126:	db7c      	blt.n	8009222 <UART_SetConfig+0xa3e>
 8009128:	2b20      	cmp	r3, #32
 800912a:	d87a      	bhi.n	8009222 <UART_SetConfig+0xa3e>
 800912c:	a201      	add	r2, pc, #4	; (adr r2, 8009134 <UART_SetConfig+0x950>)
 800912e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009132:	bf00      	nop
 8009134:	080091bf 	.word	0x080091bf
 8009138:	080091c7 	.word	0x080091c7
 800913c:	08009223 	.word	0x08009223
 8009140:	08009223 	.word	0x08009223
 8009144:	080091cf 	.word	0x080091cf
 8009148:	08009223 	.word	0x08009223
 800914c:	08009223 	.word	0x08009223
 8009150:	08009223 	.word	0x08009223
 8009154:	080091df 	.word	0x080091df
 8009158:	08009223 	.word	0x08009223
 800915c:	08009223 	.word	0x08009223
 8009160:	08009223 	.word	0x08009223
 8009164:	08009223 	.word	0x08009223
 8009168:	08009223 	.word	0x08009223
 800916c:	08009223 	.word	0x08009223
 8009170:	08009223 	.word	0x08009223
 8009174:	080091ef 	.word	0x080091ef
 8009178:	08009223 	.word	0x08009223
 800917c:	08009223 	.word	0x08009223
 8009180:	08009223 	.word	0x08009223
 8009184:	08009223 	.word	0x08009223
 8009188:	08009223 	.word	0x08009223
 800918c:	08009223 	.word	0x08009223
 8009190:	08009223 	.word	0x08009223
 8009194:	08009223 	.word	0x08009223
 8009198:	08009223 	.word	0x08009223
 800919c:	08009223 	.word	0x08009223
 80091a0:	08009223 	.word	0x08009223
 80091a4:	08009223 	.word	0x08009223
 80091a8:	08009223 	.word	0x08009223
 80091ac:	08009223 	.word	0x08009223
 80091b0:	08009223 	.word	0x08009223
 80091b4:	08009215 	.word	0x08009215
 80091b8:	2b40      	cmp	r3, #64	; 0x40
 80091ba:	d02e      	beq.n	800921a <UART_SetConfig+0xa36>
 80091bc:	e031      	b.n	8009222 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091be:	f7fb f98d 	bl	80044dc <HAL_RCC_GetPCLK1Freq>
 80091c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80091c4:	e033      	b.n	800922e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091c6:	f7fb f99f 	bl	8004508 <HAL_RCC_GetPCLK2Freq>
 80091ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80091cc:	e02f      	b.n	800922e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fc fddc 	bl	8005d90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80091d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091dc:	e027      	b.n	800922e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091de:	f107 0318 	add.w	r3, r7, #24
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fc ff28 	bl	8006038 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091ec:	e01f      	b.n	800922e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091ee:	4b2d      	ldr	r3, [pc, #180]	; (80092a4 <UART_SetConfig+0xac0>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f003 0320 	and.w	r3, r3, #32
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d009      	beq.n	800920e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80091fa:	4b2a      	ldr	r3, [pc, #168]	; (80092a4 <UART_SetConfig+0xac0>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	08db      	lsrs	r3, r3, #3
 8009200:	f003 0303 	and.w	r3, r3, #3
 8009204:	4a28      	ldr	r2, [pc, #160]	; (80092a8 <UART_SetConfig+0xac4>)
 8009206:	fa22 f303 	lsr.w	r3, r2, r3
 800920a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800920c:	e00f      	b.n	800922e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800920e:	4b26      	ldr	r3, [pc, #152]	; (80092a8 <UART_SetConfig+0xac4>)
 8009210:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009212:	e00c      	b.n	800922e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009214:	4b25      	ldr	r3, [pc, #148]	; (80092ac <UART_SetConfig+0xac8>)
 8009216:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009218:	e009      	b.n	800922e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800921a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800921e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009220:	e005      	b.n	800922e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009222:	2300      	movs	r3, #0
 8009224:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800922c:	bf00      	nop
    }

    if (pclk != 0U)
 800922e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009230:	2b00      	cmp	r3, #0
 8009232:	d021      	beq.n	8009278 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009238:	4a1d      	ldr	r2, [pc, #116]	; (80092b0 <UART_SetConfig+0xacc>)
 800923a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800923e:	461a      	mov	r2, r3
 8009240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009242:	fbb3 f2f2 	udiv	r2, r3, r2
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	085b      	lsrs	r3, r3, #1
 800924c:	441a      	add	r2, r3
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	fbb2 f3f3 	udiv	r3, r2, r3
 8009256:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800925a:	2b0f      	cmp	r3, #15
 800925c:	d909      	bls.n	8009272 <UART_SetConfig+0xa8e>
 800925e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009264:	d205      	bcs.n	8009272 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009268:	b29a      	uxth	r2, r3
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	60da      	str	r2, [r3, #12]
 8009270:	e002      	b.n	8009278 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	2201      	movs	r2, #1
 800927c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	2201      	movs	r2, #1
 8009284:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	2200      	movs	r2, #0
 800928c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	2200      	movs	r2, #0
 8009292:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009294:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009298:	4618      	mov	r0, r3
 800929a:	3748      	adds	r7, #72	; 0x48
 800929c:	46bd      	mov	sp, r7
 800929e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092a2:	bf00      	nop
 80092a4:	58024400 	.word	0x58024400
 80092a8:	03d09000 	.word	0x03d09000
 80092ac:	003d0900 	.word	0x003d0900
 80092b0:	0800a834 	.word	0x0800a834

080092b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c0:	f003 0301 	and.w	r3, r3, #1
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00a      	beq.n	80092de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	430a      	orrs	r2, r1
 80092dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e2:	f003 0302 	and.w	r3, r3, #2
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00a      	beq.n	8009300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	430a      	orrs	r2, r1
 80092fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009304:	f003 0304 	and.w	r3, r3, #4
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00a      	beq.n	8009322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	430a      	orrs	r2, r1
 8009320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009326:	f003 0308 	and.w	r3, r3, #8
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00a      	beq.n	8009344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	430a      	orrs	r2, r1
 8009342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009348:	f003 0310 	and.w	r3, r3, #16
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00a      	beq.n	8009366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	430a      	orrs	r2, r1
 8009364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800936a:	f003 0320 	and.w	r3, r3, #32
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00a      	beq.n	8009388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	430a      	orrs	r2, r1
 8009386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800938c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009390:	2b00      	cmp	r3, #0
 8009392:	d01a      	beq.n	80093ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	430a      	orrs	r2, r1
 80093a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093b2:	d10a      	bne.n	80093ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	430a      	orrs	r2, r1
 80093c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00a      	beq.n	80093ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	430a      	orrs	r2, r1
 80093ea:	605a      	str	r2, [r3, #4]
  }
}
 80093ec:	bf00      	nop
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b086      	sub	sp, #24
 80093fc:	af02      	add	r7, sp, #8
 80093fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009408:	f7f7 fe84 	bl	8001114 <HAL_GetTick>
 800940c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f003 0308 	and.w	r3, r3, #8
 8009418:	2b08      	cmp	r3, #8
 800941a:	d10e      	bne.n	800943a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800941c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009420:	9300      	str	r3, [sp, #0]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2200      	movs	r2, #0
 8009426:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 f82f 	bl	800948e <UART_WaitOnFlagUntilTimeout>
 8009430:	4603      	mov	r3, r0
 8009432:	2b00      	cmp	r3, #0
 8009434:	d001      	beq.n	800943a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009436:	2303      	movs	r3, #3
 8009438:	e025      	b.n	8009486 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f003 0304 	and.w	r3, r3, #4
 8009444:	2b04      	cmp	r3, #4
 8009446:	d10e      	bne.n	8009466 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009448:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2200      	movs	r2, #0
 8009452:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f819 	bl	800948e <UART_WaitOnFlagUntilTimeout>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d001      	beq.n	8009466 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e00f      	b.n	8009486 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2220      	movs	r2, #32
 800946a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2220      	movs	r2, #32
 8009472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3710      	adds	r7, #16
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b09c      	sub	sp, #112	; 0x70
 8009492:	af00      	add	r7, sp, #0
 8009494:	60f8      	str	r0, [r7, #12]
 8009496:	60b9      	str	r1, [r7, #8]
 8009498:	603b      	str	r3, [r7, #0]
 800949a:	4613      	mov	r3, r2
 800949c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800949e:	e0a9      	b.n	80095f4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a6:	f000 80a5 	beq.w	80095f4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094aa:	f7f7 fe33 	bl	8001114 <HAL_GetTick>
 80094ae:	4602      	mov	r2, r0
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	1ad3      	subs	r3, r2, r3
 80094b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d302      	bcc.n	80094c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80094ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d140      	bne.n	8009542 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094c8:	e853 3f00 	ldrex	r3, [r3]
 80094cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80094ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80094d4:	667b      	str	r3, [r7, #100]	; 0x64
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	461a      	mov	r2, r3
 80094dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80094e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80094e6:	e841 2300 	strex	r3, r2, [r1]
 80094ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80094ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1e6      	bne.n	80094c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	3308      	adds	r3, #8
 80094f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094fc:	e853 3f00 	ldrex	r3, [r3]
 8009500:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009504:	f023 0301 	bic.w	r3, r3, #1
 8009508:	663b      	str	r3, [r7, #96]	; 0x60
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	3308      	adds	r3, #8
 8009510:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009512:	64ba      	str	r2, [r7, #72]	; 0x48
 8009514:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009516:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009518:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800951a:	e841 2300 	strex	r3, r2, [r1]
 800951e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009522:	2b00      	cmp	r3, #0
 8009524:	d1e5      	bne.n	80094f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2220      	movs	r2, #32
 800952a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2220      	movs	r2, #32
 8009532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800953e:	2303      	movs	r3, #3
 8009540:	e069      	b.n	8009616 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 0304 	and.w	r3, r3, #4
 800954c:	2b00      	cmp	r3, #0
 800954e:	d051      	beq.n	80095f4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800955a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800955e:	d149      	bne.n	80095f4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009568:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009572:	e853 3f00 	ldrex	r3, [r3]
 8009576:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800957e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	461a      	mov	r2, r3
 8009586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009588:	637b      	str	r3, [r7, #52]	; 0x34
 800958a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800958e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009590:	e841 2300 	strex	r3, r2, [r1]
 8009594:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1e6      	bne.n	800956a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	3308      	adds	r3, #8
 80095a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	e853 3f00 	ldrex	r3, [r3]
 80095aa:	613b      	str	r3, [r7, #16]
   return(result);
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	f023 0301 	bic.w	r3, r3, #1
 80095b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	3308      	adds	r3, #8
 80095ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80095bc:	623a      	str	r2, [r7, #32]
 80095be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c0:	69f9      	ldr	r1, [r7, #28]
 80095c2:	6a3a      	ldr	r2, [r7, #32]
 80095c4:	e841 2300 	strex	r3, r2, [r1]
 80095c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d1e5      	bne.n	800959c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2220      	movs	r2, #32
 80095d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2220      	movs	r2, #32
 80095dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2220      	movs	r2, #32
 80095e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80095f0:	2303      	movs	r3, #3
 80095f2:	e010      	b.n	8009616 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	69da      	ldr	r2, [r3, #28]
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	4013      	ands	r3, r2
 80095fe:	68ba      	ldr	r2, [r7, #8]
 8009600:	429a      	cmp	r2, r3
 8009602:	bf0c      	ite	eq
 8009604:	2301      	moveq	r3, #1
 8009606:	2300      	movne	r3, #0
 8009608:	b2db      	uxtb	r3, r3
 800960a:	461a      	mov	r2, r3
 800960c:	79fb      	ldrb	r3, [r7, #7]
 800960e:	429a      	cmp	r2, r3
 8009610:	f43f af46 	beq.w	80094a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3770      	adds	r7, #112	; 0x70
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800961e:	b480      	push	{r7}
 8009620:	b085      	sub	sp, #20
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800962c:	2b01      	cmp	r3, #1
 800962e:	d101      	bne.n	8009634 <HAL_UARTEx_DisableFifoMode+0x16>
 8009630:	2302      	movs	r3, #2
 8009632:	e027      	b.n	8009684 <HAL_UARTEx_DisableFifoMode+0x66>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2224      	movs	r2, #36	; 0x24
 8009640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f022 0201 	bic.w	r2, r2, #1
 800965a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009662:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2220      	movs	r2, #32
 8009676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009682:	2300      	movs	r3, #0
}
 8009684:	4618      	mov	r0, r3
 8009686:	3714      	adds	r7, #20
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d101      	bne.n	80096a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80096a4:	2302      	movs	r3, #2
 80096a6:	e02d      	b.n	8009704 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2224      	movs	r2, #36	; 0x24
 80096b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f022 0201 	bic.w	r2, r2, #1
 80096ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	683a      	ldr	r2, [r7, #0]
 80096e0:	430a      	orrs	r2, r1
 80096e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 f84f 	bl	8009788 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2220      	movs	r2, #32
 80096f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009702:	2300      	movs	r3, #0
}
 8009704:	4618      	mov	r0, r3
 8009706:	3710      	adds	r7, #16
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800971c:	2b01      	cmp	r3, #1
 800971e:	d101      	bne.n	8009724 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009720:	2302      	movs	r3, #2
 8009722:	e02d      	b.n	8009780 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2224      	movs	r2, #36	; 0x24
 8009730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f022 0201 	bic.w	r2, r2, #1
 800974a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	683a      	ldr	r2, [r7, #0]
 800975c:	430a      	orrs	r2, r1
 800975e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 f811 	bl	8009788 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2220      	movs	r2, #32
 8009772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	3710      	adds	r7, #16
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009794:	2b00      	cmp	r3, #0
 8009796:	d108      	bne.n	80097aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80097a8:	e031      	b.n	800980e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80097aa:	2310      	movs	r3, #16
 80097ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80097ae:	2310      	movs	r3, #16
 80097b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	0e5b      	lsrs	r3, r3, #25
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	f003 0307 	and.w	r3, r3, #7
 80097c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	0f5b      	lsrs	r3, r3, #29
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	f003 0307 	and.w	r3, r3, #7
 80097d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097d2:	7bbb      	ldrb	r3, [r7, #14]
 80097d4:	7b3a      	ldrb	r2, [r7, #12]
 80097d6:	4911      	ldr	r1, [pc, #68]	; (800981c <UARTEx_SetNbDataToProcess+0x94>)
 80097d8:	5c8a      	ldrb	r2, [r1, r2]
 80097da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80097de:	7b3a      	ldrb	r2, [r7, #12]
 80097e0:	490f      	ldr	r1, [pc, #60]	; (8009820 <UARTEx_SetNbDataToProcess+0x98>)
 80097e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
 80097f2:	7b7a      	ldrb	r2, [r7, #13]
 80097f4:	4909      	ldr	r1, [pc, #36]	; (800981c <UARTEx_SetNbDataToProcess+0x94>)
 80097f6:	5c8a      	ldrb	r2, [r1, r2]
 80097f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80097fc:	7b7a      	ldrb	r2, [r7, #13]
 80097fe:	4908      	ldr	r1, [pc, #32]	; (8009820 <UARTEx_SetNbDataToProcess+0x98>)
 8009800:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009802:	fb93 f3f2 	sdiv	r3, r3, r2
 8009806:	b29a      	uxth	r2, r3
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800980e:	bf00      	nop
 8009810:	3714      	adds	r7, #20
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	0800a84c 	.word	0x0800a84c
 8009820:	0800a854 	.word	0x0800a854

08009824 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009824:	b084      	sub	sp, #16
 8009826:	b480      	push	{r7}
 8009828:	b085      	sub	sp, #20
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
 800982e:	f107 001c 	add.w	r0, r7, #28
 8009832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009836:	2300      	movs	r3, #0
 8009838:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800983a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800983c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800983e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8009840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8009842:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8009844:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8009846:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800984a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800984c:	68fa      	ldr	r2, [r7, #12]
 800984e:	4313      	orrs	r3, r2
 8009850:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	685a      	ldr	r2, [r3, #4]
 8009856:	4b07      	ldr	r3, [pc, #28]	; (8009874 <SDMMC_Init+0x50>)
 8009858:	4013      	ands	r3, r2
 800985a:	68fa      	ldr	r2, [r7, #12]
 800985c:	431a      	orrs	r2, r3
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009862:	2300      	movs	r3, #0
}
 8009864:	4618      	mov	r0, r3
 8009866:	3714      	adds	r7, #20
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	b004      	add	sp, #16
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	ffc02c00 	.word	0xffc02c00

08009878 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009886:	4618      	mov	r0, r3
 8009888:	370c      	adds	r7, #12
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr

08009892 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8009892:	b480      	push	{r7}
 8009894:	b083      	sub	sp, #12
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
 800989a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f043 0203 	orr.w	r2, r3, #3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	370c      	adds	r7, #12
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr

080098d6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80098d6:	b480      	push	{r7}
 80098d8:	b083      	sub	sp, #12
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f003 0303 	and.w	r3, r3, #3
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	370c      	adds	r7, #12
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr
	...

080098f4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80098fe:	2300      	movs	r3, #0
 8009900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009912:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8009918:	431a      	orrs	r2, r3
                       Command->CPSM);
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800991e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	4313      	orrs	r3, r2
 8009924:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	68da      	ldr	r2, [r3, #12]
 800992a:	4b06      	ldr	r3, [pc, #24]	; (8009944 <SDMMC_SendCommand+0x50>)
 800992c:	4013      	ands	r3, r2
 800992e:	68fa      	ldr	r2, [r7, #12]
 8009930:	431a      	orrs	r2, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3714      	adds	r7, #20
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr
 8009944:	fffee0c0 	.word	0xfffee0c0

08009948 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	691b      	ldr	r3, [r3, #16]
 8009954:	b2db      	uxtb	r3, r3
}
 8009956:	4618      	mov	r0, r3
 8009958:	370c      	adds	r7, #12
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr

08009962 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009962:	b480      	push	{r7}
 8009964:	b085      	sub	sp, #20
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
 800996a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	3314      	adds	r3, #20
 8009970:	461a      	mov	r2, r3
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	4413      	add	r3, r2
 8009976:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
}
 800997c:	4618      	mov	r0, r3
 800997e:	3714      	adds	r7, #20
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8009988:	b480      	push	{r7}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009992:	2300      	movs	r3, #0
 8009994:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	681a      	ldr	r2, [r3, #0]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	685a      	ldr	r2, [r3, #4]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80099ae:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80099b4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80099ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80099bc:	68fa      	ldr	r2, [r7, #12]
 80099be:	4313      	orrs	r3, r2
 80099c0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	431a      	orrs	r2, r3
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80099d2:	2300      	movs	r3, #0

}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3714      	adds	r7, #20
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b088      	sub	sp, #32
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80099ee:	2310      	movs	r3, #16
 80099f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099f8:	2300      	movs	r3, #0
 80099fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a02:	f107 0308 	add.w	r3, r7, #8
 8009a06:	4619      	mov	r1, r3
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f7ff ff73 	bl	80098f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a12:	2110      	movs	r1, #16
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fa5f 	bl	8009ed8 <SDMMC_GetCmdResp1>
 8009a1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a1c:	69fb      	ldr	r3, [r7, #28]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3720      	adds	r7, #32
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b088      	sub	sp, #32
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
 8009a2e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009a34:	2311      	movs	r3, #17
 8009a36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a48:	f107 0308 	add.w	r3, r7, #8
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f7ff ff50 	bl	80098f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a58:	2111      	movs	r1, #17
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 fa3c 	bl	8009ed8 <SDMMC_GetCmdResp1>
 8009a60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a62:	69fb      	ldr	r3, [r7, #28]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3720      	adds	r7, #32
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b088      	sub	sp, #32
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009a7a:	2312      	movs	r3, #18
 8009a7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a84:	2300      	movs	r3, #0
 8009a86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a8e:	f107 0308 	add.w	r3, r7, #8
 8009a92:	4619      	mov	r1, r3
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f7ff ff2d 	bl	80098f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a9e:	2112      	movs	r1, #18
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 fa19 	bl	8009ed8 <SDMMC_GetCmdResp1>
 8009aa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009aa8:	69fb      	ldr	r3, [r7, #28]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3720      	adds	r7, #32
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b088      	sub	sp, #32
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
 8009aba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009ac0:	2318      	movs	r3, #24
 8009ac2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ac8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009aca:	2300      	movs	r3, #0
 8009acc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ad2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ad4:	f107 0308 	add.w	r3, r7, #8
 8009ad8:	4619      	mov	r1, r3
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f7ff ff0a 	bl	80098f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ae4:	2118      	movs	r1, #24
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f9f6 	bl	8009ed8 <SDMMC_GetCmdResp1>
 8009aec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009aee:	69fb      	ldr	r3, [r7, #28]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3720      	adds	r7, #32
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b088      	sub	sp, #32
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009b06:	2319      	movs	r3, #25
 8009b08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b10:	2300      	movs	r3, #0
 8009b12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b1a:	f107 0308 	add.w	r3, r7, #8
 8009b1e:	4619      	mov	r1, r3
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f7ff fee7 	bl	80098f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b2a:	2119      	movs	r1, #25
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 f9d3 	bl	8009ed8 <SDMMC_GetCmdResp1>
 8009b32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b34:	69fb      	ldr	r3, [r7, #28]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3720      	adds	r7, #32
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
	...

08009b40 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b088      	sub	sp, #32
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009b4c:	230c      	movs	r3, #12
 8009b4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b56:	2300      	movs	r3, #0
 8009b58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b5e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b78:	f107 0308 	add.w	r3, r7, #8
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f7ff feb8 	bl	80098f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009b84:	4a0b      	ldr	r2, [pc, #44]	; (8009bb4 <SDMMC_CmdStopTransfer+0x74>)
 8009b86:	210c      	movs	r1, #12
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 f9a5 	bl	8009ed8 <SDMMC_GetCmdResp1>
 8009b8e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ba2:	d101      	bne.n	8009ba8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8009ba8:	69fb      	ldr	r3, [r7, #28]
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3720      	adds	r7, #32
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	05f5e100 	.word	0x05f5e100

08009bb8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b088      	sub	sp, #32
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009bc6:	2307      	movs	r3, #7
 8009bc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bd8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bda:	f107 0308 	add.w	r3, r7, #8
 8009bde:	4619      	mov	r1, r3
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f7ff fe87 	bl	80098f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bea:	2107      	movs	r1, #7
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 f973 	bl	8009ed8 <SDMMC_GetCmdResp1>
 8009bf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bf4:	69fb      	ldr	r3, [r7, #28]
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3720      	adds	r7, #32
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b088      	sub	sp, #32
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009c06:	2300      	movs	r3, #0
 8009c08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c12:	2300      	movs	r3, #0
 8009c14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c1c:	f107 0308 	add.w	r3, r7, #8
 8009c20:	4619      	mov	r1, r3
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f7ff fe66 	bl	80098f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 fb97 	bl	800a35c <SDMMC_GetCmdError>
 8009c2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c30:	69fb      	ldr	r3, [r7, #28]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3720      	adds	r7, #32
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b088      	sub	sp, #32
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009c42:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009c46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009c48:	2308      	movs	r3, #8
 8009c4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c52:	2300      	movs	r3, #0
 8009c54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c5c:	f107 0308 	add.w	r3, r7, #8
 8009c60:	4619      	mov	r1, r3
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f7ff fe46 	bl	80098f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fb29 	bl	800a2c0 <SDMMC_GetCmdResp7>
 8009c6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c70:	69fb      	ldr	r3, [r7, #28]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3720      	adds	r7, #32
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b088      	sub	sp, #32
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
 8009c82:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009c88:	2337      	movs	r3, #55	; 0x37
 8009c8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c92:	2300      	movs	r3, #0
 8009c94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c9c:	f107 0308 	add.w	r3, r7, #8
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7ff fe26 	bl	80098f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cac:	2137      	movs	r1, #55	; 0x37
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 f912 	bl	8009ed8 <SDMMC_GetCmdResp1>
 8009cb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cb6:	69fb      	ldr	r3, [r7, #28]
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3720      	adds	r7, #32
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b088      	sub	sp, #32
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009cce:	2329      	movs	r3, #41	; 0x29
 8009cd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ce0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ce2:	f107 0308 	add.w	r3, r7, #8
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f7ff fe03 	bl	80098f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fa2e 	bl	800a150 <SDMMC_GetCmdResp3>
 8009cf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cf6:	69fb      	ldr	r3, [r7, #28]
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3720      	adds	r7, #32
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b088      	sub	sp, #32
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009d0e:	2306      	movs	r3, #6
 8009d10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d22:	f107 0308 	add.w	r3, r7, #8
 8009d26:	4619      	mov	r1, r3
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f7ff fde3 	bl	80098f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d32:	2106      	movs	r1, #6
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 f8cf 	bl	8009ed8 <SDMMC_GetCmdResp1>
 8009d3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d3c:	69fb      	ldr	r3, [r7, #28]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3720      	adds	r7, #32
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}

08009d46 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b088      	sub	sp, #32
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009d52:	2333      	movs	r3, #51	; 0x33
 8009d54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d66:	f107 0308 	add.w	r3, r7, #8
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f7ff fdc1 	bl	80098f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d76:	2133      	movs	r1, #51	; 0x33
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 f8ad 	bl	8009ed8 <SDMMC_GetCmdResp1>
 8009d7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d80:	69fb      	ldr	r3, [r7, #28]
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3720      	adds	r7, #32
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b088      	sub	sp, #32
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009d92:	2300      	movs	r3, #0
 8009d94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009d96:	2302      	movs	r3, #2
 8009d98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009d9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009d9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009da0:	2300      	movs	r3, #0
 8009da2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009da8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009daa:	f107 0308 	add.w	r3, r7, #8
 8009dae:	4619      	mov	r1, r3
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f7ff fd9f 	bl	80098f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 f980 	bl	800a0bc <SDMMC_GetCmdResp2>
 8009dbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dbe:	69fb      	ldr	r3, [r7, #28]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3720      	adds	r7, #32
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b088      	sub	sp, #32
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009dd6:	2309      	movs	r3, #9
 8009dd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009dda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009dde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009de0:	2300      	movs	r3, #0
 8009de2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009de8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009dea:	f107 0308 	add.w	r3, r7, #8
 8009dee:	4619      	mov	r1, r3
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f7ff fd7f 	bl	80098f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 f960 	bl	800a0bc <SDMMC_GetCmdResp2>
 8009dfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dfe:	69fb      	ldr	r3, [r7, #28]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3720      	adds	r7, #32
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b088      	sub	sp, #32
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009e12:	2300      	movs	r3, #0
 8009e14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009e16:	2303      	movs	r3, #3
 8009e18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e20:	2300      	movs	r3, #0
 8009e22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e2a:	f107 0308 	add.w	r3, r7, #8
 8009e2e:	4619      	mov	r1, r3
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f7ff fd5f 	bl	80098f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009e36:	683a      	ldr	r2, [r7, #0]
 8009e38:	2103      	movs	r1, #3
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f9c8 	bl	800a1d0 <SDMMC_GetCmdResp6>
 8009e40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e42:	69fb      	ldr	r3, [r7, #28]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3720      	adds	r7, #32
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b088      	sub	sp, #32
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009e5a:	230d      	movs	r3, #13
 8009e5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e64:	2300      	movs	r3, #0
 8009e66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e6e:	f107 0308 	add.w	r3, r7, #8
 8009e72:	4619      	mov	r1, r3
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f7ff fd3d 	bl	80098f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e7e:	210d      	movs	r1, #13
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 f829 	bl	8009ed8 <SDMMC_GetCmdResp1>
 8009e86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e88:	69fb      	ldr	r3, [r7, #28]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3720      	adds	r7, #32
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b088      	sub	sp, #32
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009e9e:	230d      	movs	r3, #13
 8009ea0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ea2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ea6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009eb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009eb2:	f107 0308 	add.w	r3, r7, #8
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f7ff fd1b 	bl	80098f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ec2:	210d      	movs	r1, #13
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 f807 	bl	8009ed8 <SDMMC_GetCmdResp1>
 8009eca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ecc:	69fb      	ldr	r3, [r7, #28]
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3720      	adds	r7, #32
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
	...

08009ed8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b088      	sub	sp, #32
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	607a      	str	r2, [r7, #4]
 8009ee4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009ee6:	4b70      	ldr	r3, [pc, #448]	; (800a0a8 <SDMMC_GetCmdResp1+0x1d0>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a70      	ldr	r2, [pc, #448]	; (800a0ac <SDMMC_GetCmdResp1+0x1d4>)
 8009eec:	fba2 2303 	umull	r2, r3, r2, r3
 8009ef0:	0a5a      	lsrs	r2, r3, #9
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	fb02 f303 	mul.w	r3, r2, r3
 8009ef8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	1e5a      	subs	r2, r3, #1
 8009efe:	61fa      	str	r2, [r7, #28]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d102      	bne.n	8009f0a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f08:	e0c9      	b.n	800a09e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f0e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009f10:	69ba      	ldr	r2, [r7, #24]
 8009f12:	4b67      	ldr	r3, [pc, #412]	; (800a0b0 <SDMMC_GetCmdResp1+0x1d8>)
 8009f14:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d0ef      	beq.n	8009efa <SDMMC_GetCmdResp1+0x22>
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d1ea      	bne.n	8009efa <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f28:	f003 0304 	and.w	r3, r3, #4
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d004      	beq.n	8009f3a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2204      	movs	r2, #4
 8009f34:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f36:	2304      	movs	r3, #4
 8009f38:	e0b1      	b.n	800a09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f3e:	f003 0301 	and.w	r3, r3, #1
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d004      	beq.n	8009f50 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e0a6      	b.n	800a09e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	4a58      	ldr	r2, [pc, #352]	; (800a0b4 <SDMMC_GetCmdResp1+0x1dc>)
 8009f54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f7ff fcf6 	bl	8009948 <SDMMC_GetCommandResponse>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	461a      	mov	r2, r3
 8009f60:	7afb      	ldrb	r3, [r7, #11]
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d001      	beq.n	8009f6a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f66:	2301      	movs	r3, #1
 8009f68:	e099      	b.n	800a09e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	68f8      	ldr	r0, [r7, #12]
 8009f6e:	f7ff fcf8 	bl	8009962 <SDMMC_GetResponse>
 8009f72:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009f74:	697a      	ldr	r2, [r7, #20]
 8009f76:	4b50      	ldr	r3, [pc, #320]	; (800a0b8 <SDMMC_GetCmdResp1+0x1e0>)
 8009f78:	4013      	ands	r3, r2
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d101      	bne.n	8009f82 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	e08d      	b.n	800a09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	da02      	bge.n	8009f8e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009f88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f8c:	e087      	b.n	800a09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d001      	beq.n	8009f9c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009f98:	2340      	movs	r3, #64	; 0x40
 8009f9a:	e080      	b.n	800a09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d001      	beq.n	8009faa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009fa6:	2380      	movs	r3, #128	; 0x80
 8009fa8:	e079      	b.n	800a09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d002      	beq.n	8009fba <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009fb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fb8:	e071      	b.n	800a09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d002      	beq.n	8009fca <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009fc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fc8:	e069      	b.n	800a09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d002      	beq.n	8009fda <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fd8:	e061      	b.n	800a09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d002      	beq.n	8009fea <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009fe4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009fe8:	e059      	b.n	800a09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d002      	beq.n	8009ffa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ff8:	e051      	b.n	800a09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a000:	2b00      	cmp	r3, #0
 800a002:	d002      	beq.n	800a00a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a004:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a008:	e049      	b.n	800a09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a010:	2b00      	cmp	r3, #0
 800a012:	d002      	beq.n	800a01a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a014:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a018:	e041      	b.n	800a09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a020:	2b00      	cmp	r3, #0
 800a022:	d002      	beq.n	800a02a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a024:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a028:	e039      	b.n	800a09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a030:	2b00      	cmp	r3, #0
 800a032:	d002      	beq.n	800a03a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a034:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a038:	e031      	b.n	800a09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a040:	2b00      	cmp	r3, #0
 800a042:	d002      	beq.n	800a04a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a044:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a048:	e029      	b.n	800a09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a050:	2b00      	cmp	r3, #0
 800a052:	d002      	beq.n	800a05a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a054:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a058:	e021      	b.n	800a09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a060:	2b00      	cmp	r3, #0
 800a062:	d002      	beq.n	800a06a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a064:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a068:	e019      	b.n	800a09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a070:	2b00      	cmp	r3, #0
 800a072:	d002      	beq.n	800a07a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a074:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a078:	e011      	b.n	800a09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a080:	2b00      	cmp	r3, #0
 800a082:	d002      	beq.n	800a08a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a084:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a088:	e009      	b.n	800a09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	f003 0308 	and.w	r3, r3, #8
 800a090:	2b00      	cmp	r3, #0
 800a092:	d002      	beq.n	800a09a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a094:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a098:	e001      	b.n	800a09e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a09a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3720      	adds	r7, #32
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	24000000 	.word	0x24000000
 800a0ac:	10624dd3 	.word	0x10624dd3
 800a0b0:	00200045 	.word	0x00200045
 800a0b4:	002000c5 	.word	0x002000c5
 800a0b8:	fdffe008 	.word	0xfdffe008

0800a0bc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a0c4:	4b1f      	ldr	r3, [pc, #124]	; (800a144 <SDMMC_GetCmdResp2+0x88>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a1f      	ldr	r2, [pc, #124]	; (800a148 <SDMMC_GetCmdResp2+0x8c>)
 800a0ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ce:	0a5b      	lsrs	r3, r3, #9
 800a0d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0d4:	fb02 f303 	mul.w	r3, r2, r3
 800a0d8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	1e5a      	subs	r2, r3, #1
 800a0de:	60fa      	str	r2, [r7, #12]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d102      	bne.n	800a0ea <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0e8:	e026      	b.n	800a138 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ee:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d0ef      	beq.n	800a0da <SDMMC_GetCmdResp2+0x1e>
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a100:	2b00      	cmp	r3, #0
 800a102:	d1ea      	bne.n	800a0da <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a108:	f003 0304 	and.w	r3, r3, #4
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d004      	beq.n	800a11a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2204      	movs	r2, #4
 800a114:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a116:	2304      	movs	r3, #4
 800a118:	e00e      	b.n	800a138 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a11e:	f003 0301 	and.w	r3, r3, #1
 800a122:	2b00      	cmp	r3, #0
 800a124:	d004      	beq.n	800a130 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2201      	movs	r2, #1
 800a12a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a12c:	2301      	movs	r3, #1
 800a12e:	e003      	b.n	800a138 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	4a06      	ldr	r2, [pc, #24]	; (800a14c <SDMMC_GetCmdResp2+0x90>)
 800a134:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a136:	2300      	movs	r3, #0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3714      	adds	r7, #20
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr
 800a144:	24000000 	.word	0x24000000
 800a148:	10624dd3 	.word	0x10624dd3
 800a14c:	002000c5 	.word	0x002000c5

0800a150 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a150:	b480      	push	{r7}
 800a152:	b085      	sub	sp, #20
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a158:	4b1a      	ldr	r3, [pc, #104]	; (800a1c4 <SDMMC_GetCmdResp3+0x74>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a1a      	ldr	r2, [pc, #104]	; (800a1c8 <SDMMC_GetCmdResp3+0x78>)
 800a15e:	fba2 2303 	umull	r2, r3, r2, r3
 800a162:	0a5b      	lsrs	r3, r3, #9
 800a164:	f241 3288 	movw	r2, #5000	; 0x1388
 800a168:	fb02 f303 	mul.w	r3, r2, r3
 800a16c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	1e5a      	subs	r2, r3, #1
 800a172:	60fa      	str	r2, [r7, #12]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d102      	bne.n	800a17e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a178:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a17c:	e01b      	b.n	800a1b6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a182:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d0ef      	beq.n	800a16e <SDMMC_GetCmdResp3+0x1e>
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a194:	2b00      	cmp	r3, #0
 800a196:	d1ea      	bne.n	800a16e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a19c:	f003 0304 	and.w	r3, r3, #4
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d004      	beq.n	800a1ae <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2204      	movs	r2, #4
 800a1a8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1aa:	2304      	movs	r3, #4
 800a1ac:	e003      	b.n	800a1b6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4a06      	ldr	r2, [pc, #24]	; (800a1cc <SDMMC_GetCmdResp3+0x7c>)
 800a1b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3714      	adds	r7, #20
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr
 800a1c2:	bf00      	nop
 800a1c4:	24000000 	.word	0x24000000
 800a1c8:	10624dd3 	.word	0x10624dd3
 800a1cc:	002000c5 	.word	0x002000c5

0800a1d0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b088      	sub	sp, #32
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	460b      	mov	r3, r1
 800a1da:	607a      	str	r2, [r7, #4]
 800a1dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a1de:	4b35      	ldr	r3, [pc, #212]	; (800a2b4 <SDMMC_GetCmdResp6+0xe4>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a35      	ldr	r2, [pc, #212]	; (800a2b8 <SDMMC_GetCmdResp6+0xe8>)
 800a1e4:	fba2 2303 	umull	r2, r3, r2, r3
 800a1e8:	0a5b      	lsrs	r3, r3, #9
 800a1ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1ee:	fb02 f303 	mul.w	r3, r2, r3
 800a1f2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	1e5a      	subs	r2, r3, #1
 800a1f8:	61fa      	str	r2, [r7, #28]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d102      	bne.n	800a204 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a202:	e052      	b.n	800a2aa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a208:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a210:	2b00      	cmp	r3, #0
 800a212:	d0ef      	beq.n	800a1f4 <SDMMC_GetCmdResp6+0x24>
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d1ea      	bne.n	800a1f4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a222:	f003 0304 	and.w	r3, r3, #4
 800a226:	2b00      	cmp	r3, #0
 800a228:	d004      	beq.n	800a234 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2204      	movs	r2, #4
 800a22e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a230:	2304      	movs	r3, #4
 800a232:	e03a      	b.n	800a2aa <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a238:	f003 0301 	and.w	r3, r3, #1
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d004      	beq.n	800a24a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2201      	movs	r2, #1
 800a244:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a246:	2301      	movs	r3, #1
 800a248:	e02f      	b.n	800a2aa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a24a:	68f8      	ldr	r0, [r7, #12]
 800a24c:	f7ff fb7c 	bl	8009948 <SDMMC_GetCommandResponse>
 800a250:	4603      	mov	r3, r0
 800a252:	461a      	mov	r2, r3
 800a254:	7afb      	ldrb	r3, [r7, #11]
 800a256:	4293      	cmp	r3, r2
 800a258:	d001      	beq.n	800a25e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a25a:	2301      	movs	r3, #1
 800a25c:	e025      	b.n	800a2aa <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	4a16      	ldr	r2, [pc, #88]	; (800a2bc <SDMMC_GetCmdResp6+0xec>)
 800a262:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a264:	2100      	movs	r1, #0
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f7ff fb7b 	bl	8009962 <SDMMC_GetResponse>
 800a26c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a274:	2b00      	cmp	r3, #0
 800a276:	d106      	bne.n	800a286 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	0c1b      	lsrs	r3, r3, #16
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a282:	2300      	movs	r3, #0
 800a284:	e011      	b.n	800a2aa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d002      	beq.n	800a296 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a290:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a294:	e009      	b.n	800a2aa <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d002      	beq.n	800a2a6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a2a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2a4:	e001      	b.n	800a2aa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a2a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3720      	adds	r7, #32
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	24000000 	.word	0x24000000
 800a2b8:	10624dd3 	.word	0x10624dd3
 800a2bc:	002000c5 	.word	0x002000c5

0800a2c0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b085      	sub	sp, #20
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a2c8:	4b22      	ldr	r3, [pc, #136]	; (800a354 <SDMMC_GetCmdResp7+0x94>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a22      	ldr	r2, [pc, #136]	; (800a358 <SDMMC_GetCmdResp7+0x98>)
 800a2ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a2d2:	0a5b      	lsrs	r3, r3, #9
 800a2d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2d8:	fb02 f303 	mul.w	r3, r2, r3
 800a2dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	1e5a      	subs	r2, r3, #1
 800a2e2:	60fa      	str	r2, [r7, #12]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d102      	bne.n	800a2ee <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a2e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a2ec:	e02c      	b.n	800a348 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2f2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d0ef      	beq.n	800a2de <SDMMC_GetCmdResp7+0x1e>
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1ea      	bne.n	800a2de <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a30c:	f003 0304 	and.w	r3, r3, #4
 800a310:	2b00      	cmp	r3, #0
 800a312:	d004      	beq.n	800a31e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2204      	movs	r2, #4
 800a318:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a31a:	2304      	movs	r3, #4
 800a31c:	e014      	b.n	800a348 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a322:	f003 0301 	and.w	r3, r3, #1
 800a326:	2b00      	cmp	r3, #0
 800a328:	d004      	beq.n	800a334 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2201      	movs	r2, #1
 800a32e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a330:	2301      	movs	r3, #1
 800a332:	e009      	b.n	800a348 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d002      	beq.n	800a346 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2240      	movs	r2, #64	; 0x40
 800a344:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a346:	2300      	movs	r3, #0

}
 800a348:	4618      	mov	r0, r3
 800a34a:	3714      	adds	r7, #20
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr
 800a354:	24000000 	.word	0x24000000
 800a358:	10624dd3 	.word	0x10624dd3

0800a35c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a364:	4b11      	ldr	r3, [pc, #68]	; (800a3ac <SDMMC_GetCmdError+0x50>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a11      	ldr	r2, [pc, #68]	; (800a3b0 <SDMMC_GetCmdError+0x54>)
 800a36a:	fba2 2303 	umull	r2, r3, r2, r3
 800a36e:	0a5b      	lsrs	r3, r3, #9
 800a370:	f241 3288 	movw	r2, #5000	; 0x1388
 800a374:	fb02 f303 	mul.w	r3, r2, r3
 800a378:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	1e5a      	subs	r2, r3, #1
 800a37e:	60fa      	str	r2, [r7, #12]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d102      	bne.n	800a38a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a384:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a388:	e009      	b.n	800a39e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a38e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a392:	2b00      	cmp	r3, #0
 800a394:	d0f1      	beq.n	800a37a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	4a06      	ldr	r2, [pc, #24]	; (800a3b4 <SDMMC_GetCmdError+0x58>)
 800a39a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3714      	adds	r7, #20
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
 800a3aa:	bf00      	nop
 800a3ac:	24000000 	.word	0x24000000
 800a3b0:	10624dd3 	.word	0x10624dd3
 800a3b4:	002000c5 	.word	0x002000c5

0800a3b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a3bc:	4904      	ldr	r1, [pc, #16]	; (800a3d0 <MX_FATFS_Init+0x18>)
 800a3be:	4805      	ldr	r0, [pc, #20]	; (800a3d4 <MX_FATFS_Init+0x1c>)
 800a3c0:	f000 f9e4 	bl	800a78c <FATFS_LinkDriver>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	4b03      	ldr	r3, [pc, #12]	; (800a3d8 <MX_FATFS_Init+0x20>)
 800a3ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a3cc:	bf00      	nop
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	240002b8 	.word	0x240002b8
 800a3d4:	0800a85c 	.word	0x0800a85c
 800a3d8:	240002b4 	.word	0x240002b4

0800a3dc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a3e6:	f000 f879 	bl	800a4dc <BSP_SD_IsDetected>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d001      	beq.n	800a3f4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a3f0:	2302      	movs	r3, #2
 800a3f2:	e012      	b.n	800a41a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a3f4:	480b      	ldr	r0, [pc, #44]	; (800a424 <BSP_SD_Init+0x48>)
 800a3f6:	f7fc fa29 	bl	800684c <HAL_SD_Init>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a3fe:	79fb      	ldrb	r3, [r7, #7]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d109      	bne.n	800a418 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800a404:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a408:	4806      	ldr	r0, [pc, #24]	; (800a424 <BSP_SD_Init+0x48>)
 800a40a:	f7fd f8df 	bl	80075cc <HAL_SD_ConfigWideBusOperation>
 800a40e:	4603      	mov	r3, r0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d001      	beq.n	800a418 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a414:	2301      	movs	r3, #1
 800a416:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a418:	79fb      	ldrb	r3, [r7, #7]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3708      	adds	r7, #8
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	2400002c 	.word	0x2400002c

0800a428 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b088      	sub	sp, #32
 800a42c:	af02      	add	r7, sp, #8
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	607a      	str	r2, [r7, #4]
 800a434:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a436:	2300      	movs	r3, #0
 800a438:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	9300      	str	r3, [sp, #0]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	68ba      	ldr	r2, [r7, #8]
 800a442:	68f9      	ldr	r1, [r7, #12]
 800a444:	4806      	ldr	r0, [pc, #24]	; (800a460 <BSP_SD_ReadBlocks+0x38>)
 800a446:	f7fc fb1b 	bl	8006a80 <HAL_SD_ReadBlocks>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d001      	beq.n	800a454 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a450:	2301      	movs	r3, #1
 800a452:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a454:	7dfb      	ldrb	r3, [r7, #23]
}
 800a456:	4618      	mov	r0, r3
 800a458:	3718      	adds	r7, #24
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	2400002c 	.word	0x2400002c

0800a464 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b088      	sub	sp, #32
 800a468:	af02      	add	r7, sp, #8
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	60b9      	str	r1, [r7, #8]
 800a46e:	607a      	str	r2, [r7, #4]
 800a470:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a472:	2300      	movs	r3, #0
 800a474:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	68f9      	ldr	r1, [r7, #12]
 800a480:	4806      	ldr	r0, [pc, #24]	; (800a49c <BSP_SD_WriteBlocks+0x38>)
 800a482:	f7fc fc87 	bl	8006d94 <HAL_SD_WriteBlocks>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d001      	beq.n	800a490 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a490:	7dfb      	ldrb	r3, [r7, #23]
}
 800a492:	4618      	mov	r0, r3
 800a494:	3718      	adds	r7, #24
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	2400002c 	.word	0x2400002c

0800a4a0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a4a4:	4805      	ldr	r0, [pc, #20]	; (800a4bc <BSP_SD_GetCardState+0x1c>)
 800a4a6:	f7fd f9a3 	bl	80077f0 <HAL_SD_GetCardState>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b04      	cmp	r3, #4
 800a4ae:	bf14      	ite	ne
 800a4b0:	2301      	movne	r3, #1
 800a4b2:	2300      	moveq	r3, #0
 800a4b4:	b2db      	uxtb	r3, r3
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	2400002c 	.word	0x2400002c

0800a4c0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a4c8:	6879      	ldr	r1, [r7, #4]
 800a4ca:	4803      	ldr	r0, [pc, #12]	; (800a4d8 <BSP_SD_GetCardInfo+0x18>)
 800a4cc:	f7fd f852 	bl	8007574 <HAL_SD_GetCardInfo>
}
 800a4d0:	bf00      	nop
 800a4d2:	3708      	adds	r7, #8
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	2400002c 	.word	0x2400002c

0800a4dc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a4e6:	f000 f80b 	bl	800a500 <BSP_PlatformIsDetected>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d101      	bne.n	800a4f4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a4f4:	79fb      	ldrb	r3, [r7, #7]
 800a4f6:	b2db      	uxtb	r3, r3
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a506:	2301      	movs	r3, #1
 800a508:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a50a:	2104      	movs	r1, #4
 800a50c:	4806      	ldr	r0, [pc, #24]	; (800a528 <BSP_PlatformIsDetected+0x28>)
 800a50e:	f7f9 f805 	bl	800351c <HAL_GPIO_ReadPin>
 800a512:	4603      	mov	r3, r0
 800a514:	2b00      	cmp	r3, #0
 800a516:	d001      	beq.n	800a51c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800a518:	2300      	movs	r3, #0
 800a51a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a51c:	79fb      	ldrb	r3, [r7, #7]
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	58020400 	.word	0x58020400

0800a52c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	4603      	mov	r3, r0
 800a534:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a536:	4b0b      	ldr	r3, [pc, #44]	; (800a564 <SD_CheckStatus+0x38>)
 800a538:	2201      	movs	r2, #1
 800a53a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a53c:	f7ff ffb0 	bl	800a4a0 <BSP_SD_GetCardState>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d107      	bne.n	800a556 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a546:	4b07      	ldr	r3, [pc, #28]	; (800a564 <SD_CheckStatus+0x38>)
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	f023 0301 	bic.w	r3, r3, #1
 800a550:	b2da      	uxtb	r2, r3
 800a552:	4b04      	ldr	r3, [pc, #16]	; (800a564 <SD_CheckStatus+0x38>)
 800a554:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a556:	4b03      	ldr	r3, [pc, #12]	; (800a564 <SD_CheckStatus+0x38>)
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	b2db      	uxtb	r3, r3
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3708      	adds	r7, #8
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}
 800a564:	2400000d 	.word	0x2400000d

0800a568 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	4603      	mov	r3, r0
 800a570:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a572:	4b0b      	ldr	r3, [pc, #44]	; (800a5a0 <SD_initialize+0x38>)
 800a574:	2201      	movs	r2, #1
 800a576:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a578:	f7ff ff30 	bl	800a3dc <BSP_SD_Init>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d107      	bne.n	800a592 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a582:	79fb      	ldrb	r3, [r7, #7]
 800a584:	4618      	mov	r0, r3
 800a586:	f7ff ffd1 	bl	800a52c <SD_CheckStatus>
 800a58a:	4603      	mov	r3, r0
 800a58c:	461a      	mov	r2, r3
 800a58e:	4b04      	ldr	r3, [pc, #16]	; (800a5a0 <SD_initialize+0x38>)
 800a590:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a592:	4b03      	ldr	r3, [pc, #12]	; (800a5a0 <SD_initialize+0x38>)
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	b2db      	uxtb	r3, r3
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	2400000d 	.word	0x2400000d

0800a5a4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a5ae:	79fb      	ldrb	r3, [r7, #7]
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7ff ffbb 	bl	800a52c <SD_CheckStatus>
 800a5b6:	4603      	mov	r3, r0
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3708      	adds	r7, #8
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b086      	sub	sp, #24
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60b9      	str	r1, [r7, #8]
 800a5c8:	607a      	str	r2, [r7, #4]
 800a5ca:	603b      	str	r3, [r7, #0]
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a5d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a5d8:	683a      	ldr	r2, [r7, #0]
 800a5da:	6879      	ldr	r1, [r7, #4]
 800a5dc:	68b8      	ldr	r0, [r7, #8]
 800a5de:	f7ff ff23 	bl	800a428 <BSP_SD_ReadBlocks>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d107      	bne.n	800a5f8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a5e8:	bf00      	nop
 800a5ea:	f7ff ff59 	bl	800a4a0 <BSP_SD_GetCardState>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d1fa      	bne.n	800a5ea <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a5f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3718      	adds	r7, #24
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}

0800a602 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a602:	b580      	push	{r7, lr}
 800a604:	b086      	sub	sp, #24
 800a606:	af00      	add	r7, sp, #0
 800a608:	60b9      	str	r1, [r7, #8]
 800a60a:	607a      	str	r2, [r7, #4]
 800a60c:	603b      	str	r3, [r7, #0]
 800a60e:	4603      	mov	r3, r0
 800a610:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a612:	2301      	movs	r3, #1
 800a614:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a616:	f04f 33ff 	mov.w	r3, #4294967295
 800a61a:	683a      	ldr	r2, [r7, #0]
 800a61c:	6879      	ldr	r1, [r7, #4]
 800a61e:	68b8      	ldr	r0, [r7, #8]
 800a620:	f7ff ff20 	bl	800a464 <BSP_SD_WriteBlocks>
 800a624:	4603      	mov	r3, r0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d107      	bne.n	800a63a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a62a:	bf00      	nop
 800a62c:	f7ff ff38 	bl	800a4a0 <BSP_SD_GetCardState>
 800a630:	4603      	mov	r3, r0
 800a632:	2b00      	cmp	r3, #0
 800a634:	d1fa      	bne.n	800a62c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a636:	2300      	movs	r3, #0
 800a638:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a63a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3718      	adds	r7, #24
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b08c      	sub	sp, #48	; 0x30
 800a648:	af00      	add	r7, sp, #0
 800a64a:	4603      	mov	r3, r0
 800a64c:	603a      	str	r2, [r7, #0]
 800a64e:	71fb      	strb	r3, [r7, #7]
 800a650:	460b      	mov	r3, r1
 800a652:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a65a:	4b25      	ldr	r3, [pc, #148]	; (800a6f0 <SD_ioctl+0xac>)
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	f003 0301 	and.w	r3, r3, #1
 800a664:	2b00      	cmp	r3, #0
 800a666:	d001      	beq.n	800a66c <SD_ioctl+0x28>
 800a668:	2303      	movs	r3, #3
 800a66a:	e03c      	b.n	800a6e6 <SD_ioctl+0xa2>

  switch (cmd)
 800a66c:	79bb      	ldrb	r3, [r7, #6]
 800a66e:	2b03      	cmp	r3, #3
 800a670:	d834      	bhi.n	800a6dc <SD_ioctl+0x98>
 800a672:	a201      	add	r2, pc, #4	; (adr r2, 800a678 <SD_ioctl+0x34>)
 800a674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a678:	0800a689 	.word	0x0800a689
 800a67c:	0800a691 	.word	0x0800a691
 800a680:	0800a6a9 	.word	0x0800a6a9
 800a684:	0800a6c3 	.word	0x0800a6c3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a688:	2300      	movs	r3, #0
 800a68a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a68e:	e028      	b.n	800a6e2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a690:	f107 0308 	add.w	r3, r7, #8
 800a694:	4618      	mov	r0, r3
 800a696:	f7ff ff13 	bl	800a4c0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a69a:	6a3a      	ldr	r2, [r7, #32]
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a6a6:	e01c      	b.n	800a6e2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a6a8:	f107 0308 	add.w	r3, r7, #8
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7ff ff07 	bl	800a4c0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b4:	b29a      	uxth	r2, r3
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a6c0:	e00f      	b.n	800a6e2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a6c2:	f107 0308 	add.w	r3, r7, #8
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7ff fefa 	bl	800a4c0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ce:	0a5a      	lsrs	r2, r3, #9
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a6da:	e002      	b.n	800a6e2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a6dc:	2304      	movs	r3, #4
 800a6de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a6e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3730      	adds	r7, #48	; 0x30
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	2400000d 	.word	0x2400000d

0800a6f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b087      	sub	sp, #28
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	4613      	mov	r3, r2
 800a700:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a702:	2301      	movs	r3, #1
 800a704:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a706:	2300      	movs	r3, #0
 800a708:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a70a:	4b1f      	ldr	r3, [pc, #124]	; (800a788 <FATFS_LinkDriverEx+0x94>)
 800a70c:	7a5b      	ldrb	r3, [r3, #9]
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	2b00      	cmp	r3, #0
 800a712:	d131      	bne.n	800a778 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a714:	4b1c      	ldr	r3, [pc, #112]	; (800a788 <FATFS_LinkDriverEx+0x94>)
 800a716:	7a5b      	ldrb	r3, [r3, #9]
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	461a      	mov	r2, r3
 800a71c:	4b1a      	ldr	r3, [pc, #104]	; (800a788 <FATFS_LinkDriverEx+0x94>)
 800a71e:	2100      	movs	r1, #0
 800a720:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a722:	4b19      	ldr	r3, [pc, #100]	; (800a788 <FATFS_LinkDriverEx+0x94>)
 800a724:	7a5b      	ldrb	r3, [r3, #9]
 800a726:	b2db      	uxtb	r3, r3
 800a728:	4a17      	ldr	r2, [pc, #92]	; (800a788 <FATFS_LinkDriverEx+0x94>)
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	4413      	add	r3, r2
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a732:	4b15      	ldr	r3, [pc, #84]	; (800a788 <FATFS_LinkDriverEx+0x94>)
 800a734:	7a5b      	ldrb	r3, [r3, #9]
 800a736:	b2db      	uxtb	r3, r3
 800a738:	461a      	mov	r2, r3
 800a73a:	4b13      	ldr	r3, [pc, #76]	; (800a788 <FATFS_LinkDriverEx+0x94>)
 800a73c:	4413      	add	r3, r2
 800a73e:	79fa      	ldrb	r2, [r7, #7]
 800a740:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a742:	4b11      	ldr	r3, [pc, #68]	; (800a788 <FATFS_LinkDriverEx+0x94>)
 800a744:	7a5b      	ldrb	r3, [r3, #9]
 800a746:	b2db      	uxtb	r3, r3
 800a748:	1c5a      	adds	r2, r3, #1
 800a74a:	b2d1      	uxtb	r1, r2
 800a74c:	4a0e      	ldr	r2, [pc, #56]	; (800a788 <FATFS_LinkDriverEx+0x94>)
 800a74e:	7251      	strb	r1, [r2, #9]
 800a750:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a752:	7dbb      	ldrb	r3, [r7, #22]
 800a754:	3330      	adds	r3, #48	; 0x30
 800a756:	b2da      	uxtb	r2, r3
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	3301      	adds	r3, #1
 800a760:	223a      	movs	r2, #58	; 0x3a
 800a762:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	3302      	adds	r3, #2
 800a768:	222f      	movs	r2, #47	; 0x2f
 800a76a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	3303      	adds	r3, #3
 800a770:	2200      	movs	r2, #0
 800a772:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a774:	2300      	movs	r3, #0
 800a776:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a778:	7dfb      	ldrb	r3, [r7, #23]
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	371c      	adds	r7, #28
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	240002bc 	.word	0x240002bc

0800a78c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a796:	2200      	movs	r2, #0
 800a798:	6839      	ldr	r1, [r7, #0]
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f7ff ffaa 	bl	800a6f4 <FATFS_LinkDriverEx>
 800a7a0:	4603      	mov	r3, r0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3708      	adds	r7, #8
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
	...

0800a7ac <__libc_init_array>:
 800a7ac:	b570      	push	{r4, r5, r6, lr}
 800a7ae:	4d0d      	ldr	r5, [pc, #52]	; (800a7e4 <__libc_init_array+0x38>)
 800a7b0:	4c0d      	ldr	r4, [pc, #52]	; (800a7e8 <__libc_init_array+0x3c>)
 800a7b2:	1b64      	subs	r4, r4, r5
 800a7b4:	10a4      	asrs	r4, r4, #2
 800a7b6:	2600      	movs	r6, #0
 800a7b8:	42a6      	cmp	r6, r4
 800a7ba:	d109      	bne.n	800a7d0 <__libc_init_array+0x24>
 800a7bc:	4d0b      	ldr	r5, [pc, #44]	; (800a7ec <__libc_init_array+0x40>)
 800a7be:	4c0c      	ldr	r4, [pc, #48]	; (800a7f0 <__libc_init_array+0x44>)
 800a7c0:	f000 f820 	bl	800a804 <_init>
 800a7c4:	1b64      	subs	r4, r4, r5
 800a7c6:	10a4      	asrs	r4, r4, #2
 800a7c8:	2600      	movs	r6, #0
 800a7ca:	42a6      	cmp	r6, r4
 800a7cc:	d105      	bne.n	800a7da <__libc_init_array+0x2e>
 800a7ce:	bd70      	pop	{r4, r5, r6, pc}
 800a7d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7d4:	4798      	blx	r3
 800a7d6:	3601      	adds	r6, #1
 800a7d8:	e7ee      	b.n	800a7b8 <__libc_init_array+0xc>
 800a7da:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7de:	4798      	blx	r3
 800a7e0:	3601      	adds	r6, #1
 800a7e2:	e7f2      	b.n	800a7ca <__libc_init_array+0x1e>
 800a7e4:	0800a878 	.word	0x0800a878
 800a7e8:	0800a878 	.word	0x0800a878
 800a7ec:	0800a878 	.word	0x0800a878
 800a7f0:	0800a87c 	.word	0x0800a87c

0800a7f4 <memset>:
 800a7f4:	4402      	add	r2, r0
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d100      	bne.n	800a7fe <memset+0xa>
 800a7fc:	4770      	bx	lr
 800a7fe:	f803 1b01 	strb.w	r1, [r3], #1
 800a802:	e7f9      	b.n	800a7f8 <memset+0x4>

0800a804 <_init>:
 800a804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a806:	bf00      	nop
 800a808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a80a:	bc08      	pop	{r3}
 800a80c:	469e      	mov	lr, r3
 800a80e:	4770      	bx	lr

0800a810 <_fini>:
 800a810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a812:	bf00      	nop
 800a814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a816:	bc08      	pop	{r3}
 800a818:	469e      	mov	lr, r3
 800a81a:	4770      	bx	lr
